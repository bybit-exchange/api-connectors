=begin
#Bybit API

### REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  

OpenAPI spec version: 0.2.10
Contact: support@bybit.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SwaggerClient
  # Get the orderbook response
  class SymbolTickInfo
    attr_accessor :symbol

    attr_accessor :bid_price

    attr_accessor :ask_price

    attr_accessor :last_price

    attr_accessor :last_tick_direction

    attr_accessor :prev_price_24h

    attr_accessor :price_24h_pcnt

    attr_accessor :high_price_24h

    attr_accessor :low_price_24h

    attr_accessor :prev_price_1h

    attr_accessor :price_1h_pcnt

    attr_accessor :mark_price

    attr_accessor :index_price

    attr_accessor :open_interest

    attr_accessor :open_value

    attr_accessor :total_turnover

    attr_accessor :turnover_24h

    attr_accessor :total_volume

    attr_accessor :volume_24h

    attr_accessor :funding_rate

    attr_accessor :predicted_funding_rate

    attr_accessor :next_funding_time

    attr_accessor :countdown_hour

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'symbol' => :'symbol',
        :'bid_price' => :'bid_price',
        :'ask_price' => :'ask_price',
        :'last_price' => :'last_price',
        :'last_tick_direction' => :'last_tick_direction',
        :'prev_price_24h' => :'prev_price_24h',
        :'price_24h_pcnt' => :'price_24h_pcnt',
        :'high_price_24h' => :'high_price_24h',
        :'low_price_24h' => :'low_price_24h',
        :'prev_price_1h' => :'prev_price_1h',
        :'price_1h_pcnt' => :'price_1h_pcnt',
        :'mark_price' => :'mark_price',
        :'index_price' => :'index_price',
        :'open_interest' => :'open_interest',
        :'open_value' => :'open_value',
        :'total_turnover' => :'total_turnover',
        :'turnover_24h' => :'turnover_24h',
        :'total_volume' => :'total_volume',
        :'volume_24h' => :'volume_24h',
        :'funding_rate' => :'funding_rate',
        :'predicted_funding_rate' => :'predicted_funding_rate',
        :'next_funding_time' => :'next_funding_time',
        :'countdown_hour' => :'countdown_hour'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'symbol' => :'String',
        :'bid_price' => :'String',
        :'ask_price' => :'String',
        :'last_price' => :'String',
        :'last_tick_direction' => :'String',
        :'prev_price_24h' => :'String',
        :'price_24h_pcnt' => :'String',
        :'high_price_24h' => :'String',
        :'low_price_24h' => :'String',
        :'prev_price_1h' => :'String',
        :'price_1h_pcnt' => :'String',
        :'mark_price' => :'String',
        :'index_price' => :'String',
        :'open_interest' => :'Float',
        :'open_value' => :'String',
        :'total_turnover' => :'String',
        :'turnover_24h' => :'String',
        :'total_volume' => :'Float',
        :'volume_24h' => :'Float',
        :'funding_rate' => :'String',
        :'predicted_funding_rate' => :'String',
        :'next_funding_time' => :'String',
        :'countdown_hour' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.has_key?(:'bid_price')
        self.bid_price = attributes[:'bid_price']
      end

      if attributes.has_key?(:'ask_price')
        self.ask_price = attributes[:'ask_price']
      end

      if attributes.has_key?(:'last_price')
        self.last_price = attributes[:'last_price']
      end

      if attributes.has_key?(:'last_tick_direction')
        self.last_tick_direction = attributes[:'last_tick_direction']
      end

      if attributes.has_key?(:'prev_price_24h')
        self.prev_price_24h = attributes[:'prev_price_24h']
      end

      if attributes.has_key?(:'price_24h_pcnt')
        self.price_24h_pcnt = attributes[:'price_24h_pcnt']
      end

      if attributes.has_key?(:'high_price_24h')
        self.high_price_24h = attributes[:'high_price_24h']
      end

      if attributes.has_key?(:'low_price_24h')
        self.low_price_24h = attributes[:'low_price_24h']
      end

      if attributes.has_key?(:'prev_price_1h')
        self.prev_price_1h = attributes[:'prev_price_1h']
      end

      if attributes.has_key?(:'price_1h_pcnt')
        self.price_1h_pcnt = attributes[:'price_1h_pcnt']
      end

      if attributes.has_key?(:'mark_price')
        self.mark_price = attributes[:'mark_price']
      end

      if attributes.has_key?(:'index_price')
        self.index_price = attributes[:'index_price']
      end

      if attributes.has_key?(:'open_interest')
        self.open_interest = attributes[:'open_interest']
      end

      if attributes.has_key?(:'open_value')
        self.open_value = attributes[:'open_value']
      end

      if attributes.has_key?(:'total_turnover')
        self.total_turnover = attributes[:'total_turnover']
      end

      if attributes.has_key?(:'turnover_24h')
        self.turnover_24h = attributes[:'turnover_24h']
      end

      if attributes.has_key?(:'total_volume')
        self.total_volume = attributes[:'total_volume']
      end

      if attributes.has_key?(:'volume_24h')
        self.volume_24h = attributes[:'volume_24h']
      end

      if attributes.has_key?(:'funding_rate')
        self.funding_rate = attributes[:'funding_rate']
      end

      if attributes.has_key?(:'predicted_funding_rate')
        self.predicted_funding_rate = attributes[:'predicted_funding_rate']
      end

      if attributes.has_key?(:'next_funding_time')
        self.next_funding_time = attributes[:'next_funding_time']
      end

      if attributes.has_key?(:'countdown_hour')
        self.countdown_hour = attributes[:'countdown_hour']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          symbol == o.symbol &&
          bid_price == o.bid_price &&
          ask_price == o.ask_price &&
          last_price == o.last_price &&
          last_tick_direction == o.last_tick_direction &&
          prev_price_24h == o.prev_price_24h &&
          price_24h_pcnt == o.price_24h_pcnt &&
          high_price_24h == o.high_price_24h &&
          low_price_24h == o.low_price_24h &&
          prev_price_1h == o.prev_price_1h &&
          price_1h_pcnt == o.price_1h_pcnt &&
          mark_price == o.mark_price &&
          index_price == o.index_price &&
          open_interest == o.open_interest &&
          open_value == o.open_value &&
          total_turnover == o.total_turnover &&
          turnover_24h == o.turnover_24h &&
          total_volume == o.total_volume &&
          volume_24h == o.volume_24h &&
          funding_rate == o.funding_rate &&
          predicted_funding_rate == o.predicted_funding_rate &&
          next_funding_time == o.next_funding_time &&
          countdown_hour == o.countdown_hour
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [symbol, bid_price, ask_price, last_price, last_tick_direction, prev_price_24h, price_24h_pcnt, high_price_24h, low_price_24h, prev_price_1h, price_1h_pcnt, mark_price, index_price, open_interest, open_value, total_turnover, turnover_24h, total_volume, volume_24h, funding_rate, predicted_funding_rate, next_funding_time, countdown_hour].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
