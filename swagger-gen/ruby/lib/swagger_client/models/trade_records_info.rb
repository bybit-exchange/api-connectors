=begin
#Bybit API

### REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  

OpenAPI spec version: 0.2.10
Contact: support@bybit.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SwaggerClient
  # Get the trade records of a order response
  class TradeRecordsInfo
    attr_accessor :closed_size

    attr_accessor :cross_seq

    attr_accessor :exec_fee

    attr_accessor :exec_id

    attr_accessor :exec_price

    attr_accessor :exec_qty

    attr_accessor :exec_time

    attr_accessor :exec_type

    attr_accessor :exec_value

    attr_accessor :fee_rate

    attr_accessor :last_liquidity_ind

    attr_accessor :leaves_qty

    attr_accessor :nth_fill

    attr_accessor :order_id

    attr_accessor :order_price

    attr_accessor :order_qty

    attr_accessor :order_type

    attr_accessor :side

    attr_accessor :symbol

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'closed_size' => :'closed_size',
        :'cross_seq' => :'cross_seq',
        :'exec_fee' => :'exec_fee',
        :'exec_id' => :'exec_id',
        :'exec_price' => :'exec_price',
        :'exec_qty' => :'exec_qty',
        :'exec_time' => :'exec_time',
        :'exec_type' => :'exec_type',
        :'exec_value' => :'exec_value',
        :'fee_rate' => :'fee_rate',
        :'last_liquidity_ind' => :'last_liquidity_ind',
        :'leaves_qty' => :'leaves_qty',
        :'nth_fill' => :'nth_fill',
        :'order_id' => :'order_id',
        :'order_price' => :'order_price',
        :'order_qty' => :'order_qty',
        :'order_type' => :'order_type',
        :'side' => :'side',
        :'symbol' => :'symbol',
        :'user_id' => :'user_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'closed_size' => :'Float',
        :'cross_seq' => :'Float',
        :'exec_fee' => :'String',
        :'exec_id' => :'String',
        :'exec_price' => :'String',
        :'exec_qty' => :'Float',
        :'exec_time' => :'String',
        :'exec_type' => :'String',
        :'exec_value' => :'String',
        :'fee_rate' => :'String',
        :'last_liquidity_ind' => :'String',
        :'leaves_qty' => :'Float',
        :'nth_fill' => :'Float',
        :'order_id' => :'String',
        :'order_price' => :'String',
        :'order_qty' => :'Float',
        :'order_type' => :'String',
        :'side' => :'String',
        :'symbol' => :'String',
        :'user_id' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'closed_size')
        self.closed_size = attributes[:'closed_size']
      end

      if attributes.has_key?(:'cross_seq')
        self.cross_seq = attributes[:'cross_seq']
      end

      if attributes.has_key?(:'exec_fee')
        self.exec_fee = attributes[:'exec_fee']
      end

      if attributes.has_key?(:'exec_id')
        self.exec_id = attributes[:'exec_id']
      end

      if attributes.has_key?(:'exec_price')
        self.exec_price = attributes[:'exec_price']
      end

      if attributes.has_key?(:'exec_qty')
        self.exec_qty = attributes[:'exec_qty']
      end

      if attributes.has_key?(:'exec_time')
        self.exec_time = attributes[:'exec_time']
      end

      if attributes.has_key?(:'exec_type')
        self.exec_type = attributes[:'exec_type']
      end

      if attributes.has_key?(:'exec_value')
        self.exec_value = attributes[:'exec_value']
      end

      if attributes.has_key?(:'fee_rate')
        self.fee_rate = attributes[:'fee_rate']
      end

      if attributes.has_key?(:'last_liquidity_ind')
        self.last_liquidity_ind = attributes[:'last_liquidity_ind']
      end

      if attributes.has_key?(:'leaves_qty')
        self.leaves_qty = attributes[:'leaves_qty']
      end

      if attributes.has_key?(:'nth_fill')
        self.nth_fill = attributes[:'nth_fill']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'order_price')
        self.order_price = attributes[:'order_price']
      end

      if attributes.has_key?(:'order_qty')
        self.order_qty = attributes[:'order_qty']
      end

      if attributes.has_key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.has_key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.has_key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          closed_size == o.closed_size &&
          cross_seq == o.cross_seq &&
          exec_fee == o.exec_fee &&
          exec_id == o.exec_id &&
          exec_price == o.exec_price &&
          exec_qty == o.exec_qty &&
          exec_time == o.exec_time &&
          exec_type == o.exec_type &&
          exec_value == o.exec_value &&
          fee_rate == o.fee_rate &&
          last_liquidity_ind == o.last_liquidity_ind &&
          leaves_qty == o.leaves_qty &&
          nth_fill == o.nth_fill &&
          order_id == o.order_id &&
          order_price == o.order_price &&
          order_qty == o.order_qty &&
          order_type == o.order_type &&
          side == o.side &&
          symbol == o.symbol &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [closed_size, cross_seq, exec_fee, exec_id, exec_price, exec_qty, exec_time, exec_type, exec_value, fee_rate, last_liquidity_ind, leaves_qty, nth_fill, order_id, order_price, order_qty, order_type, side, symbol, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
