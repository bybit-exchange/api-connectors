/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ConditionalApi {
  String basePath = "https://api.bybit.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Cancel conditional order.
  * 
   * @param symbol Contract type.
   * @param stopOrderId Order ID of conditional order.
   * @param orderLinkId Agency customized order ID.
   * @return Object
  */
  public Object conditionalCancel (String symbol, String stopOrderId, String orderLinkId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalCancel",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalCancel"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/cancel";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (stopOrderId != null) {
        localVarBuilder.addTextBody("stop_order_id", ApiInvoker.parameterToString(stopOrderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stop_order_id", ApiInvoker.parameterToString(stopOrderId));
      formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
      formParams.put("symbol", ApiInvoker.parameterToString(symbol));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel conditional order.
   * 
   * @param symbol Contract type.   * @param stopOrderId Order ID of conditional order.   * @param orderLinkId Agency customized order ID.
  */
  public void conditionalCancel (String symbol, String stopOrderId, String orderLinkId, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalCancel",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalCancel"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/cancel".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (stopOrderId != null) {
        localVarBuilder.addTextBody("stop_order_id", ApiInvoker.parameterToString(stopOrderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stop_order_id", ApiInvoker.parameterToString(stopOrderId));
formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
formParams.put("symbol", ApiInvoker.parameterToString(symbol));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel conditional order.
  * 
   * @param symbol Contract type.
   * @return Object
  */
  public Object conditionalCancelAll (String symbol) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalCancelAll",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalCancelAll"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/cancelAll";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("symbol", ApiInvoker.parameterToString(symbol));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel conditional order.
   * 
   * @param symbol Contract type.
  */
  public void conditionalCancelAll (String symbol, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalCancelAll",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalCancelAll"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/cancelAll".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("symbol", ApiInvoker.parameterToString(symbol));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get my conditional order list.
  * 
   * @param symbol Contract type
   * @param stopOrderStatus Stop order status.
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page.
   * @param direction Search direction. prev: prev page, next: next page. Defaults to next
   * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode
   * @return Object
  */
  public Object conditionalGetOrders (String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalGetOrders",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalGetOrders"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/list";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_order_status", stopOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "direction", direction));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cursor", cursor));
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get my conditional order list.
   * 
   * @param symbol Contract type   * @param stopOrderStatus Stop order status.   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page.   * @param direction Search direction. prev: prev page, next: next page. Defaults to next   * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode
  */
  public void conditionalGetOrders (String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalGetOrders",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalGetOrders"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_order_status", stopOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "direction", direction));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cursor", cursor));


    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Place a new conditional order.
  * 
   * @param side Side.
   * @param symbol Contract type.
   * @param orderType Conditional order type.
   * @param qty Order quantity.
   * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..
   * @param stopPx Trigger price.
   * @param timeInForce Time in force.
   * @param price Execution price for conditional order
   * @param triggerBy Trigger price type. Default LastPrice.
   * @param closeOnTrigger close on trigger.
   * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique..
   * @return Object
  */
  public Object conditionalNew (String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'side' is set
    if (side == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'side' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'side' when calling conditionalNew"));
    }
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalNew"));
    }
    // verify the required parameter 'orderType' is set
    if (orderType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderType' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'orderType' when calling conditionalNew"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'qty' when calling conditionalNew"));
    }
    // verify the required parameter 'basePrice' is set
    if (basePrice == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'basePrice' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'basePrice' when calling conditionalNew"));
    }
    // verify the required parameter 'stopPx' is set
    if (stopPx == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopPx' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'stopPx' when calling conditionalNew"));
    }
    // verify the required parameter 'timeInForce' is set
    if (timeInForce == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeInForce' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'timeInForce' when calling conditionalNew"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/create";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (side != null) {
        localVarBuilder.addTextBody("side", ApiInvoker.parameterToString(side), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (orderType != null) {
        localVarBuilder.addTextBody("order_type", ApiInvoker.parameterToString(orderType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (price != null) {
        localVarBuilder.addTextBody("price", ApiInvoker.parameterToString(price), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (basePrice != null) {
        localVarBuilder.addTextBody("base_price", ApiInvoker.parameterToString(basePrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (stopPx != null) {
        localVarBuilder.addTextBody("stop_px", ApiInvoker.parameterToString(stopPx), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timeInForce != null) {
        localVarBuilder.addTextBody("time_in_force", ApiInvoker.parameterToString(timeInForce), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (triggerBy != null) {
        localVarBuilder.addTextBody("trigger_by", ApiInvoker.parameterToString(triggerBy), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (closeOnTrigger != null) {
        localVarBuilder.addTextBody("close_on_trigger", ApiInvoker.parameterToString(closeOnTrigger), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("side", ApiInvoker.parameterToString(side));
      formParams.put("symbol", ApiInvoker.parameterToString(symbol));
      formParams.put("order_type", ApiInvoker.parameterToString(orderType));
      formParams.put("qty", ApiInvoker.parameterToString(qty));
      formParams.put("price", ApiInvoker.parameterToString(price));
      formParams.put("base_price", ApiInvoker.parameterToString(basePrice));
      formParams.put("stop_px", ApiInvoker.parameterToString(stopPx));
      formParams.put("time_in_force", ApiInvoker.parameterToString(timeInForce));
      formParams.put("trigger_by", ApiInvoker.parameterToString(triggerBy));
      formParams.put("close_on_trigger", ApiInvoker.parameterToString(closeOnTrigger));
      formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Place a new conditional order.
   * 
   * @param side Side.   * @param symbol Contract type.   * @param orderType Conditional order type.   * @param qty Order quantity.   * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..   * @param stopPx Trigger price.   * @param timeInForce Time in force.   * @param price Execution price for conditional order   * @param triggerBy Trigger price type. Default LastPrice.   * @param closeOnTrigger close on trigger.   * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique..
  */
  public void conditionalNew (String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'side' is set
    if (side == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'side' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'side' when calling conditionalNew"));
    }
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalNew"));
    }
    // verify the required parameter 'orderType' is set
    if (orderType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderType' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'orderType' when calling conditionalNew"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'qty' when calling conditionalNew"));
    }
    // verify the required parameter 'basePrice' is set
    if (basePrice == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'basePrice' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'basePrice' when calling conditionalNew"));
    }
    // verify the required parameter 'stopPx' is set
    if (stopPx == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopPx' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'stopPx' when calling conditionalNew"));
    }
    // verify the required parameter 'timeInForce' is set
    if (timeInForce == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeInForce' when calling conditionalNew",
        new ApiException(400, "Missing the required parameter 'timeInForce' when calling conditionalNew"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/create".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (side != null) {
        localVarBuilder.addTextBody("side", ApiInvoker.parameterToString(side), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderType != null) {
        localVarBuilder.addTextBody("order_type", ApiInvoker.parameterToString(orderType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (price != null) {
        localVarBuilder.addTextBody("price", ApiInvoker.parameterToString(price), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (basePrice != null) {
        localVarBuilder.addTextBody("base_price", ApiInvoker.parameterToString(basePrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (stopPx != null) {
        localVarBuilder.addTextBody("stop_px", ApiInvoker.parameterToString(stopPx), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timeInForce != null) {
        localVarBuilder.addTextBody("time_in_force", ApiInvoker.parameterToString(timeInForce), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (triggerBy != null) {
        localVarBuilder.addTextBody("trigger_by", ApiInvoker.parameterToString(triggerBy), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (closeOnTrigger != null) {
        localVarBuilder.addTextBody("close_on_trigger", ApiInvoker.parameterToString(closeOnTrigger), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("side", ApiInvoker.parameterToString(side));
formParams.put("symbol", ApiInvoker.parameterToString(symbol));
formParams.put("order_type", ApiInvoker.parameterToString(orderType));
formParams.put("qty", ApiInvoker.parameterToString(qty));
formParams.put("price", ApiInvoker.parameterToString(price));
formParams.put("base_price", ApiInvoker.parameterToString(basePrice));
formParams.put("stop_px", ApiInvoker.parameterToString(stopPx));
formParams.put("time_in_force", ApiInvoker.parameterToString(timeInForce));
formParams.put("trigger_by", ApiInvoker.parameterToString(triggerBy));
formParams.put("close_on_trigger", ApiInvoker.parameterToString(closeOnTrigger));
formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Query real-time stop order information.
  * 
   * @param stopOrderId Order ID of conditional order.
   * @param orderLinkId Agency customized order ID.
   * @param symbol Contract type.
   * @return Object
  */
  public Object conditionalQuery (String stopOrderId, String orderLinkId, String symbol) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v2/private/stop-order";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_order_id", stopOrderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_link_id", orderLinkId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Query real-time stop order information.
   * 
   * @param stopOrderId Order ID of conditional order.   * @param orderLinkId Agency customized order ID.   * @param symbol Contract type.
  */
  public void conditionalQuery (String stopOrderId, String orderLinkId, String symbol, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v2/private/stop-order".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_order_id", stopOrderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_link_id", orderLinkId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));


    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replace conditional order. Only incomplete orders can be modified. 
  * 
   * @param symbol Contract type.
   * @param stopOrderId Stop order ID.
   * @param orderLinkId Order Link ID.
   * @param pRQty Order quantity.
   * @param pRPrice Order price.
   * @param pRTriggerPrice Trigger price.
   * @return Object
  */
  public Object conditionalReplace (String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalReplace",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalReplace"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/replace";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (stopOrderId != null) {
        localVarBuilder.addTextBody("stop_order_id", ApiInvoker.parameterToString(stopOrderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pRQty != null) {
        localVarBuilder.addTextBody("p_r_qty", ApiInvoker.parameterToString(pRQty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pRPrice != null) {
        localVarBuilder.addTextBody("p_r_price", ApiInvoker.parameterToString(pRPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pRTriggerPrice != null) {
        localVarBuilder.addTextBody("p_r_trigger_price", ApiInvoker.parameterToString(pRTriggerPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stop_order_id", ApiInvoker.parameterToString(stopOrderId));
      formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
      formParams.put("symbol", ApiInvoker.parameterToString(symbol));
      formParams.put("p_r_qty", ApiInvoker.parameterToString(pRQty));
      formParams.put("p_r_price", ApiInvoker.parameterToString(pRPrice));
      formParams.put("p_r_trigger_price", ApiInvoker.parameterToString(pRTriggerPrice));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace conditional order. Only incomplete orders can be modified. 
   * 
   * @param symbol Contract type.   * @param stopOrderId Stop order ID.   * @param orderLinkId Order Link ID.   * @param pRQty Order quantity.   * @param pRPrice Order price.   * @param pRTriggerPrice Trigger price.
  */
  public void conditionalReplace (String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling conditionalReplace",
        new ApiException(400, "Missing the required parameter 'symbol' when calling conditionalReplace"));
    }

    // create path and map variables
    String path = "/v2/private/stop-order/replace".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (stopOrderId != null) {
        localVarBuilder.addTextBody("stop_order_id", ApiInvoker.parameterToString(stopOrderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderLinkId != null) {
        localVarBuilder.addTextBody("order_link_id", ApiInvoker.parameterToString(orderLinkId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (symbol != null) {
        localVarBuilder.addTextBody("symbol", ApiInvoker.parameterToString(symbol), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pRQty != null) {
        localVarBuilder.addTextBody("p_r_qty", ApiInvoker.parameterToString(pRQty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pRPrice != null) {
        localVarBuilder.addTextBody("p_r_price", ApiInvoker.parameterToString(pRPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pRTriggerPrice != null) {
        localVarBuilder.addTextBody("p_r_trigger_price", ApiInvoker.parameterToString(pRTriggerPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stop_order_id", ApiInvoker.parameterToString(stopOrderId));
formParams.put("order_link_id", ApiInvoker.parameterToString(orderLinkId));
formParams.put("symbol", ApiInvoker.parameterToString(symbol));
formParams.put("p_r_qty", ApiInvoker.parameterToString(pRQty));
formParams.put("p_r_price", ApiInvoker.parameterToString(pRPrice));
formParams.put("p_r_trigger_price", ApiInvoker.parameterToString(pRTriggerPrice));
    }

    String[] authNames = new String[] { "apiKey", "apiSignature", "timestamp" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
