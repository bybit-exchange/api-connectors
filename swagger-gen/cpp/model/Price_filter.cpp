/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Price_filter.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Price_filter::Price_filter()
{
    m_Min_price = utility::conversions::to_string_t("");
    m_Min_priceIsSet = false;
    m_Max_price = utility::conversions::to_string_t("");
    m_Max_priceIsSet = false;
    m_Tick_size = utility::conversions::to_string_t("");
    m_Tick_sizeIsSet = false;
}

Price_filter::~Price_filter()
{
}

void Price_filter::validate()
{
    // TODO: implement validation
}

web::json::value Price_filter::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Min_priceIsSet)
    {
        val[utility::conversions::to_string_t("min_price")] = ModelBase::toJson(m_Min_price);
    }
    if(m_Max_priceIsSet)
    {
        val[utility::conversions::to_string_t("max_price")] = ModelBase::toJson(m_Max_price);
    }
    if(m_Tick_sizeIsSet)
    {
        val[utility::conversions::to_string_t("tick_size")] = ModelBase::toJson(m_Tick_size);
    }

    return val;
}

void Price_filter::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("min_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("min_price")];
        if(!fieldValue.is_null())
        {
            setMinPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("max_price")];
        if(!fieldValue.is_null())
        {
            setMaxPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tick_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tick_size")];
        if(!fieldValue.is_null())
        {
            setTickSize(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Price_filter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Min_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("min_price"), m_Min_price));
        
    }
    if(m_Max_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_price"), m_Max_price));
        
    }
    if(m_Tick_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tick_size"), m_Tick_size));
        
    }
}

void Price_filter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("min_price")))
    {
        setMinPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("min_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_price")))
    {
        setMaxPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tick_size")))
    {
        setTickSize(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tick_size"))));
    }
}

utility::string_t Price_filter::getMinPrice() const
{
    return m_Min_price;
}


void Price_filter::setMinPrice(utility::string_t value)
{
    m_Min_price = value;
    m_Min_priceIsSet = true;
}
bool Price_filter::minPriceIsSet() const
{
    return m_Min_priceIsSet;
}

void Price_filter::unsetMin_price()
{
    m_Min_priceIsSet = false;
}

utility::string_t Price_filter::getMaxPrice() const
{
    return m_Max_price;
}


void Price_filter::setMaxPrice(utility::string_t value)
{
    m_Max_price = value;
    m_Max_priceIsSet = true;
}
bool Price_filter::maxPriceIsSet() const
{
    return m_Max_priceIsSet;
}

void Price_filter::unsetMax_price()
{
    m_Max_priceIsSet = false;
}

utility::string_t Price_filter::getTickSize() const
{
    return m_Tick_size;
}


void Price_filter::setTickSize(utility::string_t value)
{
    m_Tick_size = value;
    m_Tick_sizeIsSet = true;
}
bool Price_filter::tickSizeIsSet() const
{
    return m_Tick_sizeIsSet;
}

void Price_filter::unsetTick_size()
{
    m_Tick_sizeIsSet = false;
}

}
}
}
}

