/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FundingFeeRes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

FundingFeeRes::FundingFeeRes()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Size = 0.0;
    m_SizeIsSet = false;
    m_Funding_rate = utility::conversions::to_string_t("");
    m_Funding_rateIsSet = false;
    m_Exec_fee = 0.0;
    m_Exec_feeIsSet = false;
    m_Exec_timestamp = 0.0;
    m_Exec_timestampIsSet = false;
}

FundingFeeRes::~FundingFeeRes()
{
}

void FundingFeeRes::validate()
{
    // TODO: implement validation
}

web::json::value FundingFeeRes::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_Funding_rateIsSet)
    {
        val[utility::conversions::to_string_t("funding_rate")] = ModelBase::toJson(m_Funding_rate);
    }
    if(m_Exec_feeIsSet)
    {
        val[utility::conversions::to_string_t("exec_fee")] = ModelBase::toJson(m_Exec_fee);
    }
    if(m_Exec_timestampIsSet)
    {
        val[utility::conversions::to_string_t("exec_timestamp")] = ModelBase::toJson(m_Exec_timestamp);
    }

    return val;
}

void FundingFeeRes::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("size")];
        if(!fieldValue.is_null())
        {
            setSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("funding_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("funding_rate")];
        if(!fieldValue.is_null())
        {
            setFundingRate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_fee")];
        if(!fieldValue.is_null())
        {
            setExecFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_timestamp")];
        if(!fieldValue.is_null())
        {
            setExecTimestamp(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void FundingFeeRes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_Funding_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("funding_rate"), m_Funding_rate));
        
    }
    if(m_Exec_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_fee"), m_Exec_fee));
    }
    if(m_Exec_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_timestamp"), m_Exec_timestamp));
    }
}

void FundingFeeRes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("funding_rate")))
    {
        setFundingRate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("funding_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_fee")))
    {
        setExecFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_timestamp")))
    {
        setExecTimestamp(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_timestamp"))));
    }
}

utility::string_t FundingFeeRes::getSymbol() const
{
    return m_Symbol;
}


void FundingFeeRes::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool FundingFeeRes::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void FundingFeeRes::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t FundingFeeRes::getSide() const
{
    return m_Side;
}


void FundingFeeRes::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool FundingFeeRes::sideIsSet() const
{
    return m_SideIsSet;
}

void FundingFeeRes::unsetSide()
{
    m_SideIsSet = false;
}

double FundingFeeRes::getSize() const
{
    return m_Size;
}


void FundingFeeRes::setSize(double value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool FundingFeeRes::sizeIsSet() const
{
    return m_SizeIsSet;
}

void FundingFeeRes::unsetSize()
{
    m_SizeIsSet = false;
}

utility::string_t FundingFeeRes::getFundingRate() const
{
    return m_Funding_rate;
}


void FundingFeeRes::setFundingRate(utility::string_t value)
{
    m_Funding_rate = value;
    m_Funding_rateIsSet = true;
}
bool FundingFeeRes::fundingRateIsSet() const
{
    return m_Funding_rateIsSet;
}

void FundingFeeRes::unsetFunding_rate()
{
    m_Funding_rateIsSet = false;
}

double FundingFeeRes::getExecFee() const
{
    return m_Exec_fee;
}


void FundingFeeRes::setExecFee(double value)
{
    m_Exec_fee = value;
    m_Exec_feeIsSet = true;
}
bool FundingFeeRes::execFeeIsSet() const
{
    return m_Exec_feeIsSet;
}

void FundingFeeRes::unsetExec_fee()
{
    m_Exec_feeIsSet = false;
}

double FundingFeeRes::getExecTimestamp() const
{
    return m_Exec_timestamp;
}


void FundingFeeRes::setExecTimestamp(double value)
{
    m_Exec_timestamp = value;
    m_Exec_timestampIsSet = true;
}
bool FundingFeeRes::execTimestampIsSet() const
{
    return m_Exec_timestampIsSet;
}

void FundingFeeRes::unsetExec_timestamp()
{
    m_Exec_timestampIsSet = false;
}

}
}
}
}

