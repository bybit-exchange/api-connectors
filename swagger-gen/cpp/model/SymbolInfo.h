/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SymbolInfo.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_SymbolInfo_H_
#define IO_SWAGGER_CLIENT_MODEL_SymbolInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SymbolInfo
    : public ModelBase
{
public:
    SymbolInfo();
    virtual ~SymbolInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SymbolInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBaseCurrency() const;
    bool baseCurrencyIsSet() const;
    void unsetBase_currency();
    void setBaseCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQuoteCurrency() const;
    bool quoteCurrencyIsSet() const;
    void unsetQuote_currency();
    void setQuoteCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getPriceScale() const;
    bool priceScaleIsSet() const;
    void unsetPrice_scale();
    void setPriceScale(double value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getPriceFilter() const;
    bool priceFilterIsSet() const;
    void unsetPrice_filter();
    void setPriceFilter(std::shared_ptr<Object> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getLotSizeFilter() const;
    bool lotSizeFilterIsSet() const;
    void unsetLot_size_filter();
    void setLotSizeFilter(std::shared_ptr<Object> value);

protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Base_currency;
    bool m_Base_currencyIsSet;
    utility::string_t m_Quote_currency;
    bool m_Quote_currencyIsSet;
    double m_Price_scale;
    bool m_Price_scaleIsSet;
    std::shared_ptr<Object> m_Price_filter;
    bool m_Price_filterIsSet;
    std::shared_ptr<Object> m_Lot_size_filter;
    bool m_Lot_size_filterIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_SymbolInfo_H_ */
