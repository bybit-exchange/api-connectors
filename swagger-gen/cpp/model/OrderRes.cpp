/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OrderRes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OrderRes::OrderRes()
{
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_User_id = 0.0;
    m_User_idIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Qty = utility::conversions::to_string_t("");
    m_QtyIsSet = false;
    m_Time_in_force = utility::conversions::to_string_t("");
    m_Time_in_forceIsSet = false;
    m_Order_status = utility::conversions::to_string_t("");
    m_Order_statusIsSet = false;
    m_Last_exec_time = 0.0;
    m_Last_exec_timeIsSet = false;
    m_Last_exec_price = 0.0;
    m_Last_exec_priceIsSet = false;
    m_Leaves_qty = 0.0;
    m_Leaves_qtyIsSet = false;
    m_Cum_exec_qty = 0.0;
    m_Cum_exec_qtyIsSet = false;
    m_Cum_exec_value = 0.0;
    m_Cum_exec_valueIsSet = false;
    m_Cum_exec_fee = 0.0;
    m_Cum_exec_feeIsSet = false;
    m_Reject_reason = utility::conversions::to_string_t("");
    m_Reject_reasonIsSet = false;
    m_Order_link_id = utility::conversions::to_string_t("");
    m_Order_link_idIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
    m_Updated_at = utility::conversions::to_string_t("");
    m_Updated_atIsSet = false;
}

OrderRes::~OrderRes()
{
}

void OrderRes::validate()
{
    // TODO: implement validation
}

web::json::value OrderRes::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t("order_id")] = ModelBase::toJson(m_Order_id);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_QtyIsSet)
    {
        val[utility::conversions::to_string_t("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_Time_in_forceIsSet)
    {
        val[utility::conversions::to_string_t("time_in_force")] = ModelBase::toJson(m_Time_in_force);
    }
    if(m_Order_statusIsSet)
    {
        val[utility::conversions::to_string_t("order_status")] = ModelBase::toJson(m_Order_status);
    }
    if(m_Last_exec_timeIsSet)
    {
        val[utility::conversions::to_string_t("last_exec_time")] = ModelBase::toJson(m_Last_exec_time);
    }
    if(m_Last_exec_priceIsSet)
    {
        val[utility::conversions::to_string_t("last_exec_price")] = ModelBase::toJson(m_Last_exec_price);
    }
    if(m_Leaves_qtyIsSet)
    {
        val[utility::conversions::to_string_t("leaves_qty")] = ModelBase::toJson(m_Leaves_qty);
    }
    if(m_Cum_exec_qtyIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_qty")] = ModelBase::toJson(m_Cum_exec_qty);
    }
    if(m_Cum_exec_valueIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_value")] = ModelBase::toJson(m_Cum_exec_value);
    }
    if(m_Cum_exec_feeIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_fee")] = ModelBase::toJson(m_Cum_exec_fee);
    }
    if(m_Reject_reasonIsSet)
    {
        val[utility::conversions::to_string_t("reject_reason")] = ModelBase::toJson(m_Reject_reason);
    }
    if(m_Order_link_idIsSet)
    {
        val[utility::conversions::to_string_t("order_link_id")] = ModelBase::toJson(m_Order_link_id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t("updated_at")] = ModelBase::toJson(m_Updated_at);
    }

    return val;
}

void OrderRes::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("order_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_id")];
        if(!fieldValue.is_null())
        {
            setOrderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("qty")];
        if(!fieldValue.is_null())
        {
            setQty(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time_in_force")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("time_in_force")];
        if(!fieldValue.is_null())
        {
            setTimeInForce(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_status")];
        if(!fieldValue.is_null())
        {
            setOrderStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_exec_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_exec_time")];
        if(!fieldValue.is_null())
        {
            setLastExecTime(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_exec_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_exec_price")];
        if(!fieldValue.is_null())
        {
            setLastExecPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaves_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leaves_qty")];
        if(!fieldValue.is_null())
        {
            setLeavesQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_qty")];
        if(!fieldValue.is_null())
        {
            setCumExecQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_value")];
        if(!fieldValue.is_null())
        {
            setCumExecValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_fee")];
        if(!fieldValue.is_null())
        {
            setCumExecFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reject_reason")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reject_reason")];
        if(!fieldValue.is_null())
        {
            setRejectReason(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_link_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_link_id")];
        if(!fieldValue.is_null())
        {
            setOrderLinkId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_at")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated_at")];
        if(!fieldValue.is_null())
        {
            setUpdatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void OrderRes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_id"), m_Order_id));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qty"), m_Qty));
        
    }
    if(m_Time_in_forceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time_in_force"), m_Time_in_force));
        
    }
    if(m_Order_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_status"), m_Order_status));
        
    }
    if(m_Last_exec_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_exec_time"), m_Last_exec_time));
    }
    if(m_Last_exec_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_exec_price"), m_Last_exec_price));
    }
    if(m_Leaves_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leaves_qty"), m_Leaves_qty));
    }
    if(m_Cum_exec_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_qty"), m_Cum_exec_qty));
    }
    if(m_Cum_exec_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_value"), m_Cum_exec_value));
    }
    if(m_Cum_exec_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_fee"), m_Cum_exec_fee));
    }
    if(m_Reject_reasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reject_reason"), m_Reject_reason));
        
    }
    if(m_Order_link_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_link_id"), m_Order_link_id));
        
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
        
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated_at"), m_Updated_at));
        
    }
}

void OrderRes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("order_id")))
    {
        setOrderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qty")))
    {
        setQty(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time_in_force")))
    {
        setTimeInForce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("time_in_force"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_status")))
    {
        setOrderStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_exec_time")))
    {
        setLastExecTime(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_exec_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_exec_price")))
    {
        setLastExecPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_exec_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaves_qty")))
    {
        setLeavesQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leaves_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_qty")))
    {
        setCumExecQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_value")))
    {
        setCumExecValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_fee")))
    {
        setCumExecFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reject_reason")))
    {
        setRejectReason(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reject_reason"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_link_id")))
    {
        setOrderLinkId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_link_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated_at"))));
    }
}

utility::string_t OrderRes::getOrderId() const
{
    return m_Order_id;
}


void OrderRes::setOrderId(utility::string_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool OrderRes::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void OrderRes::unsetOrder_id()
{
    m_Order_idIsSet = false;
}

double OrderRes::getUserId() const
{
    return m_User_id;
}


void OrderRes::setUserId(double value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool OrderRes::userIdIsSet() const
{
    return m_User_idIsSet;
}

void OrderRes::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t OrderRes::getSymbol() const
{
    return m_Symbol;
}


void OrderRes::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool OrderRes::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void OrderRes::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t OrderRes::getSide() const
{
    return m_Side;
}


void OrderRes::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool OrderRes::sideIsSet() const
{
    return m_SideIsSet;
}

void OrderRes::unsetSide()
{
    m_SideIsSet = false;
}

utility::string_t OrderRes::getOrderType() const
{
    return m_Order_type;
}


void OrderRes::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool OrderRes::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void OrderRes::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

double OrderRes::getPrice() const
{
    return m_Price;
}


void OrderRes::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool OrderRes::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderRes::unsetPrice()
{
    m_PriceIsSet = false;
}

utility::string_t OrderRes::getQty() const
{
    return m_Qty;
}


void OrderRes::setQty(utility::string_t value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool OrderRes::qtyIsSet() const
{
    return m_QtyIsSet;
}

void OrderRes::unsetQty()
{
    m_QtyIsSet = false;
}

utility::string_t OrderRes::getTimeInForce() const
{
    return m_Time_in_force;
}


void OrderRes::setTimeInForce(utility::string_t value)
{
    m_Time_in_force = value;
    m_Time_in_forceIsSet = true;
}
bool OrderRes::timeInForceIsSet() const
{
    return m_Time_in_forceIsSet;
}

void OrderRes::unsetTime_in_force()
{
    m_Time_in_forceIsSet = false;
}

utility::string_t OrderRes::getOrderStatus() const
{
    return m_Order_status;
}


void OrderRes::setOrderStatus(utility::string_t value)
{
    m_Order_status = value;
    m_Order_statusIsSet = true;
}
bool OrderRes::orderStatusIsSet() const
{
    return m_Order_statusIsSet;
}

void OrderRes::unsetOrder_status()
{
    m_Order_statusIsSet = false;
}

double OrderRes::getLastExecTime() const
{
    return m_Last_exec_time;
}


void OrderRes::setLastExecTime(double value)
{
    m_Last_exec_time = value;
    m_Last_exec_timeIsSet = true;
}
bool OrderRes::lastExecTimeIsSet() const
{
    return m_Last_exec_timeIsSet;
}

void OrderRes::unsetLast_exec_time()
{
    m_Last_exec_timeIsSet = false;
}

double OrderRes::getLastExecPrice() const
{
    return m_Last_exec_price;
}


void OrderRes::setLastExecPrice(double value)
{
    m_Last_exec_price = value;
    m_Last_exec_priceIsSet = true;
}
bool OrderRes::lastExecPriceIsSet() const
{
    return m_Last_exec_priceIsSet;
}

void OrderRes::unsetLast_exec_price()
{
    m_Last_exec_priceIsSet = false;
}

double OrderRes::getLeavesQty() const
{
    return m_Leaves_qty;
}


void OrderRes::setLeavesQty(double value)
{
    m_Leaves_qty = value;
    m_Leaves_qtyIsSet = true;
}
bool OrderRes::leavesQtyIsSet() const
{
    return m_Leaves_qtyIsSet;
}

void OrderRes::unsetLeaves_qty()
{
    m_Leaves_qtyIsSet = false;
}

double OrderRes::getCumExecQty() const
{
    return m_Cum_exec_qty;
}


void OrderRes::setCumExecQty(double value)
{
    m_Cum_exec_qty = value;
    m_Cum_exec_qtyIsSet = true;
}
bool OrderRes::cumExecQtyIsSet() const
{
    return m_Cum_exec_qtyIsSet;
}

void OrderRes::unsetCum_exec_qty()
{
    m_Cum_exec_qtyIsSet = false;
}

double OrderRes::getCumExecValue() const
{
    return m_Cum_exec_value;
}


void OrderRes::setCumExecValue(double value)
{
    m_Cum_exec_value = value;
    m_Cum_exec_valueIsSet = true;
}
bool OrderRes::cumExecValueIsSet() const
{
    return m_Cum_exec_valueIsSet;
}

void OrderRes::unsetCum_exec_value()
{
    m_Cum_exec_valueIsSet = false;
}

double OrderRes::getCumExecFee() const
{
    return m_Cum_exec_fee;
}


void OrderRes::setCumExecFee(double value)
{
    m_Cum_exec_fee = value;
    m_Cum_exec_feeIsSet = true;
}
bool OrderRes::cumExecFeeIsSet() const
{
    return m_Cum_exec_feeIsSet;
}

void OrderRes::unsetCum_exec_fee()
{
    m_Cum_exec_feeIsSet = false;
}

utility::string_t OrderRes::getRejectReason() const
{
    return m_Reject_reason;
}


void OrderRes::setRejectReason(utility::string_t value)
{
    m_Reject_reason = value;
    m_Reject_reasonIsSet = true;
}
bool OrderRes::rejectReasonIsSet() const
{
    return m_Reject_reasonIsSet;
}

void OrderRes::unsetReject_reason()
{
    m_Reject_reasonIsSet = false;
}

utility::string_t OrderRes::getOrderLinkId() const
{
    return m_Order_link_id;
}


void OrderRes::setOrderLinkId(utility::string_t value)
{
    m_Order_link_id = value;
    m_Order_link_idIsSet = true;
}
bool OrderRes::orderLinkIdIsSet() const
{
    return m_Order_link_idIsSet;
}

void OrderRes::unsetOrder_link_id()
{
    m_Order_link_idIsSet = false;
}

utility::string_t OrderRes::getCreatedAt() const
{
    return m_Created_at;
}


void OrderRes::setCreatedAt(utility::string_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool OrderRes::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void OrderRes::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

utility::string_t OrderRes::getUpdatedAt() const
{
    return m_Updated_at;
}


void OrderRes::setUpdatedAt(utility::string_t value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool OrderRes::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void OrderRes::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}

}
}
}
}

