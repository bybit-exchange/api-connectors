/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "KlineRes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

KlineRes::KlineRes()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Interval = utility::conversions::to_string_t("");
    m_IntervalIsSet = false;
    m_Open_time = 0.0;
    m_Open_timeIsSet = false;
    m_Open = utility::conversions::to_string_t("");
    m_OpenIsSet = false;
    m_High = utility::conversions::to_string_t("");
    m_HighIsSet = false;
    m_Low = utility::conversions::to_string_t("");
    m_LowIsSet = false;
    m_Close = utility::conversions::to_string_t("");
    m_CloseIsSet = false;
    m_Volume = utility::conversions::to_string_t("");
    m_VolumeIsSet = false;
}

KlineRes::~KlineRes()
{
}

void KlineRes::validate()
{
    // TODO: implement validation
}

web::json::value KlineRes::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }
    if(m_Open_timeIsSet)
    {
        val[utility::conversions::to_string_t("open_time")] = ModelBase::toJson(m_Open_time);
    }
    if(m_OpenIsSet)
    {
        val[utility::conversions::to_string_t("open")] = ModelBase::toJson(m_Open);
    }
    if(m_HighIsSet)
    {
        val[utility::conversions::to_string_t("high")] = ModelBase::toJson(m_High);
    }
    if(m_LowIsSet)
    {
        val[utility::conversions::to_string_t("low")] = ModelBase::toJson(m_Low);
    }
    if(m_CloseIsSet)
    {
        val[utility::conversions::to_string_t("close")] = ModelBase::toJson(m_Close);
    }
    if(m_VolumeIsSet)
    {
        val[utility::conversions::to_string_t("volume")] = ModelBase::toJson(m_Volume);
    }

    return val;
}

void KlineRes::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("interval")];
        if(!fieldValue.is_null())
        {
            setInterval(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("open_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("open_time")];
        if(!fieldValue.is_null())
        {
            setOpenTime(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("open")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("open")];
        if(!fieldValue.is_null())
        {
            setOpen(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("high")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("high")];
        if(!fieldValue.is_null())
        {
            setHigh(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("low")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("low")];
        if(!fieldValue.is_null())
        {
            setLow(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("close")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("close")];
        if(!fieldValue.is_null())
        {
            setClose(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("volume")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("volume")];
        if(!fieldValue.is_null())
        {
            setVolume(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void KlineRes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_IntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("interval"), m_Interval));
        
    }
    if(m_Open_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("open_time"), m_Open_time));
    }
    if(m_OpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("open"), m_Open));
        
    }
    if(m_HighIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("high"), m_High));
        
    }
    if(m_LowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("low"), m_Low));
        
    }
    if(m_CloseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("close"), m_Close));
        
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volume"), m_Volume));
        
    }
}

void KlineRes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        setInterval(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("interval"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("open_time")))
    {
        setOpenTime(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("open_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("open")))
    {
        setOpen(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("open"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("high")))
    {
        setHigh(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("high"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("low")))
    {
        setLow(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("low"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("close")))
    {
        setClose(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("close"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volume")))
    {
        setVolume(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("volume"))));
    }
}

utility::string_t KlineRes::getSymbol() const
{
    return m_Symbol;
}


void KlineRes::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool KlineRes::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void KlineRes::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t KlineRes::getInterval() const
{
    return m_Interval;
}


void KlineRes::setInterval(utility::string_t value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool KlineRes::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void KlineRes::unsetInterval()
{
    m_IntervalIsSet = false;
}

double KlineRes::getOpenTime() const
{
    return m_Open_time;
}


void KlineRes::setOpenTime(double value)
{
    m_Open_time = value;
    m_Open_timeIsSet = true;
}
bool KlineRes::openTimeIsSet() const
{
    return m_Open_timeIsSet;
}

void KlineRes::unsetOpen_time()
{
    m_Open_timeIsSet = false;
}

utility::string_t KlineRes::getOpen() const
{
    return m_Open;
}


void KlineRes::setOpen(utility::string_t value)
{
    m_Open = value;
    m_OpenIsSet = true;
}
bool KlineRes::openIsSet() const
{
    return m_OpenIsSet;
}

void KlineRes::unsetOpen()
{
    m_OpenIsSet = false;
}

utility::string_t KlineRes::getHigh() const
{
    return m_High;
}


void KlineRes::setHigh(utility::string_t value)
{
    m_High = value;
    m_HighIsSet = true;
}
bool KlineRes::highIsSet() const
{
    return m_HighIsSet;
}

void KlineRes::unsetHigh()
{
    m_HighIsSet = false;
}

utility::string_t KlineRes::getLow() const
{
    return m_Low;
}


void KlineRes::setLow(utility::string_t value)
{
    m_Low = value;
    m_LowIsSet = true;
}
bool KlineRes::lowIsSet() const
{
    return m_LowIsSet;
}

void KlineRes::unsetLow()
{
    m_LowIsSet = false;
}

utility::string_t KlineRes::getClose() const
{
    return m_Close;
}


void KlineRes::setClose(utility::string_t value)
{
    m_Close = value;
    m_CloseIsSet = true;
}
bool KlineRes::closeIsSet() const
{
    return m_CloseIsSet;
}

void KlineRes::unsetClose()
{
    m_CloseIsSet = false;
}

utility::string_t KlineRes::getVolume() const
{
    return m_Volume;
}


void KlineRes::setVolume(utility::string_t value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}
bool KlineRes::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void KlineRes::unsetVolume()
{
    m_VolumeIsSet = false;
}

}
}
}
}

