/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SymbolInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SymbolInfo::SymbolInfo()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Base_currency = utility::conversions::to_string_t("");
    m_Base_currencyIsSet = false;
    m_Quote_currency = utility::conversions::to_string_t("");
    m_Quote_currencyIsSet = false;
    m_Price_scale = 0.0;
    m_Price_scaleIsSet = false;
    m_Price_filterIsSet = false;
    m_Lot_size_filterIsSet = false;
}

SymbolInfo::~SymbolInfo()
{
}

void SymbolInfo::validate()
{
    // TODO: implement validation
}

web::json::value SymbolInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Base_currencyIsSet)
    {
        val[utility::conversions::to_string_t("base_currency")] = ModelBase::toJson(m_Base_currency);
    }
    if(m_Quote_currencyIsSet)
    {
        val[utility::conversions::to_string_t("quote_currency")] = ModelBase::toJson(m_Quote_currency);
    }
    if(m_Price_scaleIsSet)
    {
        val[utility::conversions::to_string_t("price_scale")] = ModelBase::toJson(m_Price_scale);
    }
    if(m_Price_filterIsSet)
    {
        val[utility::conversions::to_string_t("price_filter")] = ModelBase::toJson(m_Price_filter);
    }
    if(m_Lot_size_filterIsSet)
    {
        val[utility::conversions::to_string_t("lot_size_filter")] = ModelBase::toJson(m_Lot_size_filter);
    }

    return val;
}

void SymbolInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("base_currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("base_currency")];
        if(!fieldValue.is_null())
        {
            setBaseCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quote_currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quote_currency")];
        if(!fieldValue.is_null())
        {
            setQuoteCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price_scale")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price_scale")];
        if(!fieldValue.is_null())
        {
            setPriceScale(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price_filter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price_filter")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setPriceFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lot_size_filter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lot_size_filter")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setLotSizeFilter( newItem );
        }
    }
}

void SymbolInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_Base_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("base_currency"), m_Base_currency));
        
    }
    if(m_Quote_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quote_currency"), m_Quote_currency));
        
    }
    if(m_Price_scaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price_scale"), m_Price_scale));
    }
    if(m_Price_filterIsSet)
    {
        if (m_Price_filter.get())
        {
            m_Price_filter->toMultipart(multipart, utility::conversions::to_string_t("price_filter."));
        }
        
    }
    if(m_Lot_size_filterIsSet)
    {
        if (m_Lot_size_filter.get())
        {
            m_Lot_size_filter->toMultipart(multipart, utility::conversions::to_string_t("lot_size_filter."));
        }
        
    }
}

void SymbolInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("base_currency")))
    {
        setBaseCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("base_currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quote_currency")))
    {
        setQuoteCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quote_currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price_scale")))
    {
        setPriceScale(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price_scale"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price_filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("price_filter")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("price_filter."));
            setPriceFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lot_size_filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("lot_size_filter")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("lot_size_filter."));
            setLotSizeFilter( newItem );
        }
    }
}

utility::string_t SymbolInfo::getName() const
{
    return m_Name;
}


void SymbolInfo::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SymbolInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void SymbolInfo::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t SymbolInfo::getBaseCurrency() const
{
    return m_Base_currency;
}


void SymbolInfo::setBaseCurrency(utility::string_t value)
{
    m_Base_currency = value;
    m_Base_currencyIsSet = true;
}
bool SymbolInfo::baseCurrencyIsSet() const
{
    return m_Base_currencyIsSet;
}

void SymbolInfo::unsetBase_currency()
{
    m_Base_currencyIsSet = false;
}

utility::string_t SymbolInfo::getQuoteCurrency() const
{
    return m_Quote_currency;
}


void SymbolInfo::setQuoteCurrency(utility::string_t value)
{
    m_Quote_currency = value;
    m_Quote_currencyIsSet = true;
}
bool SymbolInfo::quoteCurrencyIsSet() const
{
    return m_Quote_currencyIsSet;
}

void SymbolInfo::unsetQuote_currency()
{
    m_Quote_currencyIsSet = false;
}

double SymbolInfo::getPriceScale() const
{
    return m_Price_scale;
}


void SymbolInfo::setPriceScale(double value)
{
    m_Price_scale = value;
    m_Price_scaleIsSet = true;
}
bool SymbolInfo::priceScaleIsSet() const
{
    return m_Price_scaleIsSet;
}

void SymbolInfo::unsetPrice_scale()
{
    m_Price_scaleIsSet = false;
}

std::shared_ptr<Object> SymbolInfo::getPriceFilter() const
{
    return m_Price_filter;
}


void SymbolInfo::setPriceFilter(std::shared_ptr<Object> value)
{
    m_Price_filter = value;
    m_Price_filterIsSet = true;
}
bool SymbolInfo::priceFilterIsSet() const
{
    return m_Price_filterIsSet;
}

void SymbolInfo::unsetPrice_filter()
{
    m_Price_filterIsSet = false;
}

std::shared_ptr<Object> SymbolInfo::getLotSizeFilter() const
{
    return m_Lot_size_filter;
}


void SymbolInfo::setLotSizeFilter(std::shared_ptr<Object> value)
{
    m_Lot_size_filter = value;
    m_Lot_size_filterIsSet = true;
}
bool SymbolInfo::lotSizeFilterIsSet() const
{
    return m_Lot_size_filterIsSet;
}

void SymbolInfo::unsetLot_size_filter()
{
    m_Lot_size_filterIsSet = false;
}

}
}
}
}

