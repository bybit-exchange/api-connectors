/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WalletBalance.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

WalletBalance::WalletBalance()
{
    m_Equity = 0.0;
    m_EquityIsSet = false;
    m_Available_balance = 0.0;
    m_Available_balanceIsSet = false;
    m_Used_margin = 0.0;
    m_Used_marginIsSet = false;
    m_Order_margin = 0.0;
    m_Order_marginIsSet = false;
    m_Position_margin = 0.0;
    m_Position_marginIsSet = false;
    m_Occ_closing_fee = 0.0;
    m_Occ_closing_feeIsSet = false;
    m_Occ_funding_fee = 0.0;
    m_Occ_funding_feeIsSet = false;
    m_Wallet_balance = 0.0;
    m_Wallet_balanceIsSet = false;
    m_Realised_pnl = 0.0;
    m_Realised_pnlIsSet = false;
    m_Unrealised_pnl = 0.0;
    m_Unrealised_pnlIsSet = false;
    m_Cum_realised_pnl = 0.0;
    m_Cum_realised_pnlIsSet = false;
    m_Given_cash = 0.0;
    m_Given_cashIsSet = false;
    m_Service_cash = 0.0;
    m_Service_cashIsSet = false;
}

WalletBalance::~WalletBalance()
{
}

void WalletBalance::validate()
{
    // TODO: implement validation
}

web::json::value WalletBalance::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EquityIsSet)
    {
        val[utility::conversions::to_string_t("equity")] = ModelBase::toJson(m_Equity);
    }
    if(m_Available_balanceIsSet)
    {
        val[utility::conversions::to_string_t("available_balance")] = ModelBase::toJson(m_Available_balance);
    }
    if(m_Used_marginIsSet)
    {
        val[utility::conversions::to_string_t("used_margin")] = ModelBase::toJson(m_Used_margin);
    }
    if(m_Order_marginIsSet)
    {
        val[utility::conversions::to_string_t("order_margin")] = ModelBase::toJson(m_Order_margin);
    }
    if(m_Position_marginIsSet)
    {
        val[utility::conversions::to_string_t("position_margin")] = ModelBase::toJson(m_Position_margin);
    }
    if(m_Occ_closing_feeIsSet)
    {
        val[utility::conversions::to_string_t("occ_closing_fee")] = ModelBase::toJson(m_Occ_closing_fee);
    }
    if(m_Occ_funding_feeIsSet)
    {
        val[utility::conversions::to_string_t("occ_funding_fee")] = ModelBase::toJson(m_Occ_funding_fee);
    }
    if(m_Wallet_balanceIsSet)
    {
        val[utility::conversions::to_string_t("wallet_balance")] = ModelBase::toJson(m_Wallet_balance);
    }
    if(m_Realised_pnlIsSet)
    {
        val[utility::conversions::to_string_t("realised_pnl")] = ModelBase::toJson(m_Realised_pnl);
    }
    if(m_Unrealised_pnlIsSet)
    {
        val[utility::conversions::to_string_t("unrealised_pnl")] = ModelBase::toJson(m_Unrealised_pnl);
    }
    if(m_Cum_realised_pnlIsSet)
    {
        val[utility::conversions::to_string_t("cum_realised_pnl")] = ModelBase::toJson(m_Cum_realised_pnl);
    }
    if(m_Given_cashIsSet)
    {
        val[utility::conversions::to_string_t("given_cash")] = ModelBase::toJson(m_Given_cash);
    }
    if(m_Service_cashIsSet)
    {
        val[utility::conversions::to_string_t("service_cash")] = ModelBase::toJson(m_Service_cash);
    }

    return val;
}

void WalletBalance::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("equity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("equity")];
        if(!fieldValue.is_null())
        {
            setEquity(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("available_balance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("available_balance")];
        if(!fieldValue.is_null())
        {
            setAvailableBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("used_margin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("used_margin")];
        if(!fieldValue.is_null())
        {
            setUsedMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_margin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_margin")];
        if(!fieldValue.is_null())
        {
            setOrderMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("position_margin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("position_margin")];
        if(!fieldValue.is_null())
        {
            setPositionMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occ_closing_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("occ_closing_fee")];
        if(!fieldValue.is_null())
        {
            setOccClosingFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occ_funding_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("occ_funding_fee")];
        if(!fieldValue.is_null())
        {
            setOccFundingFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_balance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wallet_balance")];
        if(!fieldValue.is_null())
        {
            setWalletBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realised_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("realised_pnl")];
        if(!fieldValue.is_null())
        {
            setRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealised_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealised_pnl")];
        if(!fieldValue.is_null())
        {
            setUnrealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_realised_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_realised_pnl")];
        if(!fieldValue.is_null())
        {
            setCumRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("given_cash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("given_cash")];
        if(!fieldValue.is_null())
        {
            setGivenCash(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service_cash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("service_cash")];
        if(!fieldValue.is_null())
        {
            setServiceCash(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void WalletBalance::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EquityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("equity"), m_Equity));
    }
    if(m_Available_balanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("available_balance"), m_Available_balance));
    }
    if(m_Used_marginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("used_margin"), m_Used_margin));
    }
    if(m_Order_marginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_margin"), m_Order_margin));
    }
    if(m_Position_marginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("position_margin"), m_Position_margin));
    }
    if(m_Occ_closing_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occ_closing_fee"), m_Occ_closing_fee));
    }
    if(m_Occ_funding_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occ_funding_fee"), m_Occ_funding_fee));
    }
    if(m_Wallet_balanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_balance"), m_Wallet_balance));
    }
    if(m_Realised_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realised_pnl"), m_Realised_pnl));
    }
    if(m_Unrealised_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealised_pnl"), m_Unrealised_pnl));
    }
    if(m_Cum_realised_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_realised_pnl"), m_Cum_realised_pnl));
    }
    if(m_Given_cashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("given_cash"), m_Given_cash));
    }
    if(m_Service_cashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("service_cash"), m_Service_cash));
    }
}

void WalletBalance::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("equity")))
    {
        setEquity(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("equity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("available_balance")))
    {
        setAvailableBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("available_balance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("used_margin")))
    {
        setUsedMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("used_margin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_margin")))
    {
        setOrderMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_margin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("position_margin")))
    {
        setPositionMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("position_margin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occ_closing_fee")))
    {
        setOccClosingFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("occ_closing_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occ_funding_fee")))
    {
        setOccFundingFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("occ_funding_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_balance")))
    {
        setWalletBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_balance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realised_pnl")))
    {
        setRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realised_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealised_pnl")))
    {
        setUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealised_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_realised_pnl")))
    {
        setCumRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_realised_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("given_cash")))
    {
        setGivenCash(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("given_cash"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service_cash")))
    {
        setServiceCash(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("service_cash"))));
    }
}

double WalletBalance::getEquity() const
{
    return m_Equity;
}


void WalletBalance::setEquity(double value)
{
    m_Equity = value;
    m_EquityIsSet = true;
}
bool WalletBalance::equityIsSet() const
{
    return m_EquityIsSet;
}

void WalletBalance::unsetEquity()
{
    m_EquityIsSet = false;
}

double WalletBalance::getAvailableBalance() const
{
    return m_Available_balance;
}


void WalletBalance::setAvailableBalance(double value)
{
    m_Available_balance = value;
    m_Available_balanceIsSet = true;
}
bool WalletBalance::availableBalanceIsSet() const
{
    return m_Available_balanceIsSet;
}

void WalletBalance::unsetAvailable_balance()
{
    m_Available_balanceIsSet = false;
}

double WalletBalance::getUsedMargin() const
{
    return m_Used_margin;
}


void WalletBalance::setUsedMargin(double value)
{
    m_Used_margin = value;
    m_Used_marginIsSet = true;
}
bool WalletBalance::usedMarginIsSet() const
{
    return m_Used_marginIsSet;
}

void WalletBalance::unsetUsed_margin()
{
    m_Used_marginIsSet = false;
}

double WalletBalance::getOrderMargin() const
{
    return m_Order_margin;
}


void WalletBalance::setOrderMargin(double value)
{
    m_Order_margin = value;
    m_Order_marginIsSet = true;
}
bool WalletBalance::orderMarginIsSet() const
{
    return m_Order_marginIsSet;
}

void WalletBalance::unsetOrder_margin()
{
    m_Order_marginIsSet = false;
}

double WalletBalance::getPositionMargin() const
{
    return m_Position_margin;
}


void WalletBalance::setPositionMargin(double value)
{
    m_Position_margin = value;
    m_Position_marginIsSet = true;
}
bool WalletBalance::positionMarginIsSet() const
{
    return m_Position_marginIsSet;
}

void WalletBalance::unsetPosition_margin()
{
    m_Position_marginIsSet = false;
}

double WalletBalance::getOccClosingFee() const
{
    return m_Occ_closing_fee;
}


void WalletBalance::setOccClosingFee(double value)
{
    m_Occ_closing_fee = value;
    m_Occ_closing_feeIsSet = true;
}
bool WalletBalance::occClosingFeeIsSet() const
{
    return m_Occ_closing_feeIsSet;
}

void WalletBalance::unsetOcc_closing_fee()
{
    m_Occ_closing_feeIsSet = false;
}

double WalletBalance::getOccFundingFee() const
{
    return m_Occ_funding_fee;
}


void WalletBalance::setOccFundingFee(double value)
{
    m_Occ_funding_fee = value;
    m_Occ_funding_feeIsSet = true;
}
bool WalletBalance::occFundingFeeIsSet() const
{
    return m_Occ_funding_feeIsSet;
}

void WalletBalance::unsetOcc_funding_fee()
{
    m_Occ_funding_feeIsSet = false;
}

double WalletBalance::getWalletBalance() const
{
    return m_Wallet_balance;
}


void WalletBalance::setWalletBalance(double value)
{
    m_Wallet_balance = value;
    m_Wallet_balanceIsSet = true;
}
bool WalletBalance::walletBalanceIsSet() const
{
    return m_Wallet_balanceIsSet;
}

void WalletBalance::unsetWallet_balance()
{
    m_Wallet_balanceIsSet = false;
}

double WalletBalance::getRealisedPnl() const
{
    return m_Realised_pnl;
}


void WalletBalance::setRealisedPnl(double value)
{
    m_Realised_pnl = value;
    m_Realised_pnlIsSet = true;
}
bool WalletBalance::realisedPnlIsSet() const
{
    return m_Realised_pnlIsSet;
}

void WalletBalance::unsetRealised_pnl()
{
    m_Realised_pnlIsSet = false;
}

double WalletBalance::getUnrealisedPnl() const
{
    return m_Unrealised_pnl;
}


void WalletBalance::setUnrealisedPnl(double value)
{
    m_Unrealised_pnl = value;
    m_Unrealised_pnlIsSet = true;
}
bool WalletBalance::unrealisedPnlIsSet() const
{
    return m_Unrealised_pnlIsSet;
}

void WalletBalance::unsetUnrealised_pnl()
{
    m_Unrealised_pnlIsSet = false;
}

double WalletBalance::getCumRealisedPnl() const
{
    return m_Cum_realised_pnl;
}


void WalletBalance::setCumRealisedPnl(double value)
{
    m_Cum_realised_pnl = value;
    m_Cum_realised_pnlIsSet = true;
}
bool WalletBalance::cumRealisedPnlIsSet() const
{
    return m_Cum_realised_pnlIsSet;
}

void WalletBalance::unsetCum_realised_pnl()
{
    m_Cum_realised_pnlIsSet = false;
}

double WalletBalance::getGivenCash() const
{
    return m_Given_cash;
}


void WalletBalance::setGivenCash(double value)
{
    m_Given_cash = value;
    m_Given_cashIsSet = true;
}
bool WalletBalance::givenCashIsSet() const
{
    return m_Given_cashIsSet;
}

void WalletBalance::unsetGiven_cash()
{
    m_Given_cashIsSet = false;
}

double WalletBalance::getServiceCash() const
{
    return m_Service_cash;
}


void WalletBalance::setServiceCash(double value)
{
    m_Service_cash = value;
    m_Service_cashIsSet = true;
}
bool WalletBalance::serviceCashIsSet() const
{
    return m_Service_cashIsSet;
}

void WalletBalance::unsetService_cash()
{
    m_Service_cashIsSet = false;
}

}
}
}
}

