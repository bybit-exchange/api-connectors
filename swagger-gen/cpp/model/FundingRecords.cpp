/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FundingRecords.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

FundingRecords::FundingRecords()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_User_id = 0.0;
    m_User_idIsSet = false;
    m_Coin = utility::conversions::to_string_t("");
    m_CoinIsSet = false;
    m_Wallet_id = 0.0;
    m_Wallet_idIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_Tx_id = utility::conversions::to_string_t("");
    m_Tx_idIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Wallet_balance = utility::conversions::to_string_t("");
    m_Wallet_balanceIsSet = false;
    m_Exec_time = utility::conversions::to_string_t("");
    m_Exec_timeIsSet = false;
    m_Cross_seq = 0.0;
    m_Cross_seqIsSet = false;
}

FundingRecords::~FundingRecords()
{
}

void FundingRecords::validate()
{
    // TODO: implement validation
}

web::json::value FundingRecords::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_CoinIsSet)
    {
        val[utility::conversions::to_string_t("coin")] = ModelBase::toJson(m_Coin);
    }
    if(m_Wallet_idIsSet)
    {
        val[utility::conversions::to_string_t("wallet_id")] = ModelBase::toJson(m_Wallet_id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_Tx_idIsSet)
    {
        val[utility::conversions::to_string_t("tx_id")] = ModelBase::toJson(m_Tx_id);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    }
    if(m_Wallet_balanceIsSet)
    {
        val[utility::conversions::to_string_t("wallet_balance")] = ModelBase::toJson(m_Wallet_balance);
    }
    if(m_Exec_timeIsSet)
    {
        val[utility::conversions::to_string_t("exec_time")] = ModelBase::toJson(m_Exec_time);
    }
    if(m_Cross_seqIsSet)
    {
        val[utility::conversions::to_string_t("cross_seq")] = ModelBase::toJson(m_Cross_seq);
    }

    return val;
}

void FundingRecords::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("coin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("coin")];
        if(!fieldValue.is_null())
        {
            setCoin(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wallet_id")];
        if(!fieldValue.is_null())
        {
            setWalletId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("amount")];
        if(!fieldValue.is_null())
        {
            setAmount(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tx_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tx_id")];
        if(!fieldValue.is_null())
        {
            setTxId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("address")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("address")];
        if(!fieldValue.is_null())
        {
            setAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_balance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wallet_balance")];
        if(!fieldValue.is_null())
        {
            setWalletBalance(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_time")];
        if(!fieldValue.is_null())
        {
            setExecTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cross_seq")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cross_seq")];
        if(!fieldValue.is_null())
        {
            setCrossSeq(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void FundingRecords::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_CoinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coin"), m_Coin));
        
    }
    if(m_Wallet_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_id"), m_Wallet_id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
        
    }
    if(m_Tx_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tx_id"), m_Tx_id));
        
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
        
    }
    if(m_Wallet_balanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_balance"), m_Wallet_balance));
        
    }
    if(m_Exec_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_time"), m_Exec_time));
        
    }
    if(m_Cross_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cross_seq"), m_Cross_seq));
    }
}

void FundingRecords::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("coin")))
    {
        setCoin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("coin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_id")))
    {
        setWalletId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        setAmount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tx_id")))
    {
        setTxId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tx_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("address")))
    {
        setAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("address"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_balance")))
    {
        setWalletBalance(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_balance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_time")))
    {
        setExecTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cross_seq")))
    {
        setCrossSeq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cross_seq"))));
    }
}

double FundingRecords::getId() const
{
    return m_Id;
}


void FundingRecords::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FundingRecords::idIsSet() const
{
    return m_IdIsSet;
}

void FundingRecords::unsetId()
{
    m_IdIsSet = false;
}

double FundingRecords::getUserId() const
{
    return m_User_id;
}


void FundingRecords::setUserId(double value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool FundingRecords::userIdIsSet() const
{
    return m_User_idIsSet;
}

void FundingRecords::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t FundingRecords::getCoin() const
{
    return m_Coin;
}


void FundingRecords::setCoin(utility::string_t value)
{
    m_Coin = value;
    m_CoinIsSet = true;
}
bool FundingRecords::coinIsSet() const
{
    return m_CoinIsSet;
}

void FundingRecords::unsetCoin()
{
    m_CoinIsSet = false;
}

double FundingRecords::getWalletId() const
{
    return m_Wallet_id;
}


void FundingRecords::setWalletId(double value)
{
    m_Wallet_id = value;
    m_Wallet_idIsSet = true;
}
bool FundingRecords::walletIdIsSet() const
{
    return m_Wallet_idIsSet;
}

void FundingRecords::unsetWallet_id()
{
    m_Wallet_idIsSet = false;
}

utility::string_t FundingRecords::getType() const
{
    return m_Type;
}


void FundingRecords::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool FundingRecords::typeIsSet() const
{
    return m_TypeIsSet;
}

void FundingRecords::unsetType()
{
    m_TypeIsSet = false;
}

utility::string_t FundingRecords::getAmount() const
{
    return m_Amount;
}


void FundingRecords::setAmount(utility::string_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool FundingRecords::amountIsSet() const
{
    return m_AmountIsSet;
}

void FundingRecords::unsetAmount()
{
    m_AmountIsSet = false;
}

utility::string_t FundingRecords::getTxId() const
{
    return m_Tx_id;
}


void FundingRecords::setTxId(utility::string_t value)
{
    m_Tx_id = value;
    m_Tx_idIsSet = true;
}
bool FundingRecords::txIdIsSet() const
{
    return m_Tx_idIsSet;
}

void FundingRecords::unsetTx_id()
{
    m_Tx_idIsSet = false;
}

utility::string_t FundingRecords::getAddress() const
{
    return m_Address;
}


void FundingRecords::setAddress(utility::string_t value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool FundingRecords::addressIsSet() const
{
    return m_AddressIsSet;
}

void FundingRecords::unsetAddress()
{
    m_AddressIsSet = false;
}

utility::string_t FundingRecords::getWalletBalance() const
{
    return m_Wallet_balance;
}


void FundingRecords::setWalletBalance(utility::string_t value)
{
    m_Wallet_balance = value;
    m_Wallet_balanceIsSet = true;
}
bool FundingRecords::walletBalanceIsSet() const
{
    return m_Wallet_balanceIsSet;
}

void FundingRecords::unsetWallet_balance()
{
    m_Wallet_balanceIsSet = false;
}

utility::string_t FundingRecords::getExecTime() const
{
    return m_Exec_time;
}


void FundingRecords::setExecTime(utility::string_t value)
{
    m_Exec_time = value;
    m_Exec_timeIsSet = true;
}
bool FundingRecords::execTimeIsSet() const
{
    return m_Exec_timeIsSet;
}

void FundingRecords::unsetExec_time()
{
    m_Exec_timeIsSet = false;
}

double FundingRecords::getCrossSeq() const
{
    return m_Cross_seq;
}


void FundingRecords::setCrossSeq(double value)
{
    m_Cross_seq = value;
    m_Cross_seqIsSet = true;
}
bool FundingRecords::crossSeqIsSet() const
{
    return m_Cross_seqIsSet;
}

void FundingRecords::unsetCross_seq()
{
    m_Cross_seqIsSet = false;
}

}
}
}
}

