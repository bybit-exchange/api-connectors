/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SymbolTickInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SymbolTickInfo::SymbolTickInfo()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Bid_price = utility::conversions::to_string_t("");
    m_Bid_priceIsSet = false;
    m_Ask_price = utility::conversions::to_string_t("");
    m_Ask_priceIsSet = false;
    m_Last_price = utility::conversions::to_string_t("");
    m_Last_priceIsSet = false;
    m_Last_tick_direction = utility::conversions::to_string_t("");
    m_Last_tick_directionIsSet = false;
    m_Prev_price_24h = utility::conversions::to_string_t("");
    m_Prev_price_24hIsSet = false;
    m_Price_24h_pcnt = utility::conversions::to_string_t("");
    m_Price_24h_pcntIsSet = false;
    m_High_price_24h = utility::conversions::to_string_t("");
    m_High_price_24hIsSet = false;
    m_Low_price_24h = utility::conversions::to_string_t("");
    m_Low_price_24hIsSet = false;
    m_Prev_price_1h = utility::conversions::to_string_t("");
    m_Prev_price_1hIsSet = false;
    m_Price_1h_pcnt = utility::conversions::to_string_t("");
    m_Price_1h_pcntIsSet = false;
    m_Mark_price = utility::conversions::to_string_t("");
    m_Mark_priceIsSet = false;
    m_Index_price = utility::conversions::to_string_t("");
    m_Index_priceIsSet = false;
    m_Open_interest = 0.0;
    m_Open_interestIsSet = false;
    m_Open_value = utility::conversions::to_string_t("");
    m_Open_valueIsSet = false;
    m_Total_turnover = utility::conversions::to_string_t("");
    m_Total_turnoverIsSet = false;
    m_Turnover_24h = utility::conversions::to_string_t("");
    m_Turnover_24hIsSet = false;
    m_Total_volume = 0.0;
    m_Total_volumeIsSet = false;
    m_Volume_24h = 0.0;
    m_Volume_24hIsSet = false;
    m_Funding_rate = utility::conversions::to_string_t("");
    m_Funding_rateIsSet = false;
    m_Predicted_funding_rate = utility::conversions::to_string_t("");
    m_Predicted_funding_rateIsSet = false;
    m_Next_funding_time = utility::conversions::to_string_t("");
    m_Next_funding_timeIsSet = false;
    m_Countdown_hour = 0.0;
    m_Countdown_hourIsSet = false;
}

SymbolTickInfo::~SymbolTickInfo()
{
}

void SymbolTickInfo::validate()
{
    // TODO: implement validation
}

web::json::value SymbolTickInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_Bid_priceIsSet)
    {
        val[utility::conversions::to_string_t("bid_price")] = ModelBase::toJson(m_Bid_price);
    }
    if(m_Ask_priceIsSet)
    {
        val[utility::conversions::to_string_t("ask_price")] = ModelBase::toJson(m_Ask_price);
    }
    if(m_Last_priceIsSet)
    {
        val[utility::conversions::to_string_t("last_price")] = ModelBase::toJson(m_Last_price);
    }
    if(m_Last_tick_directionIsSet)
    {
        val[utility::conversions::to_string_t("last_tick_direction")] = ModelBase::toJson(m_Last_tick_direction);
    }
    if(m_Prev_price_24hIsSet)
    {
        val[utility::conversions::to_string_t("prev_price_24h")] = ModelBase::toJson(m_Prev_price_24h);
    }
    if(m_Price_24h_pcntIsSet)
    {
        val[utility::conversions::to_string_t("price_24h_pcnt")] = ModelBase::toJson(m_Price_24h_pcnt);
    }
    if(m_High_price_24hIsSet)
    {
        val[utility::conversions::to_string_t("high_price_24h")] = ModelBase::toJson(m_High_price_24h);
    }
    if(m_Low_price_24hIsSet)
    {
        val[utility::conversions::to_string_t("low_price_24h")] = ModelBase::toJson(m_Low_price_24h);
    }
    if(m_Prev_price_1hIsSet)
    {
        val[utility::conversions::to_string_t("prev_price_1h")] = ModelBase::toJson(m_Prev_price_1h);
    }
    if(m_Price_1h_pcntIsSet)
    {
        val[utility::conversions::to_string_t("price_1h_pcnt")] = ModelBase::toJson(m_Price_1h_pcnt);
    }
    if(m_Mark_priceIsSet)
    {
        val[utility::conversions::to_string_t("mark_price")] = ModelBase::toJson(m_Mark_price);
    }
    if(m_Index_priceIsSet)
    {
        val[utility::conversions::to_string_t("index_price")] = ModelBase::toJson(m_Index_price);
    }
    if(m_Open_interestIsSet)
    {
        val[utility::conversions::to_string_t("open_interest")] = ModelBase::toJson(m_Open_interest);
    }
    if(m_Open_valueIsSet)
    {
        val[utility::conversions::to_string_t("open_value")] = ModelBase::toJson(m_Open_value);
    }
    if(m_Total_turnoverIsSet)
    {
        val[utility::conversions::to_string_t("total_turnover")] = ModelBase::toJson(m_Total_turnover);
    }
    if(m_Turnover_24hIsSet)
    {
        val[utility::conversions::to_string_t("turnover_24h")] = ModelBase::toJson(m_Turnover_24h);
    }
    if(m_Total_volumeIsSet)
    {
        val[utility::conversions::to_string_t("total_volume")] = ModelBase::toJson(m_Total_volume);
    }
    if(m_Volume_24hIsSet)
    {
        val[utility::conversions::to_string_t("volume_24h")] = ModelBase::toJson(m_Volume_24h);
    }
    if(m_Funding_rateIsSet)
    {
        val[utility::conversions::to_string_t("funding_rate")] = ModelBase::toJson(m_Funding_rate);
    }
    if(m_Predicted_funding_rateIsSet)
    {
        val[utility::conversions::to_string_t("predicted_funding_rate")] = ModelBase::toJson(m_Predicted_funding_rate);
    }
    if(m_Next_funding_timeIsSet)
    {
        val[utility::conversions::to_string_t("next_funding_time")] = ModelBase::toJson(m_Next_funding_time);
    }
    if(m_Countdown_hourIsSet)
    {
        val[utility::conversions::to_string_t("countdown_hour")] = ModelBase::toJson(m_Countdown_hour);
    }

    return val;
}

void SymbolTickInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bid_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bid_price")];
        if(!fieldValue.is_null())
        {
            setBidPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ask_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ask_price")];
        if(!fieldValue.is_null())
        {
            setAskPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_price")];
        if(!fieldValue.is_null())
        {
            setLastPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_tick_direction")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_tick_direction")];
        if(!fieldValue.is_null())
        {
            setLastTickDirection(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prev_price_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prev_price_24h")];
        if(!fieldValue.is_null())
        {
            setPrevPrice24h(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price_24h_pcnt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price_24h_pcnt")];
        if(!fieldValue.is_null())
        {
            setPrice24hPcnt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("high_price_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("high_price_24h")];
        if(!fieldValue.is_null())
        {
            setHighPrice24h(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("low_price_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("low_price_24h")];
        if(!fieldValue.is_null())
        {
            setLowPrice24h(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prev_price_1h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prev_price_1h")];
        if(!fieldValue.is_null())
        {
            setPrevPrice1h(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price_1h_pcnt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price_1h_pcnt")];
        if(!fieldValue.is_null())
        {
            setPrice1hPcnt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mark_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mark_price")];
        if(!fieldValue.is_null())
        {
            setMarkPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("index_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("index_price")];
        if(!fieldValue.is_null())
        {
            setIndexPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("open_interest")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("open_interest")];
        if(!fieldValue.is_null())
        {
            setOpenInterest(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("open_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("open_value")];
        if(!fieldValue.is_null())
        {
            setOpenValue(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_turnover")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("total_turnover")];
        if(!fieldValue.is_null())
        {
            setTotalTurnover(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("turnover_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("turnover_24h")];
        if(!fieldValue.is_null())
        {
            setTurnover24h(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_volume")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("total_volume")];
        if(!fieldValue.is_null())
        {
            setTotalVolume(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("volume_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("volume_24h")];
        if(!fieldValue.is_null())
        {
            setVolume24h(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("funding_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("funding_rate")];
        if(!fieldValue.is_null())
        {
            setFundingRate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predicted_funding_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("predicted_funding_rate")];
        if(!fieldValue.is_null())
        {
            setPredictedFundingRate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("next_funding_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("next_funding_time")];
        if(!fieldValue.is_null())
        {
            setNextFundingTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("countdown_hour")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("countdown_hour")];
        if(!fieldValue.is_null())
        {
            setCountdownHour(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void SymbolTickInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_Bid_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bid_price"), m_Bid_price));
        
    }
    if(m_Ask_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ask_price"), m_Ask_price));
        
    }
    if(m_Last_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_price"), m_Last_price));
        
    }
    if(m_Last_tick_directionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_tick_direction"), m_Last_tick_direction));
        
    }
    if(m_Prev_price_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prev_price_24h"), m_Prev_price_24h));
        
    }
    if(m_Price_24h_pcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price_24h_pcnt"), m_Price_24h_pcnt));
        
    }
    if(m_High_price_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("high_price_24h"), m_High_price_24h));
        
    }
    if(m_Low_price_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("low_price_24h"), m_Low_price_24h));
        
    }
    if(m_Prev_price_1hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prev_price_1h"), m_Prev_price_1h));
        
    }
    if(m_Price_1h_pcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price_1h_pcnt"), m_Price_1h_pcnt));
        
    }
    if(m_Mark_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mark_price"), m_Mark_price));
        
    }
    if(m_Index_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("index_price"), m_Index_price));
        
    }
    if(m_Open_interestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("open_interest"), m_Open_interest));
    }
    if(m_Open_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("open_value"), m_Open_value));
        
    }
    if(m_Total_turnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_turnover"), m_Total_turnover));
        
    }
    if(m_Turnover_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("turnover_24h"), m_Turnover_24h));
        
    }
    if(m_Total_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_volume"), m_Total_volume));
    }
    if(m_Volume_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volume_24h"), m_Volume_24h));
    }
    if(m_Funding_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("funding_rate"), m_Funding_rate));
        
    }
    if(m_Predicted_funding_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predicted_funding_rate"), m_Predicted_funding_rate));
        
    }
    if(m_Next_funding_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("next_funding_time"), m_Next_funding_time));
        
    }
    if(m_Countdown_hourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("countdown_hour"), m_Countdown_hour));
    }
}

void SymbolTickInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bid_price")))
    {
        setBidPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bid_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ask_price")))
    {
        setAskPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ask_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_price")))
    {
        setLastPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_tick_direction")))
    {
        setLastTickDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_tick_direction"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prev_price_24h")))
    {
        setPrevPrice24h(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prev_price_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price_24h_pcnt")))
    {
        setPrice24hPcnt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price_24h_pcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("high_price_24h")))
    {
        setHighPrice24h(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("high_price_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("low_price_24h")))
    {
        setLowPrice24h(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("low_price_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prev_price_1h")))
    {
        setPrevPrice1h(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prev_price_1h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price_1h_pcnt")))
    {
        setPrice1hPcnt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price_1h_pcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mark_price")))
    {
        setMarkPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mark_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("index_price")))
    {
        setIndexPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("index_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("open_interest")))
    {
        setOpenInterest(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("open_interest"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("open_value")))
    {
        setOpenValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("open_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_turnover")))
    {
        setTotalTurnover(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_turnover"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("turnover_24h")))
    {
        setTurnover24h(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("turnover_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_volume")))
    {
        setTotalVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_volume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volume_24h")))
    {
        setVolume24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("volume_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("funding_rate")))
    {
        setFundingRate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("funding_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predicted_funding_rate")))
    {
        setPredictedFundingRate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("predicted_funding_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("next_funding_time")))
    {
        setNextFundingTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("next_funding_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("countdown_hour")))
    {
        setCountdownHour(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("countdown_hour"))));
    }
}

utility::string_t SymbolTickInfo::getSymbol() const
{
    return m_Symbol;
}


void SymbolTickInfo::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool SymbolTickInfo::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void SymbolTickInfo::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t SymbolTickInfo::getBidPrice() const
{
    return m_Bid_price;
}


void SymbolTickInfo::setBidPrice(utility::string_t value)
{
    m_Bid_price = value;
    m_Bid_priceIsSet = true;
}
bool SymbolTickInfo::bidPriceIsSet() const
{
    return m_Bid_priceIsSet;
}

void SymbolTickInfo::unsetBid_price()
{
    m_Bid_priceIsSet = false;
}

utility::string_t SymbolTickInfo::getAskPrice() const
{
    return m_Ask_price;
}


void SymbolTickInfo::setAskPrice(utility::string_t value)
{
    m_Ask_price = value;
    m_Ask_priceIsSet = true;
}
bool SymbolTickInfo::askPriceIsSet() const
{
    return m_Ask_priceIsSet;
}

void SymbolTickInfo::unsetAsk_price()
{
    m_Ask_priceIsSet = false;
}

utility::string_t SymbolTickInfo::getLastPrice() const
{
    return m_Last_price;
}


void SymbolTickInfo::setLastPrice(utility::string_t value)
{
    m_Last_price = value;
    m_Last_priceIsSet = true;
}
bool SymbolTickInfo::lastPriceIsSet() const
{
    return m_Last_priceIsSet;
}

void SymbolTickInfo::unsetLast_price()
{
    m_Last_priceIsSet = false;
}

utility::string_t SymbolTickInfo::getLastTickDirection() const
{
    return m_Last_tick_direction;
}


void SymbolTickInfo::setLastTickDirection(utility::string_t value)
{
    m_Last_tick_direction = value;
    m_Last_tick_directionIsSet = true;
}
bool SymbolTickInfo::lastTickDirectionIsSet() const
{
    return m_Last_tick_directionIsSet;
}

void SymbolTickInfo::unsetLast_tick_direction()
{
    m_Last_tick_directionIsSet = false;
}

utility::string_t SymbolTickInfo::getPrevPrice24h() const
{
    return m_Prev_price_24h;
}


void SymbolTickInfo::setPrevPrice24h(utility::string_t value)
{
    m_Prev_price_24h = value;
    m_Prev_price_24hIsSet = true;
}
bool SymbolTickInfo::prevPrice24hIsSet() const
{
    return m_Prev_price_24hIsSet;
}

void SymbolTickInfo::unsetPrev_price_24h()
{
    m_Prev_price_24hIsSet = false;
}

utility::string_t SymbolTickInfo::getPrice24hPcnt() const
{
    return m_Price_24h_pcnt;
}


void SymbolTickInfo::setPrice24hPcnt(utility::string_t value)
{
    m_Price_24h_pcnt = value;
    m_Price_24h_pcntIsSet = true;
}
bool SymbolTickInfo::price24hPcntIsSet() const
{
    return m_Price_24h_pcntIsSet;
}

void SymbolTickInfo::unsetPrice_24h_pcnt()
{
    m_Price_24h_pcntIsSet = false;
}

utility::string_t SymbolTickInfo::getHighPrice24h() const
{
    return m_High_price_24h;
}


void SymbolTickInfo::setHighPrice24h(utility::string_t value)
{
    m_High_price_24h = value;
    m_High_price_24hIsSet = true;
}
bool SymbolTickInfo::highPrice24hIsSet() const
{
    return m_High_price_24hIsSet;
}

void SymbolTickInfo::unsetHigh_price_24h()
{
    m_High_price_24hIsSet = false;
}

utility::string_t SymbolTickInfo::getLowPrice24h() const
{
    return m_Low_price_24h;
}


void SymbolTickInfo::setLowPrice24h(utility::string_t value)
{
    m_Low_price_24h = value;
    m_Low_price_24hIsSet = true;
}
bool SymbolTickInfo::lowPrice24hIsSet() const
{
    return m_Low_price_24hIsSet;
}

void SymbolTickInfo::unsetLow_price_24h()
{
    m_Low_price_24hIsSet = false;
}

utility::string_t SymbolTickInfo::getPrevPrice1h() const
{
    return m_Prev_price_1h;
}


void SymbolTickInfo::setPrevPrice1h(utility::string_t value)
{
    m_Prev_price_1h = value;
    m_Prev_price_1hIsSet = true;
}
bool SymbolTickInfo::prevPrice1hIsSet() const
{
    return m_Prev_price_1hIsSet;
}

void SymbolTickInfo::unsetPrev_price_1h()
{
    m_Prev_price_1hIsSet = false;
}

utility::string_t SymbolTickInfo::getPrice1hPcnt() const
{
    return m_Price_1h_pcnt;
}


void SymbolTickInfo::setPrice1hPcnt(utility::string_t value)
{
    m_Price_1h_pcnt = value;
    m_Price_1h_pcntIsSet = true;
}
bool SymbolTickInfo::price1hPcntIsSet() const
{
    return m_Price_1h_pcntIsSet;
}

void SymbolTickInfo::unsetPrice_1h_pcnt()
{
    m_Price_1h_pcntIsSet = false;
}

utility::string_t SymbolTickInfo::getMarkPrice() const
{
    return m_Mark_price;
}


void SymbolTickInfo::setMarkPrice(utility::string_t value)
{
    m_Mark_price = value;
    m_Mark_priceIsSet = true;
}
bool SymbolTickInfo::markPriceIsSet() const
{
    return m_Mark_priceIsSet;
}

void SymbolTickInfo::unsetMark_price()
{
    m_Mark_priceIsSet = false;
}

utility::string_t SymbolTickInfo::getIndexPrice() const
{
    return m_Index_price;
}


void SymbolTickInfo::setIndexPrice(utility::string_t value)
{
    m_Index_price = value;
    m_Index_priceIsSet = true;
}
bool SymbolTickInfo::indexPriceIsSet() const
{
    return m_Index_priceIsSet;
}

void SymbolTickInfo::unsetIndex_price()
{
    m_Index_priceIsSet = false;
}

double SymbolTickInfo::getOpenInterest() const
{
    return m_Open_interest;
}


void SymbolTickInfo::setOpenInterest(double value)
{
    m_Open_interest = value;
    m_Open_interestIsSet = true;
}
bool SymbolTickInfo::openInterestIsSet() const
{
    return m_Open_interestIsSet;
}

void SymbolTickInfo::unsetOpen_interest()
{
    m_Open_interestIsSet = false;
}

utility::string_t SymbolTickInfo::getOpenValue() const
{
    return m_Open_value;
}


void SymbolTickInfo::setOpenValue(utility::string_t value)
{
    m_Open_value = value;
    m_Open_valueIsSet = true;
}
bool SymbolTickInfo::openValueIsSet() const
{
    return m_Open_valueIsSet;
}

void SymbolTickInfo::unsetOpen_value()
{
    m_Open_valueIsSet = false;
}

utility::string_t SymbolTickInfo::getTotalTurnover() const
{
    return m_Total_turnover;
}


void SymbolTickInfo::setTotalTurnover(utility::string_t value)
{
    m_Total_turnover = value;
    m_Total_turnoverIsSet = true;
}
bool SymbolTickInfo::totalTurnoverIsSet() const
{
    return m_Total_turnoverIsSet;
}

void SymbolTickInfo::unsetTotal_turnover()
{
    m_Total_turnoverIsSet = false;
}

utility::string_t SymbolTickInfo::getTurnover24h() const
{
    return m_Turnover_24h;
}


void SymbolTickInfo::setTurnover24h(utility::string_t value)
{
    m_Turnover_24h = value;
    m_Turnover_24hIsSet = true;
}
bool SymbolTickInfo::turnover24hIsSet() const
{
    return m_Turnover_24hIsSet;
}

void SymbolTickInfo::unsetTurnover_24h()
{
    m_Turnover_24hIsSet = false;
}

double SymbolTickInfo::getTotalVolume() const
{
    return m_Total_volume;
}


void SymbolTickInfo::setTotalVolume(double value)
{
    m_Total_volume = value;
    m_Total_volumeIsSet = true;
}
bool SymbolTickInfo::totalVolumeIsSet() const
{
    return m_Total_volumeIsSet;
}

void SymbolTickInfo::unsetTotal_volume()
{
    m_Total_volumeIsSet = false;
}

double SymbolTickInfo::getVolume24h() const
{
    return m_Volume_24h;
}


void SymbolTickInfo::setVolume24h(double value)
{
    m_Volume_24h = value;
    m_Volume_24hIsSet = true;
}
bool SymbolTickInfo::volume24hIsSet() const
{
    return m_Volume_24hIsSet;
}

void SymbolTickInfo::unsetVolume_24h()
{
    m_Volume_24hIsSet = false;
}

utility::string_t SymbolTickInfo::getFundingRate() const
{
    return m_Funding_rate;
}


void SymbolTickInfo::setFundingRate(utility::string_t value)
{
    m_Funding_rate = value;
    m_Funding_rateIsSet = true;
}
bool SymbolTickInfo::fundingRateIsSet() const
{
    return m_Funding_rateIsSet;
}

void SymbolTickInfo::unsetFunding_rate()
{
    m_Funding_rateIsSet = false;
}

utility::string_t SymbolTickInfo::getPredictedFundingRate() const
{
    return m_Predicted_funding_rate;
}


void SymbolTickInfo::setPredictedFundingRate(utility::string_t value)
{
    m_Predicted_funding_rate = value;
    m_Predicted_funding_rateIsSet = true;
}
bool SymbolTickInfo::predictedFundingRateIsSet() const
{
    return m_Predicted_funding_rateIsSet;
}

void SymbolTickInfo::unsetPredicted_funding_rate()
{
    m_Predicted_funding_rateIsSet = false;
}

utility::string_t SymbolTickInfo::getNextFundingTime() const
{
    return m_Next_funding_time;
}


void SymbolTickInfo::setNextFundingTime(utility::string_t value)
{
    m_Next_funding_time = value;
    m_Next_funding_timeIsSet = true;
}
bool SymbolTickInfo::nextFundingTimeIsSet() const
{
    return m_Next_funding_timeIsSet;
}

void SymbolTickInfo::unsetNext_funding_time()
{
    m_Next_funding_timeIsSet = false;
}

double SymbolTickInfo::getCountdownHour() const
{
    return m_Countdown_hour;
}


void SymbolTickInfo::setCountdownHour(double value)
{
    m_Countdown_hour = value;
    m_Countdown_hourIsSet = true;
}
bool SymbolTickInfo::countdownHourIsSet() const
{
    return m_Countdown_hourIsSet;
}

void SymbolTickInfo::unsetCountdown_hour()
{
    m_Countdown_hourIsSet = false;
}

}
}
}
}

