/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SymbolTickInfo.h
 *
 * Get the orderbook response
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_SymbolTickInfo_H_
#define IO_SWAGGER_CLIENT_MODEL_SymbolTickInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Get the orderbook response
/// </summary>
class  SymbolTickInfo
    : public ModelBase
{
public:
    SymbolTickInfo();
    virtual ~SymbolTickInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SymbolTickInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBidPrice() const;
    bool bidPriceIsSet() const;
    void unsetBid_price();
    void setBidPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAskPrice() const;
    bool askPriceIsSet() const;
    void unsetAsk_price();
    void setAskPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastPrice() const;
    bool lastPriceIsSet() const;
    void unsetLast_price();
    void setLastPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastTickDirection() const;
    bool lastTickDirectionIsSet() const;
    void unsetLast_tick_direction();
    void setLastTickDirection(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrevPrice24h() const;
    bool prevPrice24hIsSet() const;
    void unsetPrev_price_24h();
    void setPrevPrice24h(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrice24hPcnt() const;
    bool price24hPcntIsSet() const;
    void unsetPrice_24h_pcnt();
    void setPrice24hPcnt(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHighPrice24h() const;
    bool highPrice24hIsSet() const;
    void unsetHigh_price_24h();
    void setHighPrice24h(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLowPrice24h() const;
    bool lowPrice24hIsSet() const;
    void unsetLow_price_24h();
    void setLowPrice24h(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrevPrice1h() const;
    bool prevPrice1hIsSet() const;
    void unsetPrev_price_1h();
    void setPrevPrice1h(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrice1hPcnt() const;
    bool price1hPcntIsSet() const;
    void unsetPrice_1h_pcnt();
    void setPrice1hPcnt(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMarkPrice() const;
    bool markPriceIsSet() const;
    void unsetMark_price();
    void setMarkPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIndexPrice() const;
    bool indexPriceIsSet() const;
    void unsetIndex_price();
    void setIndexPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getOpenInterest() const;
    bool openInterestIsSet() const;
    void unsetOpen_interest();
    void setOpenInterest(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOpenValue() const;
    bool openValueIsSet() const;
    void unsetOpen_value();
    void setOpenValue(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTotalTurnover() const;
    bool totalTurnoverIsSet() const;
    void unsetTotal_turnover();
    void setTotalTurnover(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTurnover24h() const;
    bool turnover24hIsSet() const;
    void unsetTurnover_24h();
    void setTurnover24h(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getTotalVolume() const;
    bool totalVolumeIsSet() const;
    void unsetTotal_volume();
    void setTotalVolume(double value);
    /// <summary>
    /// 
    /// </summary>
    double getVolume24h() const;
    bool volume24hIsSet() const;
    void unsetVolume_24h();
    void setVolume24h(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFundingRate() const;
    bool fundingRateIsSet() const;
    void unsetFunding_rate();
    void setFundingRate(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPredictedFundingRate() const;
    bool predictedFundingRateIsSet() const;
    void unsetPredicted_funding_rate();
    void setPredictedFundingRate(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNextFundingTime() const;
    bool nextFundingTimeIsSet() const;
    void unsetNext_funding_time();
    void setNextFundingTime(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getCountdownHour() const;
    bool countdownHourIsSet() const;
    void unsetCountdown_hour();
    void setCountdownHour(double value);

protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    utility::string_t m_Bid_price;
    bool m_Bid_priceIsSet;
    utility::string_t m_Ask_price;
    bool m_Ask_priceIsSet;
    utility::string_t m_Last_price;
    bool m_Last_priceIsSet;
    utility::string_t m_Last_tick_direction;
    bool m_Last_tick_directionIsSet;
    utility::string_t m_Prev_price_24h;
    bool m_Prev_price_24hIsSet;
    utility::string_t m_Price_24h_pcnt;
    bool m_Price_24h_pcntIsSet;
    utility::string_t m_High_price_24h;
    bool m_High_price_24hIsSet;
    utility::string_t m_Low_price_24h;
    bool m_Low_price_24hIsSet;
    utility::string_t m_Prev_price_1h;
    bool m_Prev_price_1hIsSet;
    utility::string_t m_Price_1h_pcnt;
    bool m_Price_1h_pcntIsSet;
    utility::string_t m_Mark_price;
    bool m_Mark_priceIsSet;
    utility::string_t m_Index_price;
    bool m_Index_priceIsSet;
    double m_Open_interest;
    bool m_Open_interestIsSet;
    utility::string_t m_Open_value;
    bool m_Open_valueIsSet;
    utility::string_t m_Total_turnover;
    bool m_Total_turnoverIsSet;
    utility::string_t m_Turnover_24h;
    bool m_Turnover_24hIsSet;
    double m_Total_volume;
    bool m_Total_volumeIsSet;
    double m_Volume_24h;
    bool m_Volume_24hIsSet;
    utility::string_t m_Funding_rate;
    bool m_Funding_rateIsSet;
    utility::string_t m_Predicted_funding_rate;
    bool m_Predicted_funding_rateIsSet;
    utility::string_t m_Next_funding_time;
    bool m_Next_funding_timeIsSet;
    double m_Countdown_hour;
    bool m_Countdown_hourIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_SymbolTickInfo_H_ */
