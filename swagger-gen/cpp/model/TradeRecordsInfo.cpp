/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TradeRecordsInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TradeRecordsInfo::TradeRecordsInfo()
{
    m_Closed_size = 0.0;
    m_Closed_sizeIsSet = false;
    m_Cross_seq = 0.0;
    m_Cross_seqIsSet = false;
    m_Exec_fee = utility::conversions::to_string_t("");
    m_Exec_feeIsSet = false;
    m_Exec_id = utility::conversions::to_string_t("");
    m_Exec_idIsSet = false;
    m_Exec_price = utility::conversions::to_string_t("");
    m_Exec_priceIsSet = false;
    m_Exec_qty = 0.0;
    m_Exec_qtyIsSet = false;
    m_Exec_time = utility::conversions::to_string_t("");
    m_Exec_timeIsSet = false;
    m_Exec_type = utility::conversions::to_string_t("");
    m_Exec_typeIsSet = false;
    m_Exec_value = utility::conversions::to_string_t("");
    m_Exec_valueIsSet = false;
    m_Fee_rate = utility::conversions::to_string_t("");
    m_Fee_rateIsSet = false;
    m_Last_liquidity_ind = utility::conversions::to_string_t("");
    m_Last_liquidity_indIsSet = false;
    m_Leaves_qty = 0.0;
    m_Leaves_qtyIsSet = false;
    m_Nth_fill = 0.0;
    m_Nth_fillIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Order_price = utility::conversions::to_string_t("");
    m_Order_priceIsSet = false;
    m_Order_qty = 0.0;
    m_Order_qtyIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_User_id = 0.0;
    m_User_idIsSet = false;
}

TradeRecordsInfo::~TradeRecordsInfo()
{
}

void TradeRecordsInfo::validate()
{
    // TODO: implement validation
}

web::json::value TradeRecordsInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Closed_sizeIsSet)
    {
        val[utility::conversions::to_string_t("closed_size")] = ModelBase::toJson(m_Closed_size);
    }
    if(m_Cross_seqIsSet)
    {
        val[utility::conversions::to_string_t("cross_seq")] = ModelBase::toJson(m_Cross_seq);
    }
    if(m_Exec_feeIsSet)
    {
        val[utility::conversions::to_string_t("exec_fee")] = ModelBase::toJson(m_Exec_fee);
    }
    if(m_Exec_idIsSet)
    {
        val[utility::conversions::to_string_t("exec_id")] = ModelBase::toJson(m_Exec_id);
    }
    if(m_Exec_priceIsSet)
    {
        val[utility::conversions::to_string_t("exec_price")] = ModelBase::toJson(m_Exec_price);
    }
    if(m_Exec_qtyIsSet)
    {
        val[utility::conversions::to_string_t("exec_qty")] = ModelBase::toJson(m_Exec_qty);
    }
    if(m_Exec_timeIsSet)
    {
        val[utility::conversions::to_string_t("exec_time")] = ModelBase::toJson(m_Exec_time);
    }
    if(m_Exec_typeIsSet)
    {
        val[utility::conversions::to_string_t("exec_type")] = ModelBase::toJson(m_Exec_type);
    }
    if(m_Exec_valueIsSet)
    {
        val[utility::conversions::to_string_t("exec_value")] = ModelBase::toJson(m_Exec_value);
    }
    if(m_Fee_rateIsSet)
    {
        val[utility::conversions::to_string_t("fee_rate")] = ModelBase::toJson(m_Fee_rate);
    }
    if(m_Last_liquidity_indIsSet)
    {
        val[utility::conversions::to_string_t("last_liquidity_ind")] = ModelBase::toJson(m_Last_liquidity_ind);
    }
    if(m_Leaves_qtyIsSet)
    {
        val[utility::conversions::to_string_t("leaves_qty")] = ModelBase::toJson(m_Leaves_qty);
    }
    if(m_Nth_fillIsSet)
    {
        val[utility::conversions::to_string_t("nth_fill")] = ModelBase::toJson(m_Nth_fill);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t("order_id")] = ModelBase::toJson(m_Order_id);
    }
    if(m_Order_priceIsSet)
    {
        val[utility::conversions::to_string_t("order_price")] = ModelBase::toJson(m_Order_price);
    }
    if(m_Order_qtyIsSet)
    {
        val[utility::conversions::to_string_t("order_qty")] = ModelBase::toJson(m_Order_qty);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }

    return val;
}

void TradeRecordsInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("closed_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("closed_size")];
        if(!fieldValue.is_null())
        {
            setClosedSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cross_seq")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cross_seq")];
        if(!fieldValue.is_null())
        {
            setCrossSeq(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_fee")];
        if(!fieldValue.is_null())
        {
            setExecFee(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_id")];
        if(!fieldValue.is_null())
        {
            setExecId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_price")];
        if(!fieldValue.is_null())
        {
            setExecPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_qty")];
        if(!fieldValue.is_null())
        {
            setExecQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_time")];
        if(!fieldValue.is_null())
        {
            setExecTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_type")];
        if(!fieldValue.is_null())
        {
            setExecType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_value")];
        if(!fieldValue.is_null())
        {
            setExecValue(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fee_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fee_rate")];
        if(!fieldValue.is_null())
        {
            setFeeRate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_liquidity_ind")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_liquidity_ind")];
        if(!fieldValue.is_null())
        {
            setLastLiquidityInd(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaves_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leaves_qty")];
        if(!fieldValue.is_null())
        {
            setLeavesQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nth_fill")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nth_fill")];
        if(!fieldValue.is_null())
        {
            setNthFill(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_id")];
        if(!fieldValue.is_null())
        {
            setOrderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_price")];
        if(!fieldValue.is_null())
        {
            setOrderPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_qty")];
        if(!fieldValue.is_null())
        {
            setOrderQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void TradeRecordsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Closed_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closed_size"), m_Closed_size));
    }
    if(m_Cross_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cross_seq"), m_Cross_seq));
    }
    if(m_Exec_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_fee"), m_Exec_fee));
        
    }
    if(m_Exec_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_id"), m_Exec_id));
        
    }
    if(m_Exec_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_price"), m_Exec_price));
        
    }
    if(m_Exec_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_qty"), m_Exec_qty));
    }
    if(m_Exec_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_time"), m_Exec_time));
        
    }
    if(m_Exec_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_type"), m_Exec_type));
        
    }
    if(m_Exec_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_value"), m_Exec_value));
        
    }
    if(m_Fee_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fee_rate"), m_Fee_rate));
        
    }
    if(m_Last_liquidity_indIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_liquidity_ind"), m_Last_liquidity_ind));
        
    }
    if(m_Leaves_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leaves_qty"), m_Leaves_qty));
    }
    if(m_Nth_fillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nth_fill"), m_Nth_fill));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_id"), m_Order_id));
        
    }
    if(m_Order_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_price"), m_Order_price));
        
    }
    if(m_Order_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_qty"), m_Order_qty));
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
}

void TradeRecordsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("closed_size")))
    {
        setClosedSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closed_size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cross_seq")))
    {
        setCrossSeq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cross_seq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_fee")))
    {
        setExecFee(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_id")))
    {
        setExecId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_price")))
    {
        setExecPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_qty")))
    {
        setExecQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_time")))
    {
        setExecTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_type")))
    {
        setExecType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_value")))
    {
        setExecValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fee_rate")))
    {
        setFeeRate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fee_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_liquidity_ind")))
    {
        setLastLiquidityInd(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_liquidity_ind"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaves_qty")))
    {
        setLeavesQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leaves_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nth_fill")))
    {
        setNthFill(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nth_fill"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_id")))
    {
        setOrderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_price")))
    {
        setOrderPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_qty")))
    {
        setOrderQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
}

double TradeRecordsInfo::getClosedSize() const
{
    return m_Closed_size;
}


void TradeRecordsInfo::setClosedSize(double value)
{
    m_Closed_size = value;
    m_Closed_sizeIsSet = true;
}
bool TradeRecordsInfo::closedSizeIsSet() const
{
    return m_Closed_sizeIsSet;
}

void TradeRecordsInfo::unsetClosed_size()
{
    m_Closed_sizeIsSet = false;
}

double TradeRecordsInfo::getCrossSeq() const
{
    return m_Cross_seq;
}


void TradeRecordsInfo::setCrossSeq(double value)
{
    m_Cross_seq = value;
    m_Cross_seqIsSet = true;
}
bool TradeRecordsInfo::crossSeqIsSet() const
{
    return m_Cross_seqIsSet;
}

void TradeRecordsInfo::unsetCross_seq()
{
    m_Cross_seqIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecFee() const
{
    return m_Exec_fee;
}


void TradeRecordsInfo::setExecFee(utility::string_t value)
{
    m_Exec_fee = value;
    m_Exec_feeIsSet = true;
}
bool TradeRecordsInfo::execFeeIsSet() const
{
    return m_Exec_feeIsSet;
}

void TradeRecordsInfo::unsetExec_fee()
{
    m_Exec_feeIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecId() const
{
    return m_Exec_id;
}


void TradeRecordsInfo::setExecId(utility::string_t value)
{
    m_Exec_id = value;
    m_Exec_idIsSet = true;
}
bool TradeRecordsInfo::execIdIsSet() const
{
    return m_Exec_idIsSet;
}

void TradeRecordsInfo::unsetExec_id()
{
    m_Exec_idIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecPrice() const
{
    return m_Exec_price;
}


void TradeRecordsInfo::setExecPrice(utility::string_t value)
{
    m_Exec_price = value;
    m_Exec_priceIsSet = true;
}
bool TradeRecordsInfo::execPriceIsSet() const
{
    return m_Exec_priceIsSet;
}

void TradeRecordsInfo::unsetExec_price()
{
    m_Exec_priceIsSet = false;
}

double TradeRecordsInfo::getExecQty() const
{
    return m_Exec_qty;
}


void TradeRecordsInfo::setExecQty(double value)
{
    m_Exec_qty = value;
    m_Exec_qtyIsSet = true;
}
bool TradeRecordsInfo::execQtyIsSet() const
{
    return m_Exec_qtyIsSet;
}

void TradeRecordsInfo::unsetExec_qty()
{
    m_Exec_qtyIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecTime() const
{
    return m_Exec_time;
}


void TradeRecordsInfo::setExecTime(utility::string_t value)
{
    m_Exec_time = value;
    m_Exec_timeIsSet = true;
}
bool TradeRecordsInfo::execTimeIsSet() const
{
    return m_Exec_timeIsSet;
}

void TradeRecordsInfo::unsetExec_time()
{
    m_Exec_timeIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecType() const
{
    return m_Exec_type;
}


void TradeRecordsInfo::setExecType(utility::string_t value)
{
    m_Exec_type = value;
    m_Exec_typeIsSet = true;
}
bool TradeRecordsInfo::execTypeIsSet() const
{
    return m_Exec_typeIsSet;
}

void TradeRecordsInfo::unsetExec_type()
{
    m_Exec_typeIsSet = false;
}

utility::string_t TradeRecordsInfo::getExecValue() const
{
    return m_Exec_value;
}


void TradeRecordsInfo::setExecValue(utility::string_t value)
{
    m_Exec_value = value;
    m_Exec_valueIsSet = true;
}
bool TradeRecordsInfo::execValueIsSet() const
{
    return m_Exec_valueIsSet;
}

void TradeRecordsInfo::unsetExec_value()
{
    m_Exec_valueIsSet = false;
}

utility::string_t TradeRecordsInfo::getFeeRate() const
{
    return m_Fee_rate;
}


void TradeRecordsInfo::setFeeRate(utility::string_t value)
{
    m_Fee_rate = value;
    m_Fee_rateIsSet = true;
}
bool TradeRecordsInfo::feeRateIsSet() const
{
    return m_Fee_rateIsSet;
}

void TradeRecordsInfo::unsetFee_rate()
{
    m_Fee_rateIsSet = false;
}

utility::string_t TradeRecordsInfo::getLastLiquidityInd() const
{
    return m_Last_liquidity_ind;
}


void TradeRecordsInfo::setLastLiquidityInd(utility::string_t value)
{
    m_Last_liquidity_ind = value;
    m_Last_liquidity_indIsSet = true;
}
bool TradeRecordsInfo::lastLiquidityIndIsSet() const
{
    return m_Last_liquidity_indIsSet;
}

void TradeRecordsInfo::unsetLast_liquidity_ind()
{
    m_Last_liquidity_indIsSet = false;
}

double TradeRecordsInfo::getLeavesQty() const
{
    return m_Leaves_qty;
}


void TradeRecordsInfo::setLeavesQty(double value)
{
    m_Leaves_qty = value;
    m_Leaves_qtyIsSet = true;
}
bool TradeRecordsInfo::leavesQtyIsSet() const
{
    return m_Leaves_qtyIsSet;
}

void TradeRecordsInfo::unsetLeaves_qty()
{
    m_Leaves_qtyIsSet = false;
}

double TradeRecordsInfo::getNthFill() const
{
    return m_Nth_fill;
}


void TradeRecordsInfo::setNthFill(double value)
{
    m_Nth_fill = value;
    m_Nth_fillIsSet = true;
}
bool TradeRecordsInfo::nthFillIsSet() const
{
    return m_Nth_fillIsSet;
}

void TradeRecordsInfo::unsetNth_fill()
{
    m_Nth_fillIsSet = false;
}

utility::string_t TradeRecordsInfo::getOrderId() const
{
    return m_Order_id;
}


void TradeRecordsInfo::setOrderId(utility::string_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool TradeRecordsInfo::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void TradeRecordsInfo::unsetOrder_id()
{
    m_Order_idIsSet = false;
}

utility::string_t TradeRecordsInfo::getOrderPrice() const
{
    return m_Order_price;
}


void TradeRecordsInfo::setOrderPrice(utility::string_t value)
{
    m_Order_price = value;
    m_Order_priceIsSet = true;
}
bool TradeRecordsInfo::orderPriceIsSet() const
{
    return m_Order_priceIsSet;
}

void TradeRecordsInfo::unsetOrder_price()
{
    m_Order_priceIsSet = false;
}

double TradeRecordsInfo::getOrderQty() const
{
    return m_Order_qty;
}


void TradeRecordsInfo::setOrderQty(double value)
{
    m_Order_qty = value;
    m_Order_qtyIsSet = true;
}
bool TradeRecordsInfo::orderQtyIsSet() const
{
    return m_Order_qtyIsSet;
}

void TradeRecordsInfo::unsetOrder_qty()
{
    m_Order_qtyIsSet = false;
}

utility::string_t TradeRecordsInfo::getOrderType() const
{
    return m_Order_type;
}


void TradeRecordsInfo::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool TradeRecordsInfo::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void TradeRecordsInfo::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

utility::string_t TradeRecordsInfo::getSide() const
{
    return m_Side;
}


void TradeRecordsInfo::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool TradeRecordsInfo::sideIsSet() const
{
    return m_SideIsSet;
}

void TradeRecordsInfo::unsetSide()
{
    m_SideIsSet = false;
}

utility::string_t TradeRecordsInfo::getSymbol() const
{
    return m_Symbol;
}


void TradeRecordsInfo::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool TradeRecordsInfo::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void TradeRecordsInfo::unsetSymbol()
{
    m_SymbolIsSet = false;
}

double TradeRecordsInfo::getUserId() const
{
    return m_User_id;
}


void TradeRecordsInfo::setUserId(double value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool TradeRecordsInfo::userIdIsSet() const
{
    return m_User_idIsSet;
}

void TradeRecordsInfo::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

