/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MarketApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_MarketApi_H_
#define IO_SWAGGER_CLIENT_API_MarketApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  MarketApi
{
public:
    MarketApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~MarketApi();
    /// <summary>
    /// Query Account Long Short Ratio
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="period">Data recording period. 5min, 15min, 30min, 1h, 4h, 1d</param>
    /// <param name="limit">Limit for data size, max size is 500. Default size is 50 (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_accountRatio(
        utility::string_t symbol,
        utility::string_t period,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Query Big Deal
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="limit">Limit for data size, max size is 1000. Default size is 500 (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_bigDeal(
        utility::string_t symbol,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Query liq records.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="from">From ID. Default: return latest data (optional)</param>
    /// <param name="limit">Limit for data size, max size is 1000. Default size is 500 (optional)</param>
    /// <param name="startTime">Start timestamp point for result, in millisecond (optional)</param>
    /// <param name="endTime">End timestamp point for result, in millisecond (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_liqRecords(
        utility::string_t symbol,
        boost::optional<int32_t> from,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> startTime,
        boost::optional<int32_t> endTime
    );
    /// <summary>
    /// Query Open Interest
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="period">Data recording period. 5min, 15min, 30min, 1h, 4h, 1d</param>
    /// <param name="limit">Limit for data size, max size is 200. Default size is 50 (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_openInterest(
        utility::string_t symbol,
        utility::string_t period,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get the orderbook.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    pplx::task<std::shared_ptr<Object>> market_orderbook(
        utility::string_t symbol
    );
    /// <summary>
    /// Get the latest information for symbol.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type. (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_symbolInfo(
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Get recent trades
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="from">From ID. Default: return latest data (optional)</param>
    /// <param name="limit">Number of results. Default 500; max 1000 (optional)</param>
    pplx::task<std::shared_ptr<Object>> market_tradingRecords(
        utility::string_t symbol,
        boost::optional<int32_t> from,
        boost::optional<int32_t> limit
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_MarketApi_H_ */

