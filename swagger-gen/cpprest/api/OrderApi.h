/**
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * OrderApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_OrderApi_H_
#define IO_SWAGGER_CLIENT_API_OrderApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  OrderApi
{
public:
    OrderApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~OrderApi();
    /// <summary>
    /// Replace active order. Only incomplete orders can be modified. 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderId">Order ID.</param>
    /// <param name="symbol">Contract type.</param>
    /// <param name="pRQty">Order quantity. (optional)</param>
    /// <param name="pRPrice">Order price. (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_Replace(
        utility::string_t orderId,
        utility::string_t symbol,
        boost::optional<double> pRQty,
        boost::optional<double> pRPrice
    );
    /// <summary>
    /// Get my active order list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderId">Order ID</param>
    /// <param name="symbol">Contract type. (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_cancel(
        utility::string_t orderId,
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Get my active order list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    pplx::task<std::shared_ptr<Object>> order_cancelAll(
        utility::string_t symbol
    );
    /// <summary>
    /// Get my active order list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderId">Order ID</param>
    /// <param name="symbol">Contract type. (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_cancelV2(
        utility::string_t orderId,
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Get my active order list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderId">Order ID (optional)</param>
    /// <param name="orderLinkId">Customized order ID. (optional)</param>
    /// <param name="symbol">Contract type. Default BTCUSD (optional)</param>
    /// <param name="order">Sort orders by creation date (optional)</param>
    /// <param name="page">Page. Default getting first page data (optional)</param>
    /// <param name="limit">TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)</param>
    /// <param name="orderStatus">Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_getOrders(
        boost::optional<utility::string_t> orderId,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> order,
        boost::optional<double> page,
        boost::optional<double> limit,
        boost::optional<utility::string_t> orderStatus
    );
    /// <summary>
    /// Place active order
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="side">Side</param>
    /// <param name="symbol">Contract type.</param>
    /// <param name="orderType">Active order type</param>
    /// <param name="qty"></param>
    /// <param name="price">Order price.</param>
    /// <param name="timeInForce">Time in force</param>
    /// <param name="takeProfit">take profit price (optional)</param>
    /// <param name="stopLoss">stop loss price (optional)</param>
    /// <param name="reduceOnly">reduce only (optional)</param>
    /// <param name="closeOnTrigger">close on trigger (optional)</param>
    /// <param name="orderLinkId">TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_new(
        utility::string_t side,
        utility::string_t symbol,
        utility::string_t orderType,
        double qty,
        double price,
        utility::string_t timeInForce,
        boost::optional<double> takeProfit,
        boost::optional<double> stopLoss,
        boost::optional<bool> reduceOnly,
        boost::optional<bool> closeOnTrigger,
        boost::optional<utility::string_t> orderLinkId
    );
    /// <summary>
    /// Place active order
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="side">Side</param>
    /// <param name="symbol">Contract type.</param>
    /// <param name="orderType">Active order type</param>
    /// <param name="qty"></param>
    /// <param name="price">Order price.</param>
    /// <param name="timeInForce">Time in force</param>
    /// <param name="takeProfit">take profit price (optional)</param>
    /// <param name="stopLoss">stop loss price (optional)</param>
    /// <param name="reduceOnly">reduce only (optional)</param>
    /// <param name="closeOnTrigger">close on trigger (optional)</param>
    /// <param name="orderLinkId">TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)</param>
    /// <param name="trailingStop">Trailing stop. (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_newV2(
        utility::string_t side,
        utility::string_t symbol,
        utility::string_t orderType,
        double qty,
        double price,
        utility::string_t timeInForce,
        boost::optional<double> takeProfit,
        boost::optional<double> stopLoss,
        boost::optional<bool> reduceOnly,
        boost::optional<bool> closeOnTrigger,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<utility::string_t> trailingStop
    );
    /// <summary>
    /// Get my active order list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderId">Order ID (optional)</param>
    /// <param name="symbol">Contract type. Default BTCUSD (optional)</param>
    pplx::task<std::shared_ptr<Object>> order_query(
        boost::optional<utility::string_t> orderId,
        boost::optional<utility::string_t> symbol
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_OrderApi_H_ */

