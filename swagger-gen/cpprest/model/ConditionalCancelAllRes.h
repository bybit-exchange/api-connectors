/**
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ConditionalCancelAllRes.h
 *
 * Cancel all conditional order response
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_ConditionalCancelAllRes_H_
#define IO_SWAGGER_CLIENT_MODEL_ConditionalCancelAllRes_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Cancel all conditional order response
/// </summary>
class  ConditionalCancelAllRes
    : public ModelBase
{
public:
    ConditionalCancelAllRes();
    virtual ~ConditionalCancelAllRes();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConditionalCancelAllRes members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClOrdID() const;
    bool clOrdIDIsSet() const;
    void unsetClOrdID();
    void setClOrdID(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();
    void setUserId(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSide() const;
    bool sideIsSet() const;
    void unsetSide();
    void setSide(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderType() const;
    bool orderTypeIsSet() const;
    void unsetOrder_type();
    void setOrderType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getQty() const;
    bool qtyIsSet() const;
    void unsetQty();
    void setQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimeInForce() const;
    bool timeInForceIsSet() const;
    void unsetTime_in_force();
    void setTimeInForce(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreateType() const;
    bool createTypeIsSet() const;
    void unsetCreate_type();
    void setCreateType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCancelType() const;
    bool cancelTypeIsSet() const;
    void unsetCancel_type();
    void setCancelType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderStatus() const;
    bool orderStatusIsSet() const;
    void unsetOrder_status();
    void setOrderStatus(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getLeavesQty() const;
    bool leavesQtyIsSet() const;
    void unsetLeaves_qty();
    void setLeavesQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLeavesValue() const;
    bool leavesValueIsSet() const;
    void unsetLeaves_value();
    void setLeavesValue(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getCrossSeq() const;
    bool crossSeqIsSet() const;
    void unsetCross_seq();
    void setCrossSeq(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStopOrderType() const;
    bool stopOrderTypeIsSet() const;
    void unsetStop_order_type();
    void setStopOrderType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTriggerBy() const;
    bool triggerByIsSet() const;
    void unsetTrigger_by();
    void setTriggerBy(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();
    void setCreatedAt(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdated_at();
    void setUpdatedAt(utility::string_t value);

protected:
    utility::string_t m_ClOrdID;
    bool m_ClOrdIDIsSet;
    double m_User_id;
    bool m_User_idIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    utility::string_t m_Side;
    bool m_SideIsSet;
    utility::string_t m_Order_type;
    bool m_Order_typeIsSet;
    utility::string_t m_Price;
    bool m_PriceIsSet;
    double m_Qty;
    bool m_QtyIsSet;
    utility::string_t m_Time_in_force;
    bool m_Time_in_forceIsSet;
    utility::string_t m_Create_type;
    bool m_Create_typeIsSet;
    utility::string_t m_Cancel_type;
    bool m_Cancel_typeIsSet;
    utility::string_t m_Order_status;
    bool m_Order_statusIsSet;
    double m_Leaves_qty;
    bool m_Leaves_qtyIsSet;
    utility::string_t m_Leaves_value;
    bool m_Leaves_valueIsSet;
    double m_Cross_seq;
    bool m_Cross_seqIsSet;
    utility::string_t m_Stop_order_type;
    bool m_Stop_order_typeIsSet;
    utility::string_t m_Trigger_by;
    bool m_Trigger_byIsSet;
    utility::string_t m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Updated_at;
    bool m_Updated_atIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_ConditionalCancelAllRes_H_ */
