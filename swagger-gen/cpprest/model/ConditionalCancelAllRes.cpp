/**
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ConditionalCancelAllRes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ConditionalCancelAllRes::ConditionalCancelAllRes()
{
    m_ClOrdID = utility::conversions::to_string_t("");
    m_ClOrdIDIsSet = false;
    m_User_id = 0.0;
    m_User_idIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Price = utility::conversions::to_string_t("");
    m_PriceIsSet = false;
    m_Qty = 0.0;
    m_QtyIsSet = false;
    m_Time_in_force = utility::conversions::to_string_t("");
    m_Time_in_forceIsSet = false;
    m_Create_type = utility::conversions::to_string_t("");
    m_Create_typeIsSet = false;
    m_Cancel_type = utility::conversions::to_string_t("");
    m_Cancel_typeIsSet = false;
    m_Order_status = utility::conversions::to_string_t("");
    m_Order_statusIsSet = false;
    m_Leaves_qty = 0.0;
    m_Leaves_qtyIsSet = false;
    m_Leaves_value = utility::conversions::to_string_t("");
    m_Leaves_valueIsSet = false;
    m_Cross_seq = 0.0;
    m_Cross_seqIsSet = false;
    m_Stop_order_type = utility::conversions::to_string_t("");
    m_Stop_order_typeIsSet = false;
    m_Trigger_by = utility::conversions::to_string_t("");
    m_Trigger_byIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
    m_Updated_at = utility::conversions::to_string_t("");
    m_Updated_atIsSet = false;
}

ConditionalCancelAllRes::~ConditionalCancelAllRes()
{
}

void ConditionalCancelAllRes::validate()
{
    // TODO: implement validation
}

web::json::value ConditionalCancelAllRes::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ClOrdIDIsSet)
    {
        val[utility::conversions::to_string_t("clOrdID")] = ModelBase::toJson(m_ClOrdID);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_QtyIsSet)
    {
        val[utility::conversions::to_string_t("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_Time_in_forceIsSet)
    {
        val[utility::conversions::to_string_t("time_in_force")] = ModelBase::toJson(m_Time_in_force);
    }
    if(m_Create_typeIsSet)
    {
        val[utility::conversions::to_string_t("create_type")] = ModelBase::toJson(m_Create_type);
    }
    if(m_Cancel_typeIsSet)
    {
        val[utility::conversions::to_string_t("cancel_type")] = ModelBase::toJson(m_Cancel_type);
    }
    if(m_Order_statusIsSet)
    {
        val[utility::conversions::to_string_t("order_status")] = ModelBase::toJson(m_Order_status);
    }
    if(m_Leaves_qtyIsSet)
    {
        val[utility::conversions::to_string_t("leaves_qty")] = ModelBase::toJson(m_Leaves_qty);
    }
    if(m_Leaves_valueIsSet)
    {
        val[utility::conversions::to_string_t("leaves_value")] = ModelBase::toJson(m_Leaves_value);
    }
    if(m_Cross_seqIsSet)
    {
        val[utility::conversions::to_string_t("cross_seq")] = ModelBase::toJson(m_Cross_seq);
    }
    if(m_Stop_order_typeIsSet)
    {
        val[utility::conversions::to_string_t("stop_order_type")] = ModelBase::toJson(m_Stop_order_type);
    }
    if(m_Trigger_byIsSet)
    {
        val[utility::conversions::to_string_t("trigger_by")] = ModelBase::toJson(m_Trigger_by);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t("updated_at")] = ModelBase::toJson(m_Updated_at);
    }

    return val;
}

void ConditionalCancelAllRes::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("clOrdID")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("clOrdID")];
        if(!fieldValue.is_null())
        {
            setClOrdID(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("qty")];
        if(!fieldValue.is_null())
        {
            setQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time_in_force")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("time_in_force")];
        if(!fieldValue.is_null())
        {
            setTimeInForce(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("create_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("create_type")];
        if(!fieldValue.is_null())
        {
            setCreateType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cancel_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cancel_type")];
        if(!fieldValue.is_null())
        {
            setCancelType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_status")];
        if(!fieldValue.is_null())
        {
            setOrderStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaves_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leaves_qty")];
        if(!fieldValue.is_null())
        {
            setLeavesQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaves_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leaves_value")];
        if(!fieldValue.is_null())
        {
            setLeavesValue(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cross_seq")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cross_seq")];
        if(!fieldValue.is_null())
        {
            setCrossSeq(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stop_order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("stop_order_type")];
        if(!fieldValue.is_null())
        {
            setStopOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trigger_by")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trigger_by")];
        if(!fieldValue.is_null())
        {
            setTriggerBy(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_at")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated_at")];
        if(!fieldValue.is_null())
        {
            setUpdatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ConditionalCancelAllRes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ClOrdIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clOrdID"), m_ClOrdID));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
        
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qty"), m_Qty));
    }
    if(m_Time_in_forceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time_in_force"), m_Time_in_force));
        
    }
    if(m_Create_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("create_type"), m_Create_type));
        
    }
    if(m_Cancel_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cancel_type"), m_Cancel_type));
        
    }
    if(m_Order_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_status"), m_Order_status));
        
    }
    if(m_Leaves_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leaves_qty"), m_Leaves_qty));
    }
    if(m_Leaves_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leaves_value"), m_Leaves_value));
        
    }
    if(m_Cross_seqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cross_seq"), m_Cross_seq));
    }
    if(m_Stop_order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stop_order_type"), m_Stop_order_type));
        
    }
    if(m_Trigger_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trigger_by"), m_Trigger_by));
        
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
        
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated_at"), m_Updated_at));
        
    }
}

void ConditionalCancelAllRes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("clOrdID")))
    {
        setClOrdID(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("clOrdID"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qty")))
    {
        setQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time_in_force")))
    {
        setTimeInForce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("time_in_force"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("create_type")))
    {
        setCreateType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("create_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cancel_type")))
    {
        setCancelType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cancel_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_status")))
    {
        setOrderStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaves_qty")))
    {
        setLeavesQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leaves_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaves_value")))
    {
        setLeavesValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leaves_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cross_seq")))
    {
        setCrossSeq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cross_seq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stop_order_type")))
    {
        setStopOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stop_order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trigger_by")))
    {
        setTriggerBy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trigger_by"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated_at"))));
    }
}

utility::string_t ConditionalCancelAllRes::getClOrdID() const
{
    return m_ClOrdID;
}


void ConditionalCancelAllRes::setClOrdID(utility::string_t value)
{
    m_ClOrdID = value;
    m_ClOrdIDIsSet = true;
}
bool ConditionalCancelAllRes::clOrdIDIsSet() const
{
    return m_ClOrdIDIsSet;
}

void ConditionalCancelAllRes::unsetClOrdID()
{
    m_ClOrdIDIsSet = false;
}

double ConditionalCancelAllRes::getUserId() const
{
    return m_User_id;
}


void ConditionalCancelAllRes::setUserId(double value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool ConditionalCancelAllRes::userIdIsSet() const
{
    return m_User_idIsSet;
}

void ConditionalCancelAllRes::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getSymbol() const
{
    return m_Symbol;
}


void ConditionalCancelAllRes::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool ConditionalCancelAllRes::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void ConditionalCancelAllRes::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getSide() const
{
    return m_Side;
}


void ConditionalCancelAllRes::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool ConditionalCancelAllRes::sideIsSet() const
{
    return m_SideIsSet;
}

void ConditionalCancelAllRes::unsetSide()
{
    m_SideIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getOrderType() const
{
    return m_Order_type;
}


void ConditionalCancelAllRes::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool ConditionalCancelAllRes::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void ConditionalCancelAllRes::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getPrice() const
{
    return m_Price;
}


void ConditionalCancelAllRes::setPrice(utility::string_t value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool ConditionalCancelAllRes::priceIsSet() const
{
    return m_PriceIsSet;
}

void ConditionalCancelAllRes::unsetPrice()
{
    m_PriceIsSet = false;
}

double ConditionalCancelAllRes::getQty() const
{
    return m_Qty;
}


void ConditionalCancelAllRes::setQty(double value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool ConditionalCancelAllRes::qtyIsSet() const
{
    return m_QtyIsSet;
}

void ConditionalCancelAllRes::unsetQty()
{
    m_QtyIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getTimeInForce() const
{
    return m_Time_in_force;
}


void ConditionalCancelAllRes::setTimeInForce(utility::string_t value)
{
    m_Time_in_force = value;
    m_Time_in_forceIsSet = true;
}
bool ConditionalCancelAllRes::timeInForceIsSet() const
{
    return m_Time_in_forceIsSet;
}

void ConditionalCancelAllRes::unsetTime_in_force()
{
    m_Time_in_forceIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getCreateType() const
{
    return m_Create_type;
}


void ConditionalCancelAllRes::setCreateType(utility::string_t value)
{
    m_Create_type = value;
    m_Create_typeIsSet = true;
}
bool ConditionalCancelAllRes::createTypeIsSet() const
{
    return m_Create_typeIsSet;
}

void ConditionalCancelAllRes::unsetCreate_type()
{
    m_Create_typeIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getCancelType() const
{
    return m_Cancel_type;
}


void ConditionalCancelAllRes::setCancelType(utility::string_t value)
{
    m_Cancel_type = value;
    m_Cancel_typeIsSet = true;
}
bool ConditionalCancelAllRes::cancelTypeIsSet() const
{
    return m_Cancel_typeIsSet;
}

void ConditionalCancelAllRes::unsetCancel_type()
{
    m_Cancel_typeIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getOrderStatus() const
{
    return m_Order_status;
}


void ConditionalCancelAllRes::setOrderStatus(utility::string_t value)
{
    m_Order_status = value;
    m_Order_statusIsSet = true;
}
bool ConditionalCancelAllRes::orderStatusIsSet() const
{
    return m_Order_statusIsSet;
}

void ConditionalCancelAllRes::unsetOrder_status()
{
    m_Order_statusIsSet = false;
}

double ConditionalCancelAllRes::getLeavesQty() const
{
    return m_Leaves_qty;
}


void ConditionalCancelAllRes::setLeavesQty(double value)
{
    m_Leaves_qty = value;
    m_Leaves_qtyIsSet = true;
}
bool ConditionalCancelAllRes::leavesQtyIsSet() const
{
    return m_Leaves_qtyIsSet;
}

void ConditionalCancelAllRes::unsetLeaves_qty()
{
    m_Leaves_qtyIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getLeavesValue() const
{
    return m_Leaves_value;
}


void ConditionalCancelAllRes::setLeavesValue(utility::string_t value)
{
    m_Leaves_value = value;
    m_Leaves_valueIsSet = true;
}
bool ConditionalCancelAllRes::leavesValueIsSet() const
{
    return m_Leaves_valueIsSet;
}

void ConditionalCancelAllRes::unsetLeaves_value()
{
    m_Leaves_valueIsSet = false;
}

double ConditionalCancelAllRes::getCrossSeq() const
{
    return m_Cross_seq;
}


void ConditionalCancelAllRes::setCrossSeq(double value)
{
    m_Cross_seq = value;
    m_Cross_seqIsSet = true;
}
bool ConditionalCancelAllRes::crossSeqIsSet() const
{
    return m_Cross_seqIsSet;
}

void ConditionalCancelAllRes::unsetCross_seq()
{
    m_Cross_seqIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getStopOrderType() const
{
    return m_Stop_order_type;
}


void ConditionalCancelAllRes::setStopOrderType(utility::string_t value)
{
    m_Stop_order_type = value;
    m_Stop_order_typeIsSet = true;
}
bool ConditionalCancelAllRes::stopOrderTypeIsSet() const
{
    return m_Stop_order_typeIsSet;
}

void ConditionalCancelAllRes::unsetStop_order_type()
{
    m_Stop_order_typeIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getTriggerBy() const
{
    return m_Trigger_by;
}


void ConditionalCancelAllRes::setTriggerBy(utility::string_t value)
{
    m_Trigger_by = value;
    m_Trigger_byIsSet = true;
}
bool ConditionalCancelAllRes::triggerByIsSet() const
{
    return m_Trigger_byIsSet;
}

void ConditionalCancelAllRes::unsetTrigger_by()
{
    m_Trigger_byIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getCreatedAt() const
{
    return m_Created_at;
}


void ConditionalCancelAllRes::setCreatedAt(utility::string_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool ConditionalCancelAllRes::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void ConditionalCancelAllRes::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

utility::string_t ConditionalCancelAllRes::getUpdatedAt() const
{
    return m_Updated_at;
}


void ConditionalCancelAllRes::setUpdatedAt(utility::string_t value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool ConditionalCancelAllRes::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void ConditionalCancelAllRes::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}

}
}
}
}

