/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ExecutionApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ExecutionApiAsyncHelper(client, config)

  /**
   * Get user’s trade records.
   * 
   *
   * @param orderId OrderID. If not provided, will return user’s trading records. (optional)
   * @param symbol Contract type. If order_id not provided, symbol is required. (optional)
   * @param startTime Start timestamp point for result. (optional)
   * @param page Page. Default getting first page data. (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Any
   */
  def executionGetTrades(orderId: Option[String] = None, symbol: Option[String] = None, startTime: Option[String] = None, page: Option[String] = None, limit: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(executionGetTradesAsync(orderId, symbol, startTime, page, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user’s trade records. asynchronously
   * 
   *
   * @param orderId OrderID. If not provided, will return user’s trading records. (optional)
   * @param symbol Contract type. If order_id not provided, symbol is required. (optional)
   * @param startTime Start timestamp point for result. (optional)
   * @param page Page. Default getting first page data. (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Future(Any)
   */
  def executionGetTradesAsync(orderId: Option[String] = None, symbol: Option[String] = None, startTime: Option[String] = None, page: Option[String] = None, limit: Option[String] = None): Future[Any] = {
      helper.executionGetTrades(orderId, symbol, startTime, page, limit)
  }

  /**
   * Get user&#39;s closed profit and loss records
   * 
   *
   * @param symbol Contract type 
   * @param startTime Start timestamp point for result, in second (optional)
   * @param endTime End timestamp point for result, in second (optional)
   * @param execType Execution type (optional)
   * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Any
   */
  def positionsClosePnlRecords(symbol: String, startTime: Option[Integer] = None, endTime: Option[Integer] = None, execType: Option[String] = None, page: Option[Integer] = None, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(positionsClosePnlRecordsAsync(symbol, startTime, endTime, execType, page, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user&#39;s closed profit and loss records asynchronously
   * 
   *
   * @param symbol Contract type 
   * @param startTime Start timestamp point for result, in second (optional)
   * @param endTime End timestamp point for result, in second (optional)
   * @param execType Execution type (optional)
   * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Future(Any)
   */
  def positionsClosePnlRecordsAsync(symbol: String, startTime: Option[Integer] = None, endTime: Option[Integer] = None, execType: Option[String] = None, page: Option[Integer] = None, limit: Option[Integer] = None): Future[Any] = {
      helper.positionsClosePnlRecords(symbol, startTime, endTime, execType, page, limit)
  }

}

class ExecutionApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def executionGetTrades(orderId: Option[String] = None,
    symbol: Option[String] = None,
    startTime: Option[String] = None,
    page: Option[String] = None,
    limit: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/execution/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    orderId match {
      case Some(param) => queryParams += "order_id" -> param.toString
      case _ => queryParams
    }
    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }
    startTime match {
      case Some(param) => queryParams += "start_time" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def positionsClosePnlRecords(symbol: String,
    startTime: Option[Integer] = None,
    endTime: Option[Integer] = None,
    execType: Option[String] = None,
    page: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/trade/closed-pnl/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling ExecutionApi->positionsClosePnlRecords")

    queryParams += "symbol" -> symbol.toString
    startTime match {
      case Some(param) => queryParams += "start_time" -> param.toString
      case _ => queryParams
    }
    endTime match {
      case Some(param) => queryParams += "end_time" -> param.toString
      case _ => queryParams
    }
    execType match {
      case Some(param) => queryParams += "exec_type" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
