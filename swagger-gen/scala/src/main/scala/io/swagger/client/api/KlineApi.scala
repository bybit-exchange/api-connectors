/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Number
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class KlineApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new KlineApiAsyncHelper(client, config)

  /**
   * Query historical kline.
   * 
   *
   * @param symbol Contract type. 
   * @param interval Kline interval. 
   * @param from from timestamp. 
   * @param limit Contract type. (optional)
   * @return Any
   */
  def klineGet(symbol: String, interval: String, from: Number, limit: Option[Number] = None): Option[Any] = {
    val await = Try(Await.result(klineGetAsync(symbol, interval, from, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query historical kline. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param interval Kline interval. 
   * @param from from timestamp. 
   * @param limit Contract type. (optional)
   * @return Future(Any)
   */
  def klineGetAsync(symbol: String, interval: String, from: Number, limit: Option[Number] = None): Future[Any] = {
      helper.klineGet(symbol, interval, from, limit)
  }

  /**
   * Query mark price kline.
   * 
   *
   * @param symbol Contract type. 
   * @param interval Data refresh interval 
   * @param from From timestamp in seconds 
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @return Any
   */
  def klineMarkPrice(symbol: String, interval: String, from: Integer, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(klineMarkPriceAsync(symbol, interval, from, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query mark price kline. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param interval Data refresh interval 
   * @param from From timestamp in seconds 
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @return Future(Any)
   */
  def klineMarkPriceAsync(symbol: String, interval: String, from: Integer, limit: Option[Integer] = None): Future[Any] = {
      helper.klineMarkPrice(symbol, interval, from, limit)
  }

}

class KlineApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def klineGet(symbol: String,
    interval: String,
    from: Number,
    limit: Option[Number] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/kline/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling KlineApi->klineGet")

    if (interval == null) throw new Exception("Missing required parameter 'interval' when calling KlineApi->klineGet")

    queryParams += "symbol" -> symbol.toString
    queryParams += "interval" -> interval.toString
    queryParams += "from" -> from.toString
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def klineMarkPrice(symbol: String,
    interval: String,
    from: Integer,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/mark-price-kline"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling KlineApi->klineMarkPrice")

    if (interval == null) throw new Exception("Missing required parameter 'interval' when calling KlineApi->klineMarkPrice")

    queryParams += "symbol" -> symbol.toString
    queryParams += "interval" -> interval.toString
    queryParams += "from" -> from.toString
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
