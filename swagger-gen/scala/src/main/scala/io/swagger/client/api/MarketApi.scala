/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class MarketApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new MarketApiAsyncHelper(client, config)

  /**
   * Query Account Long Short Ratio
   * 
   *
   * @param symbol Contract type. 
   * @param period Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
   * @param limit Limit for data size, max size is 500. Default size is 50 (optional)
   * @return Any
   */
  def marketAccountRatio(symbol: String, period: String, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(marketAccountRatioAsync(symbol, period, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query Account Long Short Ratio asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param period Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
   * @param limit Limit for data size, max size is 500. Default size is 50 (optional)
   * @return Future(Any)
   */
  def marketAccountRatioAsync(symbol: String, period: String, limit: Option[Integer] = None): Future[Any] = {
      helper.marketAccountRatio(symbol, period, limit)
  }

  /**
   * Query Big Deal
   * 
   *
   * @param symbol Contract type. 
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @return Any
   */
  def marketBigDeal(symbol: String, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(marketBigDealAsync(symbol, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query Big Deal asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @return Future(Any)
   */
  def marketBigDealAsync(symbol: String, limit: Option[Integer] = None): Future[Any] = {
      helper.marketBigDeal(symbol, limit)
  }

  /**
   * Query liq records.
   * 
   *
   * @param symbol Contract type. 
   * @param from From ID. Default: return latest data (optional)
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @param startTime Start timestamp point for result, in millisecond (optional)
   * @param endTime End timestamp point for result, in millisecond (optional)
   * @return Any
   */
  def marketLiqRecords(symbol: String, from: Option[Integer] = None, limit: Option[Integer] = None, startTime: Option[Integer] = None, endTime: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(marketLiqRecordsAsync(symbol, from, limit, startTime, endTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query liq records. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param from From ID. Default: return latest data (optional)
   * @param limit Limit for data size, max size is 1000. Default size is 500 (optional)
   * @param startTime Start timestamp point for result, in millisecond (optional)
   * @param endTime End timestamp point for result, in millisecond (optional)
   * @return Future(Any)
   */
  def marketLiqRecordsAsync(symbol: String, from: Option[Integer] = None, limit: Option[Integer] = None, startTime: Option[Integer] = None, endTime: Option[Integer] = None): Future[Any] = {
      helper.marketLiqRecords(symbol, from, limit, startTime, endTime)
  }

  /**
   * Query Open Interest
   * 
   *
   * @param symbol Contract type. 
   * @param period Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
   * @param limit Limit for data size, max size is 200. Default size is 50 (optional)
   * @return Any
   */
  def marketOpenInterest(symbol: String, period: String, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(marketOpenInterestAsync(symbol, period, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query Open Interest asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param period Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
   * @param limit Limit for data size, max size is 200. Default size is 50 (optional)
   * @return Future(Any)
   */
  def marketOpenInterestAsync(symbol: String, period: String, limit: Option[Integer] = None): Future[Any] = {
      helper.marketOpenInterest(symbol, period, limit)
  }

  /**
   * Get the orderbook.
   * 
   *
   * @param symbol Contract type. 
   * @return Any
   */
  def marketOrderbook(symbol: String): Option[Any] = {
    val await = Try(Await.result(marketOrderbookAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the orderbook. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @return Future(Any)
   */
  def marketOrderbookAsync(symbol: String): Future[Any] = {
      helper.marketOrderbook(symbol)
  }

  /**
   * Get the latest information for symbol.
   * 
   *
   * @param symbol Contract type. (optional)
   * @return Any
   */
  def marketSymbolInfo(symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(marketSymbolInfoAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the latest information for symbol. asynchronously
   * 
   *
   * @param symbol Contract type. (optional)
   * @return Future(Any)
   */
  def marketSymbolInfoAsync(symbol: Option[String] = None): Future[Any] = {
      helper.marketSymbolInfo(symbol)
  }

  /**
   * Get recent trades
   * 
   *
   * @param symbol Contract type. 
   * @param from From ID. Default: return latest data (optional)
   * @param limit Number of results. Default 500; max 1000 (optional)
   * @return Any
   */
  def marketTradingRecords(symbol: String, from: Option[Integer] = None, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(marketTradingRecordsAsync(symbol, from, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get recent trades asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @param from From ID. Default: return latest data (optional)
   * @param limit Number of results. Default 500; max 1000 (optional)
   * @return Future(Any)
   */
  def marketTradingRecordsAsync(symbol: String, from: Option[Integer] = None, limit: Option[Integer] = None): Future[Any] = {
      helper.marketTradingRecords(symbol, from, limit)
  }

}

class MarketApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def marketAccountRatio(symbol: String,
    period: String,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/account-ratio"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketAccountRatio")

    if (period == null) throw new Exception("Missing required parameter 'period' when calling MarketApi->marketAccountRatio")

    queryParams += "symbol" -> symbol.toString
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    queryParams += "period" -> period.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketBigDeal(symbol: String,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/big-deal"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketBigDeal")

    queryParams += "symbol" -> symbol.toString
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketLiqRecords(symbol: String,
    from: Option[Integer] = None,
    limit: Option[Integer] = None,
    startTime: Option[Integer] = None,
    endTime: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/liq-records"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketLiqRecords")

    queryParams += "symbol" -> symbol.toString
    from match {
      case Some(param) => queryParams += "from" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    startTime match {
      case Some(param) => queryParams += "start_time" -> param.toString
      case _ => queryParams
    }
    endTime match {
      case Some(param) => queryParams += "end_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketOpenInterest(symbol: String,
    period: String,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/open-interest"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketOpenInterest")

    if (period == null) throw new Exception("Missing required parameter 'period' when calling MarketApi->marketOpenInterest")

    queryParams += "symbol" -> symbol.toString
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    queryParams += "period" -> period.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketOrderbook(symbol: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/orderBook/L2"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketOrderbook")

    queryParams += "symbol" -> symbol.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketSymbolInfo(symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/tickers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def marketTradingRecords(symbol: String,
    from: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/public/trading-records"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling MarketApi->marketTradingRecords")

    queryParams += "symbol" -> symbol.toString
    from match {
      case Some(param) => queryParams += "from" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
