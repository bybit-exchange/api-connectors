/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class PositionsApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new PositionsApiAsyncHelper(client, config)

  /**
   * Update margin.
   * 
   *
   * @param symbol Contract type which you want update its margin 
   * @param margin New margin you want set 
   * @return Any
   */
  def positionsChangeMargin(symbol: String, margin: String): Option[Any] = {
    val await = Try(Await.result(positionsChangeMarginAsync(symbol, margin), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update margin. asynchronously
   * 
   *
   * @param symbol Contract type which you want update its margin 
   * @param margin New margin you want set 
   * @return Future(Any)
   */
  def positionsChangeMarginAsync(symbol: String, margin: String): Future[Any] = {
      helper.positionsChangeMargin(symbol, margin)
  }

  /**
   * Get user&#39;s closed profit and loss records
   * 
   *
   * @param symbol Contract type 
   * @param startTime Start timestamp point for result, in second (optional)
   * @param endTime End timestamp point for result, in second (optional)
   * @param execType Execution type (optional)
   * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Any
   */
  def positionsClosePnlRecords(symbol: String, startTime: Option[Integer] = None, endTime: Option[Integer] = None, execType: Option[String] = None, page: Option[Integer] = None, limit: Option[Integer] = None): Option[Any] = {
    val await = Try(Await.result(positionsClosePnlRecordsAsync(symbol, startTime, endTime, execType, page, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user&#39;s closed profit and loss records asynchronously
   * 
   *
   * @param symbol Contract type 
   * @param startTime Start timestamp point for result, in second (optional)
   * @param endTime End timestamp point for result, in second (optional)
   * @param execType Execution type (optional)
   * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
   * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
   * @return Future(Any)
   */
  def positionsClosePnlRecordsAsync(symbol: String, startTime: Option[Integer] = None, endTime: Option[Integer] = None, execType: Option[String] = None, page: Option[Integer] = None, limit: Option[Integer] = None): Future[Any] = {
      helper.positionsClosePnlRecords(symbol, startTime, endTime, execType, page, limit)
  }

  /**
   * Get my position list.
   * 
   *
   * @param symbol Contract type which you want update its margin (optional)
   * @return Any
   */
  def positionsMyPosition(symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(positionsMyPositionAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my position list. asynchronously
   * 
   *
   * @param symbol Contract type which you want update its margin (optional)
   * @return Future(Any)
   */
  def positionsMyPositionAsync(symbol: Option[String] = None): Future[Any] = {
      helper.positionsMyPosition(symbol)
  }

  /**
   * Change user leverage.
   * 
   *
   * @param symbol A symbol which you want change its leverage 
   * @param leverage New leverage you want set 
   * @return Any
   */
  def positionsSaveLeverage(symbol: String, leverage: String): Option[Any] = {
    val await = Try(Await.result(positionsSaveLeverageAsync(symbol, leverage), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Change user leverage. asynchronously
   * 
   *
   * @param symbol A symbol which you want change its leverage 
   * @param leverage New leverage you want set 
   * @return Future(Any)
   */
  def positionsSaveLeverageAsync(symbol: String, leverage: String): Future[Any] = {
      helper.positionsSaveLeverage(symbol, leverage)
  }

  /**
   * Set Trading-Stop Condition.
   * 
   *
   * @param symbol Contract type 
   * @param takeProfit Not less than 0, 0 means cancel TP (optional)
   * @param stopLoss Not less than 0, 0 means cancel SL (optional)
   * @param trailingStop Not less than 0, 0 means cancel TS (optional)
   * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
   * @return Any
   */
  def positionsTradingStop(symbol: String, takeProfit: Option[String] = None, stopLoss: Option[String] = None, trailingStop: Option[String] = None, newTrailingActive: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(positionsTradingStopAsync(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set Trading-Stop Condition. asynchronously
   * 
   *
   * @param symbol Contract type 
   * @param takeProfit Not less than 0, 0 means cancel TP (optional)
   * @param stopLoss Not less than 0, 0 means cancel SL (optional)
   * @param trailingStop Not less than 0, 0 means cancel TS (optional)
   * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
   * @return Future(Any)
   */
  def positionsTradingStopAsync(symbol: String, takeProfit: Option[String] = None, stopLoss: Option[String] = None, trailingStop: Option[String] = None, newTrailingActive: Option[String] = None): Future[Any] = {
      helper.positionsTradingStop(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive)
  }

}

class PositionsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def positionsChangeMargin(symbol: String,
    margin: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/position/change-position-margin"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling PositionsApi->positionsChangeMargin")

    if (margin == null) throw new Exception("Missing required parameter 'margin' when calling PositionsApi->positionsChangeMargin")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def positionsClosePnlRecords(symbol: String,
    startTime: Option[Integer] = None,
    endTime: Option[Integer] = None,
    execType: Option[String] = None,
    page: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/trade/closed-pnl/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling PositionsApi->positionsClosePnlRecords")

    queryParams += "symbol" -> symbol.toString
    startTime match {
      case Some(param) => queryParams += "start_time" -> param.toString
      case _ => queryParams
    }
    endTime match {
      case Some(param) => queryParams += "end_time" -> param.toString
      case _ => queryParams
    }
    execType match {
      case Some(param) => queryParams += "exec_type" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def positionsMyPosition(symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/position/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def positionsSaveLeverage(symbol: String,
    leverage: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/user/leverage/save"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling PositionsApi->positionsSaveLeverage")

    if (leverage == null) throw new Exception("Missing required parameter 'leverage' when calling PositionsApi->positionsSaveLeverage")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def positionsTradingStop(symbol: String,
    takeProfit: Option[String] = None,
    stopLoss: Option[String] = None,
    trailingStop: Option[String] = None,
    newTrailingActive: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/open-api/position/trading-stop"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling PositionsApi->positionsTradingStop")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
