/**
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Number
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class OrderApi(
  val defBasePath: String = "https://api-testnet.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new OrderApiAsyncHelper(client, config)

  /**
   * Get my active order list.
   * 
   *
   * @param orderId Order ID 
   * @param symbol Contract type. (optional)
   * @return Any
   */
  def orderCancel(orderId: String, symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderCancelAsync(orderId, symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my active order list. asynchronously
   * 
   *
   * @param orderId Order ID 
   * @param symbol Contract type. (optional)
   * @return Future(Any)
   */
  def orderCancelAsync(orderId: String, symbol: Option[String] = None): Future[Any] = {
      helper.orderCancel(orderId, symbol)
  }

  /**
   * Get my active order list.
   * 
   *
   * @param symbol Contract type. 
   * @return Any
   */
  def orderCancelAll(symbol: String): Option[Any] = {
    val await = Try(Await.result(orderCancelAllAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my active order list. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @return Future(Any)
   */
  def orderCancelAllAsync(symbol: String): Future[Any] = {
      helper.orderCancelAll(symbol)
  }

  /**
   * Get my active order list.
   * 
   *
   * @param orderId Order ID 
   * @param symbol Contract type. (optional)
   * @return Any
   */
  def orderCancelV2(orderId: String, symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderCancelV2Async(orderId, symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my active order list. asynchronously
   * 
   *
   * @param orderId Order ID 
   * @param symbol Contract type. (optional)
   * @return Future(Any)
   */
  def orderCancelV2Async(orderId: String, symbol: Option[String] = None): Future[Any] = {
      helper.orderCancelV2(orderId, symbol)
  }

  /**
   * Get my active order list.
   * 
   *
   * @param orderId Order ID (optional)
   * @param orderLinkId Customized order ID. (optional)
   * @param symbol Contract type. Default BTCUSD (optional)
   * @param order Sort orders by creation date (optional)
   * @param page Page. Default getting first page data (optional)
   * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
   * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
   * @return Any
   */
  def orderGetOrders(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None, order: Option[String] = None, page: Option[Number] = None, limit: Option[Number] = None, orderStatus: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderGetOrdersAsync(orderId, orderLinkId, symbol, order, page, limit, orderStatus), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my active order list. asynchronously
   * 
   *
   * @param orderId Order ID (optional)
   * @param orderLinkId Customized order ID. (optional)
   * @param symbol Contract type. Default BTCUSD (optional)
   * @param order Sort orders by creation date (optional)
   * @param page Page. Default getting first page data (optional)
   * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
   * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
   * @return Future(Any)
   */
  def orderGetOrdersAsync(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None, order: Option[String] = None, page: Option[Number] = None, limit: Option[Number] = None, orderStatus: Option[String] = None): Future[Any] = {
      helper.orderGetOrders(orderId, orderLinkId, symbol, order, page, limit, orderStatus)
  }

  /**
   * Place active order
   * 
   *
   * @param side Side 
   * @param symbol Contract type. 
   * @param orderType Active order type 
   * @param qty  
   * @param price Order price. 
   * @param timeInForce Time in force 
   * @param takeProfit take profit price (optional)
   * @param stopLoss stop loss price (optional)
   * @param reduceOnly reduce only (optional)
   * @param closeOnTrigger close on trigger (optional)
   * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
   * @return Any
   */
  def orderNew(side: String, symbol: String, orderType: String, qty: Number, price: Double, timeInForce: String, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderNewAsync(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Place active order asynchronously
   * 
   *
   * @param side Side 
   * @param symbol Contract type. 
   * @param orderType Active order type 
   * @param qty  
   * @param price Order price. 
   * @param timeInForce Time in force 
   * @param takeProfit take profit price (optional)
   * @param stopLoss stop loss price (optional)
   * @param reduceOnly reduce only (optional)
   * @param closeOnTrigger close on trigger (optional)
   * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
   * @return Future(Any)
   */
  def orderNewAsync(side: String, symbol: String, orderType: String, qty: Number, price: Double, timeInForce: String, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None): Future[Any] = {
      helper.orderNew(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId)
  }

  /**
   * Place active order
   * 
   *
   * @param side Side 
   * @param symbol Contract type. 
   * @param orderType Active order type 
   * @param qty  
   * @param price Order price. 
   * @param timeInForce Time in force 
   * @param takeProfit take profit price (optional)
   * @param stopLoss stop loss price (optional)
   * @param reduceOnly reduce only (optional)
   * @param closeOnTrigger close on trigger (optional)
   * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
   * @param trailingStop Trailing stop. (optional)
   * @return Any
   */
  def orderNewV2(side: String, symbol: String, orderType: String, qty: Number, price: Double, timeInForce: String, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None, trailingStop: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderNewV2Async(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Place active order asynchronously
   * 
   *
   * @param side Side 
   * @param symbol Contract type. 
   * @param orderType Active order type 
   * @param qty  
   * @param price Order price. 
   * @param timeInForce Time in force 
   * @param takeProfit take profit price (optional)
   * @param stopLoss stop loss price (optional)
   * @param reduceOnly reduce only (optional)
   * @param closeOnTrigger close on trigger (optional)
   * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
   * @param trailingStop Trailing stop. (optional)
   * @return Future(Any)
   */
  def orderNewV2Async(side: String, symbol: String, orderType: String, qty: Number, price: Double, timeInForce: String, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None, trailingStop: Option[String] = None): Future[Any] = {
      helper.orderNewV2(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop)
  }

  /**
   * Get my active order list.
   * 
   *
   * @param orderId Order ID (optional)
   * @param symbol Contract type. Default BTCUSD (optional)
   * @return Any
   */
  def orderQuery(orderId: Option[String] = None, symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(orderQueryAsync(orderId, symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my active order list. asynchronously
   * 
   *
   * @param orderId Order ID (optional)
   * @param symbol Contract type. Default BTCUSD (optional)
   * @return Future(Any)
   */
  def orderQueryAsync(orderId: Option[String] = None, symbol: Option[String] = None): Future[Any] = {
      helper.orderQuery(orderId, symbol)
  }

  /**
   * Replace active order. Only incomplete orders can be modified. 
   * 
   *
   * @param orderId Order ID. 
   * @param symbol Contract type. 
   * @param pRQty Order quantity. (optional)
   * @param pRPrice Order price. (optional)
   * @return Any
   */
  def orderReplace(orderId: String, symbol: String, pRQty: Option[Number] = None, pRPrice: Option[Double] = None): Option[Any] = {
    val await = Try(Await.result(orderReplaceAsync(orderId, symbol, pRQty, pRPrice), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Replace active order. Only incomplete orders can be modified.  asynchronously
   * 
   *
   * @param orderId Order ID. 
   * @param symbol Contract type. 
   * @param pRQty Order quantity. (optional)
   * @param pRPrice Order price. (optional)
   * @return Future(Any)
   */
  def orderReplaceAsync(orderId: String, symbol: String, pRQty: Option[Number] = None, pRPrice: Option[Double] = None): Future[Any] = {
      helper.orderReplace(orderId, symbol, pRQty, pRPrice)
  }

}

class OrderApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def orderCancel(orderId: String,
    symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/open-api/order/cancel"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (orderId == null) throw new Exception("Missing required parameter 'orderId' when calling OrderApi->orderCancel")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderCancelAll(symbol: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/order/cancelAll"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling OrderApi->orderCancelAll")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderCancelV2(orderId: String,
    symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/order/cancel"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (orderId == null) throw new Exception("Missing required parameter 'orderId' when calling OrderApi->orderCancelV2")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderGetOrders(orderId: Option[String] = None,
    orderLinkId: Option[String] = None,
    symbol: Option[String] = None,
    order: Option[String] = None,
    page: Option[Number] = None,
    limit: Option[Number] = None,
    orderStatus: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/open-api/order/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    orderId match {
      case Some(param) => queryParams += "order_id" -> param.toString
      case _ => queryParams
    }
    orderLinkId match {
      case Some(param) => queryParams += "order_link_id" -> param.toString
      case _ => queryParams
    }
    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    orderStatus match {
      case Some(param) => queryParams += "order_status" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderNew(side: String,
    symbol: String,
    orderType: String,
    qty: Number,
    price: Double,
    timeInForce: String,
    takeProfit: Option[Double] = None,
    stopLoss: Option[Double] = None,
    reduceOnly: Option[Boolean] = None,
    closeOnTrigger: Option[Boolean] = None,
    orderLinkId: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/open-api/order/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (side == null) throw new Exception("Missing required parameter 'side' when calling OrderApi->orderNew")

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling OrderApi->orderNew")

    if (orderType == null) throw new Exception("Missing required parameter 'orderType' when calling OrderApi->orderNew")

    if (timeInForce == null) throw new Exception("Missing required parameter 'timeInForce' when calling OrderApi->orderNew")

    queryParams += "price" -> price.toString
    takeProfit match {
      case Some(param) => queryParams += "take_profit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderNewV2(side: String,
    symbol: String,
    orderType: String,
    qty: Number,
    price: Double,
    timeInForce: String,
    takeProfit: Option[Double] = None,
    stopLoss: Option[Double] = None,
    reduceOnly: Option[Boolean] = None,
    closeOnTrigger: Option[Boolean] = None,
    orderLinkId: Option[String] = None,
    trailingStop: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/order/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (side == null) throw new Exception("Missing required parameter 'side' when calling OrderApi->orderNewV2")

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling OrderApi->orderNewV2")

    if (orderType == null) throw new Exception("Missing required parameter 'orderType' when calling OrderApi->orderNewV2")

    if (timeInForce == null) throw new Exception("Missing required parameter 'timeInForce' when calling OrderApi->orderNewV2")

    queryParams += "price" -> price.toString
    takeProfit match {
      case Some(param) => queryParams += "take_profit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderQuery(orderId: Option[String] = None,
    symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/v2/private/order"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    orderId match {
      case Some(param) => queryParams += "order_id" -> param.toString
      case _ => queryParams
    }
    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def orderReplace(orderId: String,
    symbol: String,
    pRQty: Option[Number] = None,
    pRPrice: Option[Double] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/open-api/order/replace"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (orderId == null) throw new Exception("Missing required parameter 'orderId' when calling OrderApi->orderReplace")

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling OrderApi->orderReplace")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
