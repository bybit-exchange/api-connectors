# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SymbolTickInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'bid_price': 'str',
        'ask_price': 'str',
        'last_price': 'str',
        'last_tick_direction': 'str',
        'prev_price_24h': 'str',
        'price_24h_pcnt': 'str',
        'high_price_24h': 'str',
        'low_price_24h': 'str',
        'prev_price_1h': 'str',
        'price_1h_pcnt': 'str',
        'mark_price': 'str',
        'index_price': 'str',
        'open_interest': 'float',
        'open_value': 'str',
        'total_turnover': 'str',
        'turnover_24h': 'str',
        'total_volume': 'float',
        'volume_24h': 'float',
        'funding_rate': 'str',
        'predicted_funding_rate': 'str',
        'next_funding_time': 'str',
        'countdown_hour': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'bid_price': 'bid_price',
        'ask_price': 'ask_price',
        'last_price': 'last_price',
        'last_tick_direction': 'last_tick_direction',
        'prev_price_24h': 'prev_price_24h',
        'price_24h_pcnt': 'price_24h_pcnt',
        'high_price_24h': 'high_price_24h',
        'low_price_24h': 'low_price_24h',
        'prev_price_1h': 'prev_price_1h',
        'price_1h_pcnt': 'price_1h_pcnt',
        'mark_price': 'mark_price',
        'index_price': 'index_price',
        'open_interest': 'open_interest',
        'open_value': 'open_value',
        'total_turnover': 'total_turnover',
        'turnover_24h': 'turnover_24h',
        'total_volume': 'total_volume',
        'volume_24h': 'volume_24h',
        'funding_rate': 'funding_rate',
        'predicted_funding_rate': 'predicted_funding_rate',
        'next_funding_time': 'next_funding_time',
        'countdown_hour': 'countdown_hour'
    }

    def __init__(self, symbol=None, bid_price=None, ask_price=None, last_price=None, last_tick_direction=None, prev_price_24h=None, price_24h_pcnt=None, high_price_24h=None, low_price_24h=None, prev_price_1h=None, price_1h_pcnt=None, mark_price=None, index_price=None, open_interest=None, open_value=None, total_turnover=None, turnover_24h=None, total_volume=None, volume_24h=None, funding_rate=None, predicted_funding_rate=None, next_funding_time=None, countdown_hour=None):  # noqa: E501
        """SymbolTickInfo - a model defined in Swagger"""  # noqa: E501

        self._symbol = None
        self._bid_price = None
        self._ask_price = None
        self._last_price = None
        self._last_tick_direction = None
        self._prev_price_24h = None
        self._price_24h_pcnt = None
        self._high_price_24h = None
        self._low_price_24h = None
        self._prev_price_1h = None
        self._price_1h_pcnt = None
        self._mark_price = None
        self._index_price = None
        self._open_interest = None
        self._open_value = None
        self._total_turnover = None
        self._turnover_24h = None
        self._total_volume = None
        self._volume_24h = None
        self._funding_rate = None
        self._predicted_funding_rate = None
        self._next_funding_time = None
        self._countdown_hour = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if bid_price is not None:
            self.bid_price = bid_price
        if ask_price is not None:
            self.ask_price = ask_price
        if last_price is not None:
            self.last_price = last_price
        if last_tick_direction is not None:
            self.last_tick_direction = last_tick_direction
        if prev_price_24h is not None:
            self.prev_price_24h = prev_price_24h
        if price_24h_pcnt is not None:
            self.price_24h_pcnt = price_24h_pcnt
        if high_price_24h is not None:
            self.high_price_24h = high_price_24h
        if low_price_24h is not None:
            self.low_price_24h = low_price_24h
        if prev_price_1h is not None:
            self.prev_price_1h = prev_price_1h
        if price_1h_pcnt is not None:
            self.price_1h_pcnt = price_1h_pcnt
        if mark_price is not None:
            self.mark_price = mark_price
        if index_price is not None:
            self.index_price = index_price
        if open_interest is not None:
            self.open_interest = open_interest
        if open_value is not None:
            self.open_value = open_value
        if total_turnover is not None:
            self.total_turnover = total_turnover
        if turnover_24h is not None:
            self.turnover_24h = turnover_24h
        if total_volume is not None:
            self.total_volume = total_volume
        if volume_24h is not None:
            self.volume_24h = volume_24h
        if funding_rate is not None:
            self.funding_rate = funding_rate
        if predicted_funding_rate is not None:
            self.predicted_funding_rate = predicted_funding_rate
        if next_funding_time is not None:
            self.next_funding_time = next_funding_time
        if countdown_hour is not None:
            self.countdown_hour = countdown_hour

    @property
    def symbol(self):
        """Gets the symbol of this SymbolTickInfo.  # noqa: E501


        :return: The symbol of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SymbolTickInfo.


        :param symbol: The symbol of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def bid_price(self):
        """Gets the bid_price of this SymbolTickInfo.  # noqa: E501


        :return: The bid_price of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """Sets the bid_price of this SymbolTickInfo.


        :param bid_price: The bid_price of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._bid_price = bid_price

    @property
    def ask_price(self):
        """Gets the ask_price of this SymbolTickInfo.  # noqa: E501


        :return: The ask_price of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._ask_price

    @ask_price.setter
    def ask_price(self, ask_price):
        """Sets the ask_price of this SymbolTickInfo.


        :param ask_price: The ask_price of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._ask_price = ask_price

    @property
    def last_price(self):
        """Gets the last_price of this SymbolTickInfo.  # noqa: E501


        :return: The last_price of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this SymbolTickInfo.


        :param last_price: The last_price of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._last_price = last_price

    @property
    def last_tick_direction(self):
        """Gets the last_tick_direction of this SymbolTickInfo.  # noqa: E501


        :return: The last_tick_direction of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_tick_direction

    @last_tick_direction.setter
    def last_tick_direction(self, last_tick_direction):
        """Sets the last_tick_direction of this SymbolTickInfo.


        :param last_tick_direction: The last_tick_direction of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._last_tick_direction = last_tick_direction

    @property
    def prev_price_24h(self):
        """Gets the prev_price_24h of this SymbolTickInfo.  # noqa: E501


        :return: The prev_price_24h of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._prev_price_24h

    @prev_price_24h.setter
    def prev_price_24h(self, prev_price_24h):
        """Sets the prev_price_24h of this SymbolTickInfo.


        :param prev_price_24h: The prev_price_24h of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._prev_price_24h = prev_price_24h

    @property
    def price_24h_pcnt(self):
        """Gets the price_24h_pcnt of this SymbolTickInfo.  # noqa: E501


        :return: The price_24h_pcnt of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._price_24h_pcnt

    @price_24h_pcnt.setter
    def price_24h_pcnt(self, price_24h_pcnt):
        """Sets the price_24h_pcnt of this SymbolTickInfo.


        :param price_24h_pcnt: The price_24h_pcnt of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._price_24h_pcnt = price_24h_pcnt

    @property
    def high_price_24h(self):
        """Gets the high_price_24h of this SymbolTickInfo.  # noqa: E501


        :return: The high_price_24h of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._high_price_24h

    @high_price_24h.setter
    def high_price_24h(self, high_price_24h):
        """Sets the high_price_24h of this SymbolTickInfo.


        :param high_price_24h: The high_price_24h of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._high_price_24h = high_price_24h

    @property
    def low_price_24h(self):
        """Gets the low_price_24h of this SymbolTickInfo.  # noqa: E501


        :return: The low_price_24h of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._low_price_24h

    @low_price_24h.setter
    def low_price_24h(self, low_price_24h):
        """Sets the low_price_24h of this SymbolTickInfo.


        :param low_price_24h: The low_price_24h of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._low_price_24h = low_price_24h

    @property
    def prev_price_1h(self):
        """Gets the prev_price_1h of this SymbolTickInfo.  # noqa: E501


        :return: The prev_price_1h of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._prev_price_1h

    @prev_price_1h.setter
    def prev_price_1h(self, prev_price_1h):
        """Sets the prev_price_1h of this SymbolTickInfo.


        :param prev_price_1h: The prev_price_1h of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._prev_price_1h = prev_price_1h

    @property
    def price_1h_pcnt(self):
        """Gets the price_1h_pcnt of this SymbolTickInfo.  # noqa: E501


        :return: The price_1h_pcnt of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._price_1h_pcnt

    @price_1h_pcnt.setter
    def price_1h_pcnt(self, price_1h_pcnt):
        """Sets the price_1h_pcnt of this SymbolTickInfo.


        :param price_1h_pcnt: The price_1h_pcnt of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._price_1h_pcnt = price_1h_pcnt

    @property
    def mark_price(self):
        """Gets the mark_price of this SymbolTickInfo.  # noqa: E501


        :return: The mark_price of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """Sets the mark_price of this SymbolTickInfo.


        :param mark_price: The mark_price of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._mark_price = mark_price

    @property
    def index_price(self):
        """Gets the index_price of this SymbolTickInfo.  # noqa: E501


        :return: The index_price of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._index_price

    @index_price.setter
    def index_price(self, index_price):
        """Sets the index_price of this SymbolTickInfo.


        :param index_price: The index_price of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._index_price = index_price

    @property
    def open_interest(self):
        """Gets the open_interest of this SymbolTickInfo.  # noqa: E501


        :return: The open_interest of this SymbolTickInfo.  # noqa: E501
        :rtype: float
        """
        return self._open_interest

    @open_interest.setter
    def open_interest(self, open_interest):
        """Sets the open_interest of this SymbolTickInfo.


        :param open_interest: The open_interest of this SymbolTickInfo.  # noqa: E501
        :type: float
        """

        self._open_interest = open_interest

    @property
    def open_value(self):
        """Gets the open_value of this SymbolTickInfo.  # noqa: E501


        :return: The open_value of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._open_value

    @open_value.setter
    def open_value(self, open_value):
        """Sets the open_value of this SymbolTickInfo.


        :param open_value: The open_value of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._open_value = open_value

    @property
    def total_turnover(self):
        """Gets the total_turnover of this SymbolTickInfo.  # noqa: E501


        :return: The total_turnover of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_turnover

    @total_turnover.setter
    def total_turnover(self, total_turnover):
        """Sets the total_turnover of this SymbolTickInfo.


        :param total_turnover: The total_turnover of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._total_turnover = total_turnover

    @property
    def turnover_24h(self):
        """Gets the turnover_24h of this SymbolTickInfo.  # noqa: E501


        :return: The turnover_24h of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._turnover_24h

    @turnover_24h.setter
    def turnover_24h(self, turnover_24h):
        """Sets the turnover_24h of this SymbolTickInfo.


        :param turnover_24h: The turnover_24h of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._turnover_24h = turnover_24h

    @property
    def total_volume(self):
        """Gets the total_volume of this SymbolTickInfo.  # noqa: E501


        :return: The total_volume of this SymbolTickInfo.  # noqa: E501
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this SymbolTickInfo.


        :param total_volume: The total_volume of this SymbolTickInfo.  # noqa: E501
        :type: float
        """

        self._total_volume = total_volume

    @property
    def volume_24h(self):
        """Gets the volume_24h of this SymbolTickInfo.  # noqa: E501


        :return: The volume_24h of this SymbolTickInfo.  # noqa: E501
        :rtype: float
        """
        return self._volume_24h

    @volume_24h.setter
    def volume_24h(self, volume_24h):
        """Sets the volume_24h of this SymbolTickInfo.


        :param volume_24h: The volume_24h of this SymbolTickInfo.  # noqa: E501
        :type: float
        """

        self._volume_24h = volume_24h

    @property
    def funding_rate(self):
        """Gets the funding_rate of this SymbolTickInfo.  # noqa: E501


        :return: The funding_rate of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._funding_rate

    @funding_rate.setter
    def funding_rate(self, funding_rate):
        """Sets the funding_rate of this SymbolTickInfo.


        :param funding_rate: The funding_rate of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._funding_rate = funding_rate

    @property
    def predicted_funding_rate(self):
        """Gets the predicted_funding_rate of this SymbolTickInfo.  # noqa: E501


        :return: The predicted_funding_rate of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._predicted_funding_rate

    @predicted_funding_rate.setter
    def predicted_funding_rate(self, predicted_funding_rate):
        """Sets the predicted_funding_rate of this SymbolTickInfo.


        :param predicted_funding_rate: The predicted_funding_rate of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._predicted_funding_rate = predicted_funding_rate

    @property
    def next_funding_time(self):
        """Gets the next_funding_time of this SymbolTickInfo.  # noqa: E501


        :return: The next_funding_time of this SymbolTickInfo.  # noqa: E501
        :rtype: str
        """
        return self._next_funding_time

    @next_funding_time.setter
    def next_funding_time(self, next_funding_time):
        """Sets the next_funding_time of this SymbolTickInfo.


        :param next_funding_time: The next_funding_time of this SymbolTickInfo.  # noqa: E501
        :type: str
        """

        self._next_funding_time = next_funding_time

    @property
    def countdown_hour(self):
        """Gets the countdown_hour of this SymbolTickInfo.  # noqa: E501


        :return: The countdown_hour of this SymbolTickInfo.  # noqa: E501
        :rtype: float
        """
        return self._countdown_hour

    @countdown_hour.setter
    def countdown_hour(self, countdown_hour):
        """Sets the countdown_hour of this SymbolTickInfo.


        :param countdown_hour: The countdown_hour of this SymbolTickInfo.  # noqa: E501
        :type: float
        """

        self._countdown_hour = countdown_hour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SymbolTickInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolTickInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
