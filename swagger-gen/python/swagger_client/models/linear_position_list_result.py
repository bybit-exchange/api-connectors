# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LinearPositionListResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bust_price': 'float',
        'cum_realised_pnl': 'float',
        'entry_price': 'float',
        'free_qty': 'float',
        'leverage': 'float',
        'liq_price': 'float',
        'occ_closing_fee': 'float',
        'position_margin': 'float',
        'position_value': 'float',
        'realised_pnl': 'float',
        'side': 'str',
        'size': 'float',
        'symbol': 'str',
        'user_id': 'int',
        'tp_sl_mode': 'str'
    }

    attribute_map = {
        'bust_price': 'bust_price',
        'cum_realised_pnl': 'cum_realised_pnl',
        'entry_price': 'entry_price',
        'free_qty': 'free_qty',
        'leverage': 'leverage',
        'liq_price': 'liq_price',
        'occ_closing_fee': 'occ_closing_fee',
        'position_margin': 'position_margin',
        'position_value': 'position_value',
        'realised_pnl': 'realised_pnl',
        'side': 'side',
        'size': 'size',
        'symbol': 'symbol',
        'user_id': 'user_id',
        'tp_sl_mode': 'tp_sl_mode'
    }

    def __init__(self, bust_price=None, cum_realised_pnl=None, entry_price=None, free_qty=None, leverage=None, liq_price=None, occ_closing_fee=None, position_margin=None, position_value=None, realised_pnl=None, side=None, size=None, symbol=None, user_id=None, tp_sl_mode=None):  # noqa: E501
        """LinearPositionListResult - a model defined in Swagger"""  # noqa: E501

        self._bust_price = None
        self._cum_realised_pnl = None
        self._entry_price = None
        self._free_qty = None
        self._leverage = None
        self._liq_price = None
        self._occ_closing_fee = None
        self._position_margin = None
        self._position_value = None
        self._realised_pnl = None
        self._side = None
        self._size = None
        self._symbol = None
        self._user_id = None
        self._tp_sl_mode = None
        self.discriminator = None

        if bust_price is not None:
            self.bust_price = bust_price
        if cum_realised_pnl is not None:
            self.cum_realised_pnl = cum_realised_pnl
        if entry_price is not None:
            self.entry_price = entry_price
        if free_qty is not None:
            self.free_qty = free_qty
        if leverage is not None:
            self.leverage = leverage
        if liq_price is not None:
            self.liq_price = liq_price
        if occ_closing_fee is not None:
            self.occ_closing_fee = occ_closing_fee
        if position_margin is not None:
            self.position_margin = position_margin
        if position_value is not None:
            self.position_value = position_value
        if realised_pnl is not None:
            self.realised_pnl = realised_pnl
        if side is not None:
            self.side = side
        if size is not None:
            self.size = size
        if symbol is not None:
            self.symbol = symbol
        if user_id is not None:
            self.user_id = user_id
        if tp_sl_mode is not None:
            self.tp_sl_mode = tp_sl_mode

    @property
    def bust_price(self):
        """Gets the bust_price of this LinearPositionListResult.  # noqa: E501


        :return: The bust_price of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._bust_price

    @bust_price.setter
    def bust_price(self, bust_price):
        """Sets the bust_price of this LinearPositionListResult.


        :param bust_price: The bust_price of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._bust_price = bust_price

    @property
    def cum_realised_pnl(self):
        """Gets the cum_realised_pnl of this LinearPositionListResult.  # noqa: E501


        :return: The cum_realised_pnl of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._cum_realised_pnl

    @cum_realised_pnl.setter
    def cum_realised_pnl(self, cum_realised_pnl):
        """Sets the cum_realised_pnl of this LinearPositionListResult.


        :param cum_realised_pnl: The cum_realised_pnl of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._cum_realised_pnl = cum_realised_pnl

    @property
    def entry_price(self):
        """Gets the entry_price of this LinearPositionListResult.  # noqa: E501


        :return: The entry_price of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._entry_price

    @entry_price.setter
    def entry_price(self, entry_price):
        """Sets the entry_price of this LinearPositionListResult.


        :param entry_price: The entry_price of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._entry_price = entry_price

    @property
    def free_qty(self):
        """Gets the free_qty of this LinearPositionListResult.  # noqa: E501


        :return: The free_qty of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._free_qty

    @free_qty.setter
    def free_qty(self, free_qty):
        """Sets the free_qty of this LinearPositionListResult.


        :param free_qty: The free_qty of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._free_qty = free_qty

    @property
    def leverage(self):
        """Gets the leverage of this LinearPositionListResult.  # noqa: E501


        :return: The leverage of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this LinearPositionListResult.


        :param leverage: The leverage of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._leverage = leverage

    @property
    def liq_price(self):
        """Gets the liq_price of this LinearPositionListResult.  # noqa: E501


        :return: The liq_price of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._liq_price

    @liq_price.setter
    def liq_price(self, liq_price):
        """Sets the liq_price of this LinearPositionListResult.


        :param liq_price: The liq_price of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._liq_price = liq_price

    @property
    def occ_closing_fee(self):
        """Gets the occ_closing_fee of this LinearPositionListResult.  # noqa: E501


        :return: The occ_closing_fee of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._occ_closing_fee

    @occ_closing_fee.setter
    def occ_closing_fee(self, occ_closing_fee):
        """Sets the occ_closing_fee of this LinearPositionListResult.


        :param occ_closing_fee: The occ_closing_fee of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._occ_closing_fee = occ_closing_fee

    @property
    def position_margin(self):
        """Gets the position_margin of this LinearPositionListResult.  # noqa: E501


        :return: The position_margin of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._position_margin

    @position_margin.setter
    def position_margin(self, position_margin):
        """Sets the position_margin of this LinearPositionListResult.


        :param position_margin: The position_margin of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._position_margin = position_margin

    @property
    def position_value(self):
        """Gets the position_value of this LinearPositionListResult.  # noqa: E501


        :return: The position_value of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._position_value

    @position_value.setter
    def position_value(self, position_value):
        """Sets the position_value of this LinearPositionListResult.


        :param position_value: The position_value of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._position_value = position_value

    @property
    def realised_pnl(self):
        """Gets the realised_pnl of this LinearPositionListResult.  # noqa: E501


        :return: The realised_pnl of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._realised_pnl

    @realised_pnl.setter
    def realised_pnl(self, realised_pnl):
        """Sets the realised_pnl of this LinearPositionListResult.


        :param realised_pnl: The realised_pnl of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._realised_pnl = realised_pnl

    @property
    def side(self):
        """Gets the side of this LinearPositionListResult.  # noqa: E501


        :return: The side of this LinearPositionListResult.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this LinearPositionListResult.


        :param side: The side of this LinearPositionListResult.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def size(self):
        """Gets the size of this LinearPositionListResult.  # noqa: E501


        :return: The size of this LinearPositionListResult.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LinearPositionListResult.


        :param size: The size of this LinearPositionListResult.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def symbol(self):
        """Gets the symbol of this LinearPositionListResult.  # noqa: E501


        :return: The symbol of this LinearPositionListResult.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this LinearPositionListResult.


        :param symbol: The symbol of this LinearPositionListResult.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def user_id(self):
        """Gets the user_id of this LinearPositionListResult.  # noqa: E501


        :return: The user_id of this LinearPositionListResult.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LinearPositionListResult.


        :param user_id: The user_id of this LinearPositionListResult.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def tp_sl_mode(self):
        """Gets the tp_sl_mode of this LinearPositionListResult.  # noqa: E501


        :return: The tp_sl_mode of this LinearPositionListResult.  # noqa: E501
        :rtype: str
        """
        return self._tp_sl_mode

    @tp_sl_mode.setter
    def tp_sl_mode(self, tp_sl_mode):
        """Sets the tp_sl_mode of this LinearPositionListResult.


        :param tp_sl_mode: The tp_sl_mode of this LinearPositionListResult.  # noqa: E501
        :type: str
        """

        self._tp_sl_mode = tp_sl_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinearPositionListResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinearPositionListResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
