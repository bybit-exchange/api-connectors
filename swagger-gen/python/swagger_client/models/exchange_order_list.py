# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExchangeOrderList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_coin': 'str',
        'to_coin': 'str',
        'from_amount': 'float',
        'to_amount': 'float',
        'exchange_rate': 'float',
        'from_fee': 'float',
        'created_at': 'str'
    }

    attribute_map = {
        'from_coin': 'from_coin',
        'to_coin': 'to_coin',
        'from_amount': 'from_amount',
        'to_amount': 'to_amount',
        'exchange_rate': 'exchange_rate',
        'from_fee': 'from_fee',
        'created_at': 'created_at'
    }

    def __init__(self, from_coin=None, to_coin=None, from_amount=None, to_amount=None, exchange_rate=None, from_fee=None, created_at=None):  # noqa: E501
        """ExchangeOrderList - a model defined in Swagger"""  # noqa: E501

        self._from_coin = None
        self._to_coin = None
        self._from_amount = None
        self._to_amount = None
        self._exchange_rate = None
        self._from_fee = None
        self._created_at = None
        self.discriminator = None

        if from_coin is not None:
            self.from_coin = from_coin
        if to_coin is not None:
            self.to_coin = to_coin
        if from_amount is not None:
            self.from_amount = from_amount
        if to_amount is not None:
            self.to_amount = to_amount
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if from_fee is not None:
            self.from_fee = from_fee
        if created_at is not None:
            self.created_at = created_at

    @property
    def from_coin(self):
        """Gets the from_coin of this ExchangeOrderList.  # noqa: E501


        :return: The from_coin of this ExchangeOrderList.  # noqa: E501
        :rtype: str
        """
        return self._from_coin

    @from_coin.setter
    def from_coin(self, from_coin):
        """Sets the from_coin of this ExchangeOrderList.


        :param from_coin: The from_coin of this ExchangeOrderList.  # noqa: E501
        :type: str
        """

        self._from_coin = from_coin

    @property
    def to_coin(self):
        """Gets the to_coin of this ExchangeOrderList.  # noqa: E501


        :return: The to_coin of this ExchangeOrderList.  # noqa: E501
        :rtype: str
        """
        return self._to_coin

    @to_coin.setter
    def to_coin(self, to_coin):
        """Sets the to_coin of this ExchangeOrderList.


        :param to_coin: The to_coin of this ExchangeOrderList.  # noqa: E501
        :type: str
        """

        self._to_coin = to_coin

    @property
    def from_amount(self):
        """Gets the from_amount of this ExchangeOrderList.  # noqa: E501


        :return: The from_amount of this ExchangeOrderList.  # noqa: E501
        :rtype: float
        """
        return self._from_amount

    @from_amount.setter
    def from_amount(self, from_amount):
        """Sets the from_amount of this ExchangeOrderList.


        :param from_amount: The from_amount of this ExchangeOrderList.  # noqa: E501
        :type: float
        """

        self._from_amount = from_amount

    @property
    def to_amount(self):
        """Gets the to_amount of this ExchangeOrderList.  # noqa: E501


        :return: The to_amount of this ExchangeOrderList.  # noqa: E501
        :rtype: float
        """
        return self._to_amount

    @to_amount.setter
    def to_amount(self, to_amount):
        """Sets the to_amount of this ExchangeOrderList.


        :param to_amount: The to_amount of this ExchangeOrderList.  # noqa: E501
        :type: float
        """

        self._to_amount = to_amount

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ExchangeOrderList.  # noqa: E501


        :return: The exchange_rate of this ExchangeOrderList.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ExchangeOrderList.


        :param exchange_rate: The exchange_rate of this ExchangeOrderList.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def from_fee(self):
        """Gets the from_fee of this ExchangeOrderList.  # noqa: E501


        :return: The from_fee of this ExchangeOrderList.  # noqa: E501
        :rtype: float
        """
        return self._from_fee

    @from_fee.setter
    def from_fee(self, from_fee):
        """Sets the from_fee of this ExchangeOrderList.


        :param from_fee: The from_fee of this ExchangeOrderList.  # noqa: E501
        :type: float
        """

        self._from_fee = from_fee

    @property
    def created_at(self):
        """Gets the created_at of this ExchangeOrderList.  # noqa: E501


        :return: The created_at of this ExchangeOrderList.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExchangeOrderList.


        :param created_at: The created_at of this ExchangeOrderList.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeOrderList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeOrderList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
