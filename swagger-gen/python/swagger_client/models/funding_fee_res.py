# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FundingFeeRes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'side': 'str',
        'size': 'float',
        'funding_rate': 'str',
        'exec_fee': 'float',
        'exec_timestamp': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'side': 'side',
        'size': 'size',
        'funding_rate': 'funding_rate',
        'exec_fee': 'exec_fee',
        'exec_timestamp': 'exec_timestamp'
    }

    def __init__(self, symbol=None, side=None, size=None, funding_rate=None, exec_fee=None, exec_timestamp=None):  # noqa: E501
        """FundingFeeRes - a model defined in Swagger"""  # noqa: E501

        self._symbol = None
        self._side = None
        self._size = None
        self._funding_rate = None
        self._exec_fee = None
        self._exec_timestamp = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if side is not None:
            self.side = side
        if size is not None:
            self.size = size
        if funding_rate is not None:
            self.funding_rate = funding_rate
        if exec_fee is not None:
            self.exec_fee = exec_fee
        if exec_timestamp is not None:
            self.exec_timestamp = exec_timestamp

    @property
    def symbol(self):
        """Gets the symbol of this FundingFeeRes.  # noqa: E501


        :return: The symbol of this FundingFeeRes.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this FundingFeeRes.


        :param symbol: The symbol of this FundingFeeRes.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def side(self):
        """Gets the side of this FundingFeeRes.  # noqa: E501


        :return: The side of this FundingFeeRes.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this FundingFeeRes.


        :param side: The side of this FundingFeeRes.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def size(self):
        """Gets the size of this FundingFeeRes.  # noqa: E501


        :return: The size of this FundingFeeRes.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FundingFeeRes.


        :param size: The size of this FundingFeeRes.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def funding_rate(self):
        """Gets the funding_rate of this FundingFeeRes.  # noqa: E501


        :return: The funding_rate of this FundingFeeRes.  # noqa: E501
        :rtype: str
        """
        return self._funding_rate

    @funding_rate.setter
    def funding_rate(self, funding_rate):
        """Sets the funding_rate of this FundingFeeRes.


        :param funding_rate: The funding_rate of this FundingFeeRes.  # noqa: E501
        :type: str
        """

        self._funding_rate = funding_rate

    @property
    def exec_fee(self):
        """Gets the exec_fee of this FundingFeeRes.  # noqa: E501


        :return: The exec_fee of this FundingFeeRes.  # noqa: E501
        :rtype: float
        """
        return self._exec_fee

    @exec_fee.setter
    def exec_fee(self, exec_fee):
        """Sets the exec_fee of this FundingFeeRes.


        :param exec_fee: The exec_fee of this FundingFeeRes.  # noqa: E501
        :type: float
        """

        self._exec_fee = exec_fee

    @property
    def exec_timestamp(self):
        """Gets the exec_timestamp of this FundingFeeRes.  # noqa: E501


        :return: The exec_timestamp of this FundingFeeRes.  # noqa: E501
        :rtype: float
        """
        return self._exec_timestamp

    @exec_timestamp.setter
    def exec_timestamp(self, exec_timestamp):
        """Sets the exec_timestamp of this FundingFeeRes.


        :param exec_timestamp: The exec_timestamp of this FundingFeeRes.  # noqa: E501
        :type: float
        """

        self._exec_timestamp = exec_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundingFeeRes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundingFeeRes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
