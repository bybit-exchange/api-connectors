# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class APIKeyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'user_id': 'float',
        'ips': 'list[str]',
        'note': 'str',
        'permissions': 'list[str]',
        'created_at': 'str',
        'read_only': 'bool'
    }

    attribute_map = {
        'api_key': 'api_key',
        'user_id': 'user_id',
        'ips': 'ips',
        'note': 'note',
        'permissions': 'permissions',
        'created_at': 'created_at',
        'read_only': 'read_only'
    }

    def __init__(self, api_key=None, user_id=None, ips=None, note=None, permissions=None, created_at=None, read_only=None):  # noqa: E501
        """APIKeyInfo - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._user_id = None
        self._ips = None
        self._note = None
        self._permissions = None
        self._created_at = None
        self._read_only = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if user_id is not None:
            self.user_id = user_id
        if ips is not None:
            self.ips = ips
        if note is not None:
            self.note = note
        if permissions is not None:
            self.permissions = permissions
        if created_at is not None:
            self.created_at = created_at
        if read_only is not None:
            self.read_only = read_only

    @property
    def api_key(self):
        """Gets the api_key of this APIKeyInfo.  # noqa: E501


        :return: The api_key of this APIKeyInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APIKeyInfo.


        :param api_key: The api_key of this APIKeyInfo.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def user_id(self):
        """Gets the user_id of this APIKeyInfo.  # noqa: E501


        :return: The user_id of this APIKeyInfo.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this APIKeyInfo.


        :param user_id: The user_id of this APIKeyInfo.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def ips(self):
        """Gets the ips of this APIKeyInfo.  # noqa: E501


        :return: The ips of this APIKeyInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this APIKeyInfo.


        :param ips: The ips of this APIKeyInfo.  # noqa: E501
        :type: list[str]
        """

        self._ips = ips

    @property
    def note(self):
        """Gets the note of this APIKeyInfo.  # noqa: E501


        :return: The note of this APIKeyInfo.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this APIKeyInfo.


        :param note: The note of this APIKeyInfo.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def permissions(self):
        """Gets the permissions of this APIKeyInfo.  # noqa: E501


        :return: The permissions of this APIKeyInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this APIKeyInfo.


        :param permissions: The permissions of this APIKeyInfo.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def created_at(self):
        """Gets the created_at of this APIKeyInfo.  # noqa: E501


        :return: The created_at of this APIKeyInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this APIKeyInfo.


        :param created_at: The created_at of this APIKeyInfo.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def read_only(self):
        """Gets the read_only of this APIKeyInfo.  # noqa: E501


        :return: The read_only of this APIKeyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this APIKeyInfo.


        :param read_only: The read_only of this APIKeyInfo.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIKeyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIKeyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
