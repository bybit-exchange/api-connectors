# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConditionalCancelAllRes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cl_ord_id': 'str',
        'user_id': 'float',
        'symbol': 'str',
        'side': 'str',
        'order_type': 'str',
        'price': 'str',
        'qty': 'float',
        'time_in_force': 'str',
        'create_type': 'str',
        'cancel_type': 'str',
        'order_status': 'str',
        'leaves_qty': 'float',
        'leaves_value': 'str',
        'cross_seq': 'float',
        'stop_order_type': 'str',
        'trigger_by': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'cl_ord_id': 'clOrdID',
        'user_id': 'user_id',
        'symbol': 'symbol',
        'side': 'side',
        'order_type': 'order_type',
        'price': 'price',
        'qty': 'qty',
        'time_in_force': 'time_in_force',
        'create_type': 'create_type',
        'cancel_type': 'cancel_type',
        'order_status': 'order_status',
        'leaves_qty': 'leaves_qty',
        'leaves_value': 'leaves_value',
        'cross_seq': 'cross_seq',
        'stop_order_type': 'stop_order_type',
        'trigger_by': 'trigger_by',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, cl_ord_id=None, user_id=None, symbol=None, side=None, order_type=None, price=None, qty=None, time_in_force=None, create_type=None, cancel_type=None, order_status=None, leaves_qty=None, leaves_value=None, cross_seq=None, stop_order_type=None, trigger_by=None, created_at=None, updated_at=None):  # noqa: E501
        """ConditionalCancelAllRes - a model defined in Swagger"""  # noqa: E501

        self._cl_ord_id = None
        self._user_id = None
        self._symbol = None
        self._side = None
        self._order_type = None
        self._price = None
        self._qty = None
        self._time_in_force = None
        self._create_type = None
        self._cancel_type = None
        self._order_status = None
        self._leaves_qty = None
        self._leaves_value = None
        self._cross_seq = None
        self._stop_order_type = None
        self._trigger_by = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if cl_ord_id is not None:
            self.cl_ord_id = cl_ord_id
        if user_id is not None:
            self.user_id = user_id
        if symbol is not None:
            self.symbol = symbol
        if side is not None:
            self.side = side
        if order_type is not None:
            self.order_type = order_type
        if price is not None:
            self.price = price
        if qty is not None:
            self.qty = qty
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if create_type is not None:
            self.create_type = create_type
        if cancel_type is not None:
            self.cancel_type = cancel_type
        if order_status is not None:
            self.order_status = order_status
        if leaves_qty is not None:
            self.leaves_qty = leaves_qty
        if leaves_value is not None:
            self.leaves_value = leaves_value
        if cross_seq is not None:
            self.cross_seq = cross_seq
        if stop_order_type is not None:
            self.stop_order_type = stop_order_type
        if trigger_by is not None:
            self.trigger_by = trigger_by
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def cl_ord_id(self):
        """Gets the cl_ord_id of this ConditionalCancelAllRes.  # noqa: E501


        :return: The cl_ord_id of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._cl_ord_id

    @cl_ord_id.setter
    def cl_ord_id(self, cl_ord_id):
        """Sets the cl_ord_id of this ConditionalCancelAllRes.


        :param cl_ord_id: The cl_ord_id of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._cl_ord_id = cl_ord_id

    @property
    def user_id(self):
        """Gets the user_id of this ConditionalCancelAllRes.  # noqa: E501


        :return: The user_id of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConditionalCancelAllRes.


        :param user_id: The user_id of this ConditionalCancelAllRes.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def symbol(self):
        """Gets the symbol of this ConditionalCancelAllRes.  # noqa: E501


        :return: The symbol of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ConditionalCancelAllRes.


        :param symbol: The symbol of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def side(self):
        """Gets the side of this ConditionalCancelAllRes.  # noqa: E501


        :return: The side of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ConditionalCancelAllRes.


        :param side: The side of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def order_type(self):
        """Gets the order_type of this ConditionalCancelAllRes.  # noqa: E501


        :return: The order_type of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this ConditionalCancelAllRes.


        :param order_type: The order_type of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def price(self):
        """Gets the price of this ConditionalCancelAllRes.  # noqa: E501


        :return: The price of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ConditionalCancelAllRes.


        :param price: The price of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this ConditionalCancelAllRes.  # noqa: E501


        :return: The qty of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this ConditionalCancelAllRes.


        :param qty: The qty of this ConditionalCancelAllRes.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def time_in_force(self):
        """Gets the time_in_force of this ConditionalCancelAllRes.  # noqa: E501


        :return: The time_in_force of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this ConditionalCancelAllRes.


        :param time_in_force: The time_in_force of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._time_in_force = time_in_force

    @property
    def create_type(self):
        """Gets the create_type of this ConditionalCancelAllRes.  # noqa: E501


        :return: The create_type of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._create_type

    @create_type.setter
    def create_type(self, create_type):
        """Sets the create_type of this ConditionalCancelAllRes.


        :param create_type: The create_type of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._create_type = create_type

    @property
    def cancel_type(self):
        """Gets the cancel_type of this ConditionalCancelAllRes.  # noqa: E501


        :return: The cancel_type of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._cancel_type

    @cancel_type.setter
    def cancel_type(self, cancel_type):
        """Sets the cancel_type of this ConditionalCancelAllRes.


        :param cancel_type: The cancel_type of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._cancel_type = cancel_type

    @property
    def order_status(self):
        """Gets the order_status of this ConditionalCancelAllRes.  # noqa: E501


        :return: The order_status of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this ConditionalCancelAllRes.


        :param order_status: The order_status of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def leaves_qty(self):
        """Gets the leaves_qty of this ConditionalCancelAllRes.  # noqa: E501


        :return: The leaves_qty of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: float
        """
        return self._leaves_qty

    @leaves_qty.setter
    def leaves_qty(self, leaves_qty):
        """Sets the leaves_qty of this ConditionalCancelAllRes.


        :param leaves_qty: The leaves_qty of this ConditionalCancelAllRes.  # noqa: E501
        :type: float
        """

        self._leaves_qty = leaves_qty

    @property
    def leaves_value(self):
        """Gets the leaves_value of this ConditionalCancelAllRes.  # noqa: E501


        :return: The leaves_value of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._leaves_value

    @leaves_value.setter
    def leaves_value(self, leaves_value):
        """Sets the leaves_value of this ConditionalCancelAllRes.


        :param leaves_value: The leaves_value of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._leaves_value = leaves_value

    @property
    def cross_seq(self):
        """Gets the cross_seq of this ConditionalCancelAllRes.  # noqa: E501


        :return: The cross_seq of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: float
        """
        return self._cross_seq

    @cross_seq.setter
    def cross_seq(self, cross_seq):
        """Sets the cross_seq of this ConditionalCancelAllRes.


        :param cross_seq: The cross_seq of this ConditionalCancelAllRes.  # noqa: E501
        :type: float
        """

        self._cross_seq = cross_seq

    @property
    def stop_order_type(self):
        """Gets the stop_order_type of this ConditionalCancelAllRes.  # noqa: E501


        :return: The stop_order_type of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._stop_order_type

    @stop_order_type.setter
    def stop_order_type(self, stop_order_type):
        """Sets the stop_order_type of this ConditionalCancelAllRes.


        :param stop_order_type: The stop_order_type of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._stop_order_type = stop_order_type

    @property
    def trigger_by(self):
        """Gets the trigger_by of this ConditionalCancelAllRes.  # noqa: E501


        :return: The trigger_by of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._trigger_by

    @trigger_by.setter
    def trigger_by(self, trigger_by):
        """Sets the trigger_by of this ConditionalCancelAllRes.


        :param trigger_by: The trigger_by of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._trigger_by = trigger_by

    @property
    def created_at(self):
        """Gets the created_at of this ConditionalCancelAllRes.  # noqa: E501


        :return: The created_at of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConditionalCancelAllRes.


        :param created_at: The created_at of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ConditionalCancelAllRes.  # noqa: E501


        :return: The updated_at of this ConditionalCancelAllRes.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConditionalCancelAllRes.


        :param updated_at: The updated_at of this ConditionalCancelAllRes.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionalCancelAllRes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionalCancelAllRes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
