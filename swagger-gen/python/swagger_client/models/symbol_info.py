# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SymbolInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'base_currency': 'str',
        'quote_currency': 'str',
        'price_scale': 'float',
        'price_filter': 'object',
        'lot_size_filter': 'object'
    }

    attribute_map = {
        'name': 'name',
        'base_currency': 'base_currency',
        'quote_currency': 'quote_currency',
        'price_scale': 'price_scale',
        'price_filter': 'price_filter',
        'lot_size_filter': 'lot_size_filter'
    }

    def __init__(self, name=None, base_currency=None, quote_currency=None, price_scale=None, price_filter=None, lot_size_filter=None):  # noqa: E501
        """SymbolInfo - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._base_currency = None
        self._quote_currency = None
        self._price_scale = None
        self._price_filter = None
        self._lot_size_filter = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if base_currency is not None:
            self.base_currency = base_currency
        if quote_currency is not None:
            self.quote_currency = quote_currency
        if price_scale is not None:
            self.price_scale = price_scale
        if price_filter is not None:
            self.price_filter = price_filter
        if lot_size_filter is not None:
            self.lot_size_filter = lot_size_filter

    @property
    def name(self):
        """Gets the name of this SymbolInfo.  # noqa: E501


        :return: The name of this SymbolInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SymbolInfo.


        :param name: The name of this SymbolInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def base_currency(self):
        """Gets the base_currency of this SymbolInfo.  # noqa: E501


        :return: The base_currency of this SymbolInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this SymbolInfo.


        :param base_currency: The base_currency of this SymbolInfo.  # noqa: E501
        :type: str
        """

        self._base_currency = base_currency

    @property
    def quote_currency(self):
        """Gets the quote_currency of this SymbolInfo.  # noqa: E501


        :return: The quote_currency of this SymbolInfo.  # noqa: E501
        :rtype: str
        """
        return self._quote_currency

    @quote_currency.setter
    def quote_currency(self, quote_currency):
        """Sets the quote_currency of this SymbolInfo.


        :param quote_currency: The quote_currency of this SymbolInfo.  # noqa: E501
        :type: str
        """

        self._quote_currency = quote_currency

    @property
    def price_scale(self):
        """Gets the price_scale of this SymbolInfo.  # noqa: E501


        :return: The price_scale of this SymbolInfo.  # noqa: E501
        :rtype: float
        """
        return self._price_scale

    @price_scale.setter
    def price_scale(self, price_scale):
        """Sets the price_scale of this SymbolInfo.


        :param price_scale: The price_scale of this SymbolInfo.  # noqa: E501
        :type: float
        """

        self._price_scale = price_scale

    @property
    def price_filter(self):
        """Gets the price_filter of this SymbolInfo.  # noqa: E501


        :return: The price_filter of this SymbolInfo.  # noqa: E501
        :rtype: object
        """
        return self._price_filter

    @price_filter.setter
    def price_filter(self, price_filter):
        """Sets the price_filter of this SymbolInfo.


        :param price_filter: The price_filter of this SymbolInfo.  # noqa: E501
        :type: object
        """

        self._price_filter = price_filter

    @property
    def lot_size_filter(self):
        """Gets the lot_size_filter of this SymbolInfo.  # noqa: E501


        :return: The lot_size_filter of this SymbolInfo.  # noqa: E501
        :rtype: object
        """
        return self._lot_size_filter

    @lot_size_filter.setter
    def lot_size_filter(self, lot_size_filter):
        """Sets the lot_size_filter of this SymbolInfo.


        :param lot_size_filter: The lot_size_filter of this SymbolInfo.  # noqa: E501
        :type: object
        """

        self._lot_size_filter = lot_size_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SymbolInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
