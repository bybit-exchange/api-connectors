# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WithdrawRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'user_id': 'float',
        'coin': 'str',
        'status': 'str',
        'amount': 'str',
        'fee': 'str',
        'address': 'str',
        'tx_id': 'str',
        'submited_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'coin': 'coin',
        'status': 'status',
        'amount': 'amount',
        'fee': 'fee',
        'address': 'address',
        'tx_id': 'tx_id',
        'submited_at': 'submited_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, user_id=None, coin=None, status=None, amount=None, fee=None, address=None, tx_id=None, submited_at=None, updated_at=None):  # noqa: E501
        """WithdrawRecords - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self._coin = None
        self._status = None
        self._amount = None
        self._fee = None
        self._address = None
        self._tx_id = None
        self._submited_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if coin is not None:
            self.coin = coin
        if status is not None:
            self.status = status
        if amount is not None:
            self.amount = amount
        if fee is not None:
            self.fee = fee
        if address is not None:
            self.address = address
        if tx_id is not None:
            self.tx_id = tx_id
        if submited_at is not None:
            self.submited_at = submited_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this WithdrawRecords.  # noqa: E501


        :return: The id of this WithdrawRecords.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WithdrawRecords.


        :param id: The id of this WithdrawRecords.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this WithdrawRecords.  # noqa: E501


        :return: The user_id of this WithdrawRecords.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WithdrawRecords.


        :param user_id: The user_id of this WithdrawRecords.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def coin(self):
        """Gets the coin of this WithdrawRecords.  # noqa: E501


        :return: The coin of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this WithdrawRecords.


        :param coin: The coin of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._coin = coin

    @property
    def status(self):
        """Gets the status of this WithdrawRecords.  # noqa: E501


        :return: The status of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WithdrawRecords.


        :param status: The status of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this WithdrawRecords.  # noqa: E501


        :return: The amount of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WithdrawRecords.


        :param amount: The amount of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def fee(self):
        """Gets the fee of this WithdrawRecords.  # noqa: E501


        :return: The fee of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this WithdrawRecords.


        :param fee: The fee of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def address(self):
        """Gets the address of this WithdrawRecords.  # noqa: E501


        :return: The address of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WithdrawRecords.


        :param address: The address of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def tx_id(self):
        """Gets the tx_id of this WithdrawRecords.  # noqa: E501


        :return: The tx_id of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this WithdrawRecords.


        :param tx_id: The tx_id of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._tx_id = tx_id

    @property
    def submited_at(self):
        """Gets the submited_at of this WithdrawRecords.  # noqa: E501


        :return: The submited_at of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._submited_at

    @submited_at.setter
    def submited_at(self, submited_at):
        """Sets the submited_at of this WithdrawRecords.


        :param submited_at: The submited_at of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._submited_at = submited_at

    @property
    def updated_at(self):
        """Gets the updated_at of this WithdrawRecords.  # noqa: E501


        :return: The updated_at of this WithdrawRecords.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WithdrawRecords.


        :param updated_at: The updated_at of this WithdrawRecords.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
