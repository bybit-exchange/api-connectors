# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WalletBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'equity': 'float',
        'available_balance': 'float',
        'used_margin': 'float',
        'order_margin': 'float',
        'position_margin': 'float',
        'occ_closing_fee': 'float',
        'occ_funding_fee': 'float',
        'wallet_balance': 'float',
        'realised_pnl': 'float',
        'unrealised_pnl': 'float',
        'cum_realised_pnl': 'float',
        'given_cash': 'float',
        'service_cash': 'float'
    }

    attribute_map = {
        'equity': 'equity',
        'available_balance': 'available_balance',
        'used_margin': 'used_margin',
        'order_margin': 'order_margin',
        'position_margin': 'position_margin',
        'occ_closing_fee': 'occ_closing_fee',
        'occ_funding_fee': 'occ_funding_fee',
        'wallet_balance': 'wallet_balance',
        'realised_pnl': 'realised_pnl',
        'unrealised_pnl': 'unrealised_pnl',
        'cum_realised_pnl': 'cum_realised_pnl',
        'given_cash': 'given_cash',
        'service_cash': 'service_cash'
    }

    def __init__(self, equity=None, available_balance=None, used_margin=None, order_margin=None, position_margin=None, occ_closing_fee=None, occ_funding_fee=None, wallet_balance=None, realised_pnl=None, unrealised_pnl=None, cum_realised_pnl=None, given_cash=None, service_cash=None):  # noqa: E501
        """WalletBalance - a model defined in Swagger"""  # noqa: E501

        self._equity = None
        self._available_balance = None
        self._used_margin = None
        self._order_margin = None
        self._position_margin = None
        self._occ_closing_fee = None
        self._occ_funding_fee = None
        self._wallet_balance = None
        self._realised_pnl = None
        self._unrealised_pnl = None
        self._cum_realised_pnl = None
        self._given_cash = None
        self._service_cash = None
        self.discriminator = None

        if equity is not None:
            self.equity = equity
        if available_balance is not None:
            self.available_balance = available_balance
        if used_margin is not None:
            self.used_margin = used_margin
        if order_margin is not None:
            self.order_margin = order_margin
        if position_margin is not None:
            self.position_margin = position_margin
        if occ_closing_fee is not None:
            self.occ_closing_fee = occ_closing_fee
        if occ_funding_fee is not None:
            self.occ_funding_fee = occ_funding_fee
        if wallet_balance is not None:
            self.wallet_balance = wallet_balance
        if realised_pnl is not None:
            self.realised_pnl = realised_pnl
        if unrealised_pnl is not None:
            self.unrealised_pnl = unrealised_pnl
        if cum_realised_pnl is not None:
            self.cum_realised_pnl = cum_realised_pnl
        if given_cash is not None:
            self.given_cash = given_cash
        if service_cash is not None:
            self.service_cash = service_cash

    @property
    def equity(self):
        """Gets the equity of this WalletBalance.  # noqa: E501


        :return: The equity of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this WalletBalance.


        :param equity: The equity of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._equity = equity

    @property
    def available_balance(self):
        """Gets the available_balance of this WalletBalance.  # noqa: E501


        :return: The available_balance of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this WalletBalance.


        :param available_balance: The available_balance of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._available_balance = available_balance

    @property
    def used_margin(self):
        """Gets the used_margin of this WalletBalance.  # noqa: E501


        :return: The used_margin of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._used_margin

    @used_margin.setter
    def used_margin(self, used_margin):
        """Sets the used_margin of this WalletBalance.


        :param used_margin: The used_margin of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._used_margin = used_margin

    @property
    def order_margin(self):
        """Gets the order_margin of this WalletBalance.  # noqa: E501


        :return: The order_margin of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._order_margin

    @order_margin.setter
    def order_margin(self, order_margin):
        """Sets the order_margin of this WalletBalance.


        :param order_margin: The order_margin of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._order_margin = order_margin

    @property
    def position_margin(self):
        """Gets the position_margin of this WalletBalance.  # noqa: E501


        :return: The position_margin of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._position_margin

    @position_margin.setter
    def position_margin(self, position_margin):
        """Sets the position_margin of this WalletBalance.


        :param position_margin: The position_margin of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._position_margin = position_margin

    @property
    def occ_closing_fee(self):
        """Gets the occ_closing_fee of this WalletBalance.  # noqa: E501


        :return: The occ_closing_fee of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._occ_closing_fee

    @occ_closing_fee.setter
    def occ_closing_fee(self, occ_closing_fee):
        """Sets the occ_closing_fee of this WalletBalance.


        :param occ_closing_fee: The occ_closing_fee of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._occ_closing_fee = occ_closing_fee

    @property
    def occ_funding_fee(self):
        """Gets the occ_funding_fee of this WalletBalance.  # noqa: E501


        :return: The occ_funding_fee of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._occ_funding_fee

    @occ_funding_fee.setter
    def occ_funding_fee(self, occ_funding_fee):
        """Sets the occ_funding_fee of this WalletBalance.


        :param occ_funding_fee: The occ_funding_fee of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._occ_funding_fee = occ_funding_fee

    @property
    def wallet_balance(self):
        """Gets the wallet_balance of this WalletBalance.  # noqa: E501


        :return: The wallet_balance of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._wallet_balance

    @wallet_balance.setter
    def wallet_balance(self, wallet_balance):
        """Sets the wallet_balance of this WalletBalance.


        :param wallet_balance: The wallet_balance of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._wallet_balance = wallet_balance

    @property
    def realised_pnl(self):
        """Gets the realised_pnl of this WalletBalance.  # noqa: E501


        :return: The realised_pnl of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._realised_pnl

    @realised_pnl.setter
    def realised_pnl(self, realised_pnl):
        """Sets the realised_pnl of this WalletBalance.


        :param realised_pnl: The realised_pnl of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._realised_pnl = realised_pnl

    @property
    def unrealised_pnl(self):
        """Gets the unrealised_pnl of this WalletBalance.  # noqa: E501


        :return: The unrealised_pnl of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._unrealised_pnl

    @unrealised_pnl.setter
    def unrealised_pnl(self, unrealised_pnl):
        """Sets the unrealised_pnl of this WalletBalance.


        :param unrealised_pnl: The unrealised_pnl of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._unrealised_pnl = unrealised_pnl

    @property
    def cum_realised_pnl(self):
        """Gets the cum_realised_pnl of this WalletBalance.  # noqa: E501


        :return: The cum_realised_pnl of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._cum_realised_pnl

    @cum_realised_pnl.setter
    def cum_realised_pnl(self, cum_realised_pnl):
        """Sets the cum_realised_pnl of this WalletBalance.


        :param cum_realised_pnl: The cum_realised_pnl of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._cum_realised_pnl = cum_realised_pnl

    @property
    def given_cash(self):
        """Gets the given_cash of this WalletBalance.  # noqa: E501


        :return: The given_cash of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._given_cash

    @given_cash.setter
    def given_cash(self, given_cash):
        """Sets the given_cash of this WalletBalance.


        :param given_cash: The given_cash of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._given_cash = given_cash

    @property
    def service_cash(self):
        """Gets the service_cash of this WalletBalance.  # noqa: E501


        :return: The service_cash of this WalletBalance.  # noqa: E501
        :rtype: float
        """
        return self._service_cash

    @service_cash.setter
    def service_cash(self, service_cash):
        """Sets the service_cash of this WalletBalance.


        :param service_cash: The service_cash of this WalletBalance.  # noqa: E501
        :type: float
        """

        self._service_cash = service_cash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
