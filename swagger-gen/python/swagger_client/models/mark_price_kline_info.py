# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarkPriceKlineInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'symbol': 'str',
        'period': 'str',
        'start_at': 'int',
        'open': 'int',
        'high': 'int',
        'low': 'int',
        'close': 'int'
    }

    attribute_map = {
        'id': 'id',
        'symbol': 'symbol',
        'period': 'period',
        'start_at': 'start_at',
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'close': 'close'
    }

    def __init__(self, id=None, symbol=None, period=None, start_at=None, open=None, high=None, low=None, close=None):  # noqa: E501
        """MarkPriceKlineInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._symbol = None
        self._period = None
        self._start_at = None
        self._open = None
        self._high = None
        self._low = None
        self._close = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if symbol is not None:
            self.symbol = symbol
        if period is not None:
            self.period = period
        if start_at is not None:
            self.start_at = start_at
        if open is not None:
            self.open = open
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if close is not None:
            self.close = close

    @property
    def id(self):
        """Gets the id of this MarkPriceKlineInfo.  # noqa: E501


        :return: The id of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarkPriceKlineInfo.


        :param id: The id of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def symbol(self):
        """Gets the symbol of this MarkPriceKlineInfo.  # noqa: E501


        :return: The symbol of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MarkPriceKlineInfo.


        :param symbol: The symbol of this MarkPriceKlineInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def period(self):
        """Gets the period of this MarkPriceKlineInfo.  # noqa: E501


        :return: The period of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this MarkPriceKlineInfo.


        :param period: The period of this MarkPriceKlineInfo.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def start_at(self):
        """Gets the start_at of this MarkPriceKlineInfo.  # noqa: E501


        :return: The start_at of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this MarkPriceKlineInfo.


        :param start_at: The start_at of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._start_at = start_at

    @property
    def open(self):
        """Gets the open of this MarkPriceKlineInfo.  # noqa: E501


        :return: The open of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this MarkPriceKlineInfo.


        :param open: The open of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._open = open

    @property
    def high(self):
        """Gets the high of this MarkPriceKlineInfo.  # noqa: E501


        :return: The high of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this MarkPriceKlineInfo.


        :param high: The high of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this MarkPriceKlineInfo.  # noqa: E501


        :return: The low of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this MarkPriceKlineInfo.


        :param low: The low of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._low = low

    @property
    def close(self):
        """Gets the close of this MarkPriceKlineInfo.  # noqa: E501


        :return: The close of this MarkPriceKlineInfo.  # noqa: E501
        :rtype: int
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this MarkPriceKlineInfo.


        :param close: The close of this MarkPriceKlineInfo.  # noqa: E501
        :type: int
        """

        self._close = close

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarkPriceKlineInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkPriceKlineInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
