# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LCPInfoBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'self_ratio': 'float',
        'platform_ratio': 'float',
        'score': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'self_ratio': 'self_ratio',
        'platform_ratio': 'platform_ratio',
        'score': 'score'
    }

    def __init__(self, _date=None, self_ratio=None, platform_ratio=None, score=None):  # noqa: E501
        """LCPInfoBase - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._self_ratio = None
        self._platform_ratio = None
        self._score = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if self_ratio is not None:
            self.self_ratio = self_ratio
        if platform_ratio is not None:
            self.platform_ratio = platform_ratio
        if score is not None:
            self.score = score

    @property
    def _date(self):
        """Gets the _date of this LCPInfoBase.  # noqa: E501


        :return: The _date of this LCPInfoBase.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LCPInfoBase.


        :param _date: The _date of this LCPInfoBase.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def self_ratio(self):
        """Gets the self_ratio of this LCPInfoBase.  # noqa: E501


        :return: The self_ratio of this LCPInfoBase.  # noqa: E501
        :rtype: float
        """
        return self._self_ratio

    @self_ratio.setter
    def self_ratio(self, self_ratio):
        """Sets the self_ratio of this LCPInfoBase.


        :param self_ratio: The self_ratio of this LCPInfoBase.  # noqa: E501
        :type: float
        """

        self._self_ratio = self_ratio

    @property
    def platform_ratio(self):
        """Gets the platform_ratio of this LCPInfoBase.  # noqa: E501


        :return: The platform_ratio of this LCPInfoBase.  # noqa: E501
        :rtype: float
        """
        return self._platform_ratio

    @platform_ratio.setter
    def platform_ratio(self, platform_ratio):
        """Sets the platform_ratio of this LCPInfoBase.


        :param platform_ratio: The platform_ratio of this LCPInfoBase.  # noqa: E501
        :type: float
        """

        self._platform_ratio = platform_ratio

    @property
    def score(self):
        """Gets the score of this LCPInfoBase.  # noqa: E501


        :return: The score of this LCPInfoBase.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LCPInfoBase.


        :param score: The score of this LCPInfoBase.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LCPInfoBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LCPInfoBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
