# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LinearPositionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def linear_positions_change_margin(self, **kwargs):  # noqa: E501
        """Add/Reduce Margin  # noqa: E501

        This will Add/Reduce Margin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_change_margin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param float margin:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_change_margin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_change_margin_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_change_margin_with_http_info(self, **kwargs):  # noqa: E501
        """Add/Reduce Margin  # noqa: E501

        This will Add/Reduce Margin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_change_margin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param float margin:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'margin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_change_margin" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            form_params.append(('side', params['side']))  # noqa: E501
        if 'margin' in params:
            form_params.append(('margin', params['margin']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/add-margin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_close_pnl_records(self, **kwargs):  # noqa: E501
        """Get user's closed profit and loss records.  # noqa: E501

        This will get user's closed profit and loss records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_close_pnl_records(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param int start_time:
        :param int end_time:
        :param str exec_type:
        :param int page:
        :param int limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_close_pnl_records_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_close_pnl_records_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_close_pnl_records_with_http_info(self, **kwargs):  # noqa: E501
        """Get user's closed profit and loss records.  # noqa: E501

        This will get user's closed profit and loss records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_close_pnl_records_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param int start_time:
        :param int end_time:
        :param str exec_type:
        :param int page:
        :param int limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'start_time', 'end_time', 'exec_type', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_close_pnl_records" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'exec_type' in params:
            query_params.append(('exec_type', params['exec_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/trade/closed-pnl/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_my_position(self, **kwargs):  # noqa: E501
        """Get my position list.  # noqa: E501

        This will get my position list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_my_position(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_my_position_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_my_position_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_my_position_with_http_info(self, **kwargs):  # noqa: E501
        """Get my position list.  # noqa: E501

        This will get my position list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_my_position_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_my_position" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_save_leverage(self, **kwargs):  # noqa: E501
        """Set leverage  # noqa: E501

        This will Set Leverage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_save_leverage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param float buy_leverage:
        :param float sell_leverage:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_save_leverage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_save_leverage_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_save_leverage_with_http_info(self, **kwargs):  # noqa: E501
        """Set leverage  # noqa: E501

        This will Set Leverage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_save_leverage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param float buy_leverage:
        :param float sell_leverage:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'buy_leverage', 'sell_leverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_save_leverage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'buy_leverage' in params:
            form_params.append(('buy_leverage', params['buy_leverage']))  # noqa: E501
        if 'sell_leverage' in params:
            form_params.append(('sell_leverage', params['sell_leverage']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/set-leverage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_set_auto_add_margin(self, **kwargs):  # noqa: E501
        """Set auto add margin  # noqa: E501

        This will Set auto add margin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_set_auto_add_margin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param bool auto_add_margin:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_set_auto_add_margin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_set_auto_add_margin_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_set_auto_add_margin_with_http_info(self, **kwargs):  # noqa: E501
        """Set auto add margin  # noqa: E501

        This will Set auto add margin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_set_auto_add_margin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param bool auto_add_margin:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'auto_add_margin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_set_auto_add_margin" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            form_params.append(('side', params['side']))  # noqa: E501
        if 'auto_add_margin' in params:
            form_params.append(('auto_add_margin', params['auto_add_margin']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/set-auto-add-margin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_switch_isolated(self, **kwargs):  # noqa: E501
        """Switch isolated  # noqa: E501

        This will switch isolated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_switch_isolated(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param bool is_isolated:
        :param float buy_leverage:
        :param float sell_leverage:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_switch_isolated_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_switch_isolated_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_switch_isolated_with_http_info(self, **kwargs):  # noqa: E501
        """Switch isolated  # noqa: E501

        This will switch isolated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_switch_isolated_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param bool is_isolated:
        :param float buy_leverage:
        :param float sell_leverage:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'is_isolated', 'buy_leverage', 'sell_leverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_switch_isolated" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'is_isolated' in params:
            form_params.append(('is_isolated', params['is_isolated']))  # noqa: E501
        if 'buy_leverage' in params:
            form_params.append(('buy_leverage', params['buy_leverage']))  # noqa: E501
        if 'sell_leverage' in params:
            form_params.append(('sell_leverage', params['sell_leverage']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/switch-isolated', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_switch_mode(self, **kwargs):  # noqa: E501
        """Switch Mode  # noqa: E501

        This will Switch TP/SL Mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_switch_mode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str tp_sl_mode:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_switch_mode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_switch_mode_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_switch_mode_with_http_info(self, **kwargs):  # noqa: E501
        """Switch Mode  # noqa: E501

        This will Switch TP/SL Mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_switch_mode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str tp_sl_mode:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'tp_sl_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_switch_mode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'tp_sl_mode' in params:
            form_params.append(('tp_sl_mode', params['tp_sl_mode']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/tpsl/switch-mode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_positions_trading_stop(self, **kwargs):  # noqa: E501
        """Set tradingStop  # noqa: E501

        This will set tradingStop  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_trading_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param float take_profit:
        :param float stop_loss:
        :param float trailing_stop:
        :param str tp_trigger_by:
        :param str sl_trigger_by:
        :param float sl_size:
        :param float tp_size:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_positions_trading_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_positions_trading_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_positions_trading_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Set tradingStop  # noqa: E501

        This will set tradingStop  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_positions_trading_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param float take_profit:
        :param float stop_loss:
        :param float trailing_stop:
        :param str tp_trigger_by:
        :param str sl_trigger_by:
        :param float sl_size:
        :param float tp_size:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'take_profit', 'stop_loss', 'trailing_stop', 'tp_trigger_by', 'sl_trigger_by', 'sl_size', 'tp_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_positions_trading_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            form_params.append(('side', params['side']))  # noqa: E501
        if 'take_profit' in params:
            form_params.append(('take_profit', params['take_profit']))  # noqa: E501
        if 'stop_loss' in params:
            form_params.append(('stop_loss', params['stop_loss']))  # noqa: E501
        if 'trailing_stop' in params:
            form_params.append(('trailing_stop', params['trailing_stop']))  # noqa: E501
        if 'tp_trigger_by' in params:
            form_params.append(('tp_trigger_by', params['tp_trigger_by']))  # noqa: E501
        if 'sl_trigger_by' in params:
            form_params.append(('sl_trigger_by', params['sl_trigger_by']))  # noqa: E501
        if 'sl_size' in params:
            form_params.append(('sl_size', params['sl_size']))  # noqa: E501
        if 'tp_size' in params:
            form_params.append(('tp_size', params['tp_size']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/position/trading-stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
