# coding: utf-8

"""
    Bybit API

    ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]    # noqa: E501

    OpenAPI spec version: 0.2.11
    Contact: support@bybit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LinearConditionalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def linear_conditional_cancel(self, **kwargs):  # noqa: E501
        """Cancel Active Order  # noqa: E501

        This will cancel linear active order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_cancel(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stop_order_id:
        :param str order_link_id:
        :param str symbol:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_cancel_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_cancel_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_conditional_cancel_with_http_info(self, **kwargs):  # noqa: E501
        """Cancel Active Order  # noqa: E501

        This will cancel linear active order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_cancel_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stop_order_id:
        :param str order_link_id:
        :param str symbol:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stop_order_id', 'order_link_id', 'symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_cancel" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'stop_order_id' in params:
            form_params.append(('stop_order_id', params['stop_order_id']))  # noqa: E501
        if 'order_link_id' in params:
            form_params.append(('order_link_id', params['order_link_id']))  # noqa: E501
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_conditional_cancel_all(self, symbol, **kwargs):  # noqa: E501
        """Cancel all stop orders.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_cancel_all(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Contract type. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_cancel_all_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_cancel_all_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def linear_conditional_cancel_all_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Cancel all stop orders.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_cancel_all_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Contract type. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_cancel_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `linear_conditional_cancel_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/cancel-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_conditional_get_orders(self, **kwargs):  # noqa: E501
        """Get linear Stop Orders  # noqa: E501

        This will get linear active orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_get_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stop_order_id:
        :param str order_link_id:
        :param str symbol:
        :param str order:
        :param str page:
        :param str limit:
        :param str stop_order_status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_get_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_get_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_conditional_get_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Get linear Stop Orders  # noqa: E501

        This will get linear active orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_get_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stop_order_id:
        :param str order_link_id:
        :param str symbol:
        :param str order:
        :param str page:
        :param str limit:
        :param str stop_order_status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stop_order_id', 'order_link_id', 'symbol', 'order', 'page', 'limit', 'stop_order_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_get_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stop_order_id' in params:
            query_params.append(('stop_order_id', params['stop_order_id']))  # noqa: E501
        if 'order_link_id' in params:
            query_params.append(('order_link_id', params['order_link_id']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'stop_order_status' in params:
            query_params.append(('stop_order_status', params['stop_order_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_conditional_new(self, **kwargs):  # noqa: E501
        """Create linear stop Order  # noqa: E501

        This will create linear stop order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_new(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param str order_type:
        :param float qty:
        :param float price:
        :param float base_price:
        :param float stop_px:
        :param str time_in_force:
        :param str trigger_by:
        :param bool reduce_only:
        :param bool close_on_trigger:
        :param str order_link_id:
        :param float take_profit:
        :param float stop_loss:
        :param str tp_trigger_by:
        :param str sl_trigger_by:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_conditional_new_with_http_info(self, **kwargs):  # noqa: E501
        """Create linear stop Order  # noqa: E501

        This will create linear stop order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_new_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str side:
        :param str order_type:
        :param float qty:
        :param float price:
        :param float base_price:
        :param float stop_px:
        :param str time_in_force:
        :param str trigger_by:
        :param bool reduce_only:
        :param bool close_on_trigger:
        :param str order_link_id:
        :param float take_profit:
        :param float stop_loss:
        :param str tp_trigger_by:
        :param str sl_trigger_by:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'order_type', 'qty', 'price', 'base_price', 'stop_px', 'time_in_force', 'trigger_by', 'reduce_only', 'close_on_trigger', 'order_link_id', 'take_profit', 'stop_loss', 'tp_trigger_by', 'sl_trigger_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            form_params.append(('side', params['side']))  # noqa: E501
        if 'order_type' in params:
            form_params.append(('order_type', params['order_type']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'price' in params:
            form_params.append(('price', params['price']))  # noqa: E501
        if 'base_price' in params:
            form_params.append(('base_price', params['base_price']))  # noqa: E501
        if 'stop_px' in params:
            form_params.append(('stop_px', params['stop_px']))  # noqa: E501
        if 'time_in_force' in params:
            form_params.append(('time_in_force', params['time_in_force']))  # noqa: E501
        if 'trigger_by' in params:
            form_params.append(('trigger_by', params['trigger_by']))  # noqa: E501
        if 'reduce_only' in params:
            form_params.append(('reduce_only', params['reduce_only']))  # noqa: E501
        if 'close_on_trigger' in params:
            form_params.append(('close_on_trigger', params['close_on_trigger']))  # noqa: E501
        if 'order_link_id' in params:
            form_params.append(('order_link_id', params['order_link_id']))  # noqa: E501
        if 'take_profit' in params:
            form_params.append(('take_profit', params['take_profit']))  # noqa: E501
        if 'stop_loss' in params:
            form_params.append(('stop_loss', params['stop_loss']))  # noqa: E501
        if 'tp_trigger_by' in params:
            form_params.append(('tp_trigger_by', params['tp_trigger_by']))  # noqa: E501
        if 'sl_trigger_by' in params:
            form_params.append(('sl_trigger_by', params['sl_trigger_by']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_conditional_query(self, **kwargs):  # noqa: E501
        """Get Stop Orders(real-time)  # noqa: E501

        This will get linear stop orders(real-time)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str stop_order_id:
        :param str order_link_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def linear_conditional_query_with_http_info(self, **kwargs):  # noqa: E501
        """Get Stop Orders(real-time)  # noqa: E501

        This will get linear stop orders(real-time)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str stop_order_id:
        :param str order_link_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'stop_order_id', 'order_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'stop_order_id' in params:
            query_params.append(('stop_order_id', params['stop_order_id']))  # noqa: E501
        if 'order_link_id' in params:
            query_params.append(('order_link_id', params['order_link_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def linear_conditional_replace(self, symbol, **kwargs):  # noqa: E501
        """Replace conditional order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_replace(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param str stop_order_id:
        :param str order_link_id:
        :param str p_r_qty:
        :param float p_r_price:
        :param float p_r_trigger_price:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.linear_conditional_replace_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.linear_conditional_replace_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def linear_conditional_replace_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Replace conditional order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.linear_conditional_replace_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param str stop_order_id:
        :param str order_link_id:
        :param str p_r_qty:
        :param float p_r_price:
        :param float p_r_trigger_price:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'stop_order_id', 'order_link_id', 'p_r_qty', 'p_r_price', 'p_r_trigger_price']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method linear_conditional_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `linear_conditional_replace`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'stop_order_id' in params:
            form_params.append(('stop_order_id', params['stop_order_id']))  # noqa: E501
        if 'order_link_id' in params:
            form_params.append(('order_link_id', params['order_link_id']))  # noqa: E501
        if 'p_r_qty' in params:
            form_params.append(('p_r_qty', params['p_r_qty']))  # noqa: E501
        if 'p_r_price' in params:
            form_params.append(('p_r_price', params['p_r_price']))  # noqa: E501
        if 'p_r_trigger_price' in params:
            form_params.append(('p_r_trigger_price', params['p_r_trigger_price']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'apiSignature', 'timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/private/linear/stop-order/replace', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
