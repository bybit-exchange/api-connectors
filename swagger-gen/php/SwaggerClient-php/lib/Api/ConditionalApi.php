<?php
/**
 * ConditionalApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bybit API
 *
 * ## REST API for the Bybit Exchange.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ConditionalApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConditionalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation conditionalCancel
     *
     * Cancel conditional order.
     *
     * @param  string $stop_order_id Order ID of conditional order. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function conditionalCancel($stop_order_id)
    {
        list($response) = $this->conditionalCancelWithHttpInfo($stop_order_id);
        return $response;
    }

    /**
     * Operation conditionalCancelWithHttpInfo
     *
     * Cancel conditional order.
     *
     * @param  string $stop_order_id Order ID of conditional order. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function conditionalCancelWithHttpInfo($stop_order_id)
    {
        $returnType = 'object';
        $request = $this->conditionalCancelRequest($stop_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conditionalCancelAsync
     *
     * Cancel conditional order.
     *
     * @param  string $stop_order_id Order ID of conditional order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalCancelAsync($stop_order_id)
    {
        return $this->conditionalCancelAsyncWithHttpInfo($stop_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conditionalCancelAsyncWithHttpInfo
     *
     * Cancel conditional order.
     *
     * @param  string $stop_order_id Order ID of conditional order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalCancelAsyncWithHttpInfo($stop_order_id)
    {
        $returnType = 'object';
        $request = $this->conditionalCancelRequest($stop_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conditionalCancel'
     *
     * @param  string $stop_order_id Order ID of conditional order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conditionalCancelRequest($stop_order_id)
    {
        // verify the required parameter 'stop_order_id' is set
        if ($stop_order_id === null || (is_array($stop_order_id) && count($stop_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stop_order_id when calling conditionalCancel'
            );
        }

        $resourcePath = '/open-api/stop-order/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($stop_order_id !== null) {
            $formParams['stop_order_id'] = ObjectSerializer::toFormValue($stop_order_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sign');
        if ($apiKey !== null) {
            $queryParams['sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conditionalCancelAll
     *
     * Cancel conditional order.
     *
     * @param  string $symbol Contract type. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function conditionalCancelAll($symbol)
    {
        list($response) = $this->conditionalCancelAllWithHttpInfo($symbol);
        return $response;
    }

    /**
     * Operation conditionalCancelAllWithHttpInfo
     *
     * Cancel conditional order.
     *
     * @param  string $symbol Contract type. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function conditionalCancelAllWithHttpInfo($symbol)
    {
        $returnType = 'object';
        $request = $this->conditionalCancelAllRequest($symbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conditionalCancelAllAsync
     *
     * Cancel conditional order.
     *
     * @param  string $symbol Contract type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalCancelAllAsync($symbol)
    {
        return $this->conditionalCancelAllAsyncWithHttpInfo($symbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conditionalCancelAllAsyncWithHttpInfo
     *
     * Cancel conditional order.
     *
     * @param  string $symbol Contract type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalCancelAllAsyncWithHttpInfo($symbol)
    {
        $returnType = 'object';
        $request = $this->conditionalCancelAllRequest($symbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conditionalCancelAll'
     *
     * @param  string $symbol Contract type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conditionalCancelAllRequest($symbol)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling conditionalCancelAll'
            );
        }

        $resourcePath = '/v2/private/stop-order/cancelAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = ObjectSerializer::toFormValue($symbol);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sign');
        if ($apiKey !== null) {
            $queryParams['sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conditionalGetOrders
     *
     * Get my conditional order list.
     *
     * @param  string $stop_order_id Order ID of conditional order. (optional)
     * @param  string $order_link_id Agency customized order ID. (optional)
     * @param  string $symbol Contract type. Default BTCUSD. (optional)
     * @param  string $order Sort orders by creation date (optional)
     * @param  float $page Page. Default getting first page data (optional)
     * @param  float $limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function conditionalGetOrders($stop_order_id = null, $order_link_id = null, $symbol = null, $order = null, $page = null, $limit = null)
    {
        list($response) = $this->conditionalGetOrdersWithHttpInfo($stop_order_id, $order_link_id, $symbol, $order, $page, $limit);
        return $response;
    }

    /**
     * Operation conditionalGetOrdersWithHttpInfo
     *
     * Get my conditional order list.
     *
     * @param  string $stop_order_id Order ID of conditional order. (optional)
     * @param  string $order_link_id Agency customized order ID. (optional)
     * @param  string $symbol Contract type. Default BTCUSD. (optional)
     * @param  string $order Sort orders by creation date (optional)
     * @param  float $page Page. Default getting first page data (optional)
     * @param  float $limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function conditionalGetOrdersWithHttpInfo($stop_order_id = null, $order_link_id = null, $symbol = null, $order = null, $page = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->conditionalGetOrdersRequest($stop_order_id, $order_link_id, $symbol, $order, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conditionalGetOrdersAsync
     *
     * Get my conditional order list.
     *
     * @param  string $stop_order_id Order ID of conditional order. (optional)
     * @param  string $order_link_id Agency customized order ID. (optional)
     * @param  string $symbol Contract type. Default BTCUSD. (optional)
     * @param  string $order Sort orders by creation date (optional)
     * @param  float $page Page. Default getting first page data (optional)
     * @param  float $limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalGetOrdersAsync($stop_order_id = null, $order_link_id = null, $symbol = null, $order = null, $page = null, $limit = null)
    {
        return $this->conditionalGetOrdersAsyncWithHttpInfo($stop_order_id, $order_link_id, $symbol, $order, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conditionalGetOrdersAsyncWithHttpInfo
     *
     * Get my conditional order list.
     *
     * @param  string $stop_order_id Order ID of conditional order. (optional)
     * @param  string $order_link_id Agency customized order ID. (optional)
     * @param  string $symbol Contract type. Default BTCUSD. (optional)
     * @param  string $order Sort orders by creation date (optional)
     * @param  float $page Page. Default getting first page data (optional)
     * @param  float $limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalGetOrdersAsyncWithHttpInfo($stop_order_id = null, $order_link_id = null, $symbol = null, $order = null, $page = null, $limit = null)
    {
        $returnType = 'object';
        $request = $this->conditionalGetOrdersRequest($stop_order_id, $order_link_id, $symbol, $order, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conditionalGetOrders'
     *
     * @param  string $stop_order_id Order ID of conditional order. (optional)
     * @param  string $order_link_id Agency customized order ID. (optional)
     * @param  string $symbol Contract type. Default BTCUSD. (optional)
     * @param  string $order Sort orders by creation date (optional)
     * @param  float $page Page. Default getting first page data (optional)
     * @param  float $limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conditionalGetOrdersRequest($stop_order_id = null, $order_link_id = null, $symbol = null, $order = null, $page = null, $limit = null)
    {

        $resourcePath = '/open-api/stop-order/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stop_order_id !== null) {
            $queryParams['stop_order_id'] = ObjectSerializer::toQueryValue($stop_order_id);
        }
        // query params
        if ($order_link_id !== null) {
            $queryParams['order_link_id'] = ObjectSerializer::toQueryValue($order_link_id);
        }
        // query params
        if ($symbol !== null) {
            $queryParams['symbol'] = ObjectSerializer::toQueryValue($symbol);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sign');
        if ($apiKey !== null) {
            $queryParams['sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conditionalNew
     *
     * Place a new conditional order.
     *
     * @param  string $side Side. (required)
     * @param  string $symbol Contract type. (required)
     * @param  string $order_type Conditional order type. (required)
     * @param  float $qty Order quantity. (required)
     * @param  double $price Execution price for conditional order (required)
     * @param  double $base_price Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param  double $stop_px Trigger price. (required)
     * @param  string $time_in_force Time in force. (required)
     * @param  string $trigger_by Trigger price type. Default LastPrice. (optional)
     * @param  bool $close_on_trigger close on trigger. (optional)
     * @param  string $order_link_id Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function conditionalNew($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by = null, $close_on_trigger = null, $order_link_id = null)
    {
        list($response) = $this->conditionalNewWithHttpInfo($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by, $close_on_trigger, $order_link_id);
        return $response;
    }

    /**
     * Operation conditionalNewWithHttpInfo
     *
     * Place a new conditional order.
     *
     * @param  string $side Side. (required)
     * @param  string $symbol Contract type. (required)
     * @param  string $order_type Conditional order type. (required)
     * @param  float $qty Order quantity. (required)
     * @param  double $price Execution price for conditional order (required)
     * @param  double $base_price Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param  double $stop_px Trigger price. (required)
     * @param  string $time_in_force Time in force. (required)
     * @param  string $trigger_by Trigger price type. Default LastPrice. (optional)
     * @param  bool $close_on_trigger close on trigger. (optional)
     * @param  string $order_link_id Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function conditionalNewWithHttpInfo($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by = null, $close_on_trigger = null, $order_link_id = null)
    {
        $returnType = 'object';
        $request = $this->conditionalNewRequest($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by, $close_on_trigger, $order_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conditionalNewAsync
     *
     * Place a new conditional order.
     *
     * @param  string $side Side. (required)
     * @param  string $symbol Contract type. (required)
     * @param  string $order_type Conditional order type. (required)
     * @param  float $qty Order quantity. (required)
     * @param  double $price Execution price for conditional order (required)
     * @param  double $base_price Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param  double $stop_px Trigger price. (required)
     * @param  string $time_in_force Time in force. (required)
     * @param  string $trigger_by Trigger price type. Default LastPrice. (optional)
     * @param  bool $close_on_trigger close on trigger. (optional)
     * @param  string $order_link_id Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalNewAsync($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by = null, $close_on_trigger = null, $order_link_id = null)
    {
        return $this->conditionalNewAsyncWithHttpInfo($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by, $close_on_trigger, $order_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conditionalNewAsyncWithHttpInfo
     *
     * Place a new conditional order.
     *
     * @param  string $side Side. (required)
     * @param  string $symbol Contract type. (required)
     * @param  string $order_type Conditional order type. (required)
     * @param  float $qty Order quantity. (required)
     * @param  double $price Execution price for conditional order (required)
     * @param  double $base_price Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param  double $stop_px Trigger price. (required)
     * @param  string $time_in_force Time in force. (required)
     * @param  string $trigger_by Trigger price type. Default LastPrice. (optional)
     * @param  bool $close_on_trigger close on trigger. (optional)
     * @param  string $order_link_id Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalNewAsyncWithHttpInfo($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by = null, $close_on_trigger = null, $order_link_id = null)
    {
        $returnType = 'object';
        $request = $this->conditionalNewRequest($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by, $close_on_trigger, $order_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conditionalNew'
     *
     * @param  string $side Side. (required)
     * @param  string $symbol Contract type. (required)
     * @param  string $order_type Conditional order type. (required)
     * @param  float $qty Order quantity. (required)
     * @param  double $price Execution price for conditional order (required)
     * @param  double $base_price Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param  double $stop_px Trigger price. (required)
     * @param  string $time_in_force Time in force. (required)
     * @param  string $trigger_by Trigger price type. Default LastPrice. (optional)
     * @param  bool $close_on_trigger close on trigger. (optional)
     * @param  string $order_link_id Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conditionalNewRequest($side, $symbol, $order_type, $qty, $price, $base_price, $stop_px, $time_in_force, $trigger_by = null, $close_on_trigger = null, $order_link_id = null)
    {
        // verify the required parameter 'side' is set
        if ($side === null || (is_array($side) && count($side) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $side when calling conditionalNew'
            );
        }
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling conditionalNew'
            );
        }
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling conditionalNew'
            );
        }
        // verify the required parameter 'qty' is set
        if ($qty === null || (is_array($qty) && count($qty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qty when calling conditionalNew'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling conditionalNew'
            );
        }
        // verify the required parameter 'base_price' is set
        if ($base_price === null || (is_array($base_price) && count($base_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_price when calling conditionalNew'
            );
        }
        // verify the required parameter 'stop_px' is set
        if ($stop_px === null || (is_array($stop_px) && count($stop_px) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stop_px when calling conditionalNew'
            );
        }
        // verify the required parameter 'time_in_force' is set
        if ($time_in_force === null || (is_array($time_in_force) && count($time_in_force) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_in_force when calling conditionalNew'
            );
        }

        $resourcePath = '/open-api/stop-order/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($side !== null) {
            $formParams['side'] = ObjectSerializer::toFormValue($side);
        }
        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = ObjectSerializer::toFormValue($symbol);
        }
        // form params
        if ($order_type !== null) {
            $formParams['order_type'] = ObjectSerializer::toFormValue($order_type);
        }
        // form params
        if ($qty !== null) {
            $formParams['qty'] = ObjectSerializer::toFormValue($qty);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($base_price !== null) {
            $formParams['base_price'] = ObjectSerializer::toFormValue($base_price);
        }
        // form params
        if ($stop_px !== null) {
            $formParams['stop_px'] = ObjectSerializer::toFormValue($stop_px);
        }
        // form params
        if ($time_in_force !== null) {
            $formParams['time_in_force'] = ObjectSerializer::toFormValue($time_in_force);
        }
        // form params
        if ($trigger_by !== null) {
            $formParams['trigger_by'] = ObjectSerializer::toFormValue($trigger_by);
        }
        // form params
        if ($close_on_trigger !== null) {
            $formParams['close_on_trigger'] = ObjectSerializer::toFormValue($close_on_trigger);
        }
        // form params
        if ($order_link_id !== null) {
            $formParams['order_link_id'] = ObjectSerializer::toFormValue($order_link_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sign');
        if ($apiKey !== null) {
            $queryParams['sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation conditionalReplace
     *
     * Replace conditional order. Only incomplete orders can be modified.
     *
     * @param  string $order_id Order ID. (required)
     * @param  string $symbol Contract type. (required)
     * @param  float $p_r_qty Order quantity. (optional)
     * @param  double $p_r_price Order price. (optional)
     * @param  double $p_r_trigger_price Trigger price. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function conditionalReplace($order_id, $symbol, $p_r_qty = null, $p_r_price = null, $p_r_trigger_price = null)
    {
        list($response) = $this->conditionalReplaceWithHttpInfo($order_id, $symbol, $p_r_qty, $p_r_price, $p_r_trigger_price);
        return $response;
    }

    /**
     * Operation conditionalReplaceWithHttpInfo
     *
     * Replace conditional order. Only incomplete orders can be modified.
     *
     * @param  string $order_id Order ID. (required)
     * @param  string $symbol Contract type. (required)
     * @param  float $p_r_qty Order quantity. (optional)
     * @param  double $p_r_price Order price. (optional)
     * @param  double $p_r_trigger_price Trigger price. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function conditionalReplaceWithHttpInfo($order_id, $symbol, $p_r_qty = null, $p_r_price = null, $p_r_trigger_price = null)
    {
        $returnType = 'object';
        $request = $this->conditionalReplaceRequest($order_id, $symbol, $p_r_qty, $p_r_price, $p_r_trigger_price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation conditionalReplaceAsync
     *
     * Replace conditional order. Only incomplete orders can be modified.
     *
     * @param  string $order_id Order ID. (required)
     * @param  string $symbol Contract type. (required)
     * @param  float $p_r_qty Order quantity. (optional)
     * @param  double $p_r_price Order price. (optional)
     * @param  double $p_r_trigger_price Trigger price. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalReplaceAsync($order_id, $symbol, $p_r_qty = null, $p_r_price = null, $p_r_trigger_price = null)
    {
        return $this->conditionalReplaceAsyncWithHttpInfo($order_id, $symbol, $p_r_qty, $p_r_price, $p_r_trigger_price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation conditionalReplaceAsyncWithHttpInfo
     *
     * Replace conditional order. Only incomplete orders can be modified.
     *
     * @param  string $order_id Order ID. (required)
     * @param  string $symbol Contract type. (required)
     * @param  float $p_r_qty Order quantity. (optional)
     * @param  double $p_r_price Order price. (optional)
     * @param  double $p_r_trigger_price Trigger price. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function conditionalReplaceAsyncWithHttpInfo($order_id, $symbol, $p_r_qty = null, $p_r_price = null, $p_r_trigger_price = null)
    {
        $returnType = 'object';
        $request = $this->conditionalReplaceRequest($order_id, $symbol, $p_r_qty, $p_r_price, $p_r_trigger_price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'conditionalReplace'
     *
     * @param  string $order_id Order ID. (required)
     * @param  string $symbol Contract type. (required)
     * @param  float $p_r_qty Order quantity. (optional)
     * @param  double $p_r_price Order price. (optional)
     * @param  double $p_r_trigger_price Trigger price. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function conditionalReplaceRequest($order_id, $symbol, $p_r_qty = null, $p_r_price = null, $p_r_trigger_price = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling conditionalReplace'
            );
        }
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling conditionalReplace'
            );
        }

        $resourcePath = '/open-api/stop-order/replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($order_id !== null) {
            $formParams['order_id'] = ObjectSerializer::toFormValue($order_id);
        }
        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = ObjectSerializer::toFormValue($symbol);
        }
        // form params
        if ($p_r_qty !== null) {
            $formParams['p_r_qty'] = ObjectSerializer::toFormValue($p_r_qty);
        }
        // form params
        if ($p_r_price !== null) {
            $formParams['p_r_price'] = ObjectSerializer::toFormValue($p_r_price);
        }
        // form params
        if ($p_r_trigger_price !== null) {
            $formParams['p_r_trigger_price'] = ObjectSerializer::toFormValue($p_r_trigger_price);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sign');
        if ($apiKey !== null) {
            $queryParams['sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
