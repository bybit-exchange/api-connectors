<?php
/**
 * WalletBalance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WalletBalance Class Doc Comment
 *
 * @category Class
 * @description Get wallet balance response
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WalletBalance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WalletBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'equity' => 'double',
        'available_balance' => 'double',
        'used_margin' => 'double',
        'order_margin' => 'double',
        'position_margin' => 'double',
        'occ_closing_fee' => 'double',
        'occ_funding_fee' => 'double',
        'wallet_balance' => 'double',
        'realised_pnl' => 'double',
        'unrealised_pnl' => 'double',
        'cum_realised_pnl' => 'double',
        'given_cash' => 'double',
        'service_cash' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'equity' => 'double',
        'available_balance' => 'double',
        'used_margin' => 'double',
        'order_margin' => 'double',
        'position_margin' => 'double',
        'occ_closing_fee' => 'double',
        'occ_funding_fee' => 'double',
        'wallet_balance' => 'double',
        'realised_pnl' => 'double',
        'unrealised_pnl' => 'double',
        'cum_realised_pnl' => 'double',
        'given_cash' => 'double',
        'service_cash' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'equity' => 'equity',
        'available_balance' => 'available_balance',
        'used_margin' => 'used_margin',
        'order_margin' => 'order_margin',
        'position_margin' => 'position_margin',
        'occ_closing_fee' => 'occ_closing_fee',
        'occ_funding_fee' => 'occ_funding_fee',
        'wallet_balance' => 'wallet_balance',
        'realised_pnl' => 'realised_pnl',
        'unrealised_pnl' => 'unrealised_pnl',
        'cum_realised_pnl' => 'cum_realised_pnl',
        'given_cash' => 'given_cash',
        'service_cash' => 'service_cash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'equity' => 'setEquity',
        'available_balance' => 'setAvailableBalance',
        'used_margin' => 'setUsedMargin',
        'order_margin' => 'setOrderMargin',
        'position_margin' => 'setPositionMargin',
        'occ_closing_fee' => 'setOccClosingFee',
        'occ_funding_fee' => 'setOccFundingFee',
        'wallet_balance' => 'setWalletBalance',
        'realised_pnl' => 'setRealisedPnl',
        'unrealised_pnl' => 'setUnrealisedPnl',
        'cum_realised_pnl' => 'setCumRealisedPnl',
        'given_cash' => 'setGivenCash',
        'service_cash' => 'setServiceCash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'equity' => 'getEquity',
        'available_balance' => 'getAvailableBalance',
        'used_margin' => 'getUsedMargin',
        'order_margin' => 'getOrderMargin',
        'position_margin' => 'getPositionMargin',
        'occ_closing_fee' => 'getOccClosingFee',
        'occ_funding_fee' => 'getOccFundingFee',
        'wallet_balance' => 'getWalletBalance',
        'realised_pnl' => 'getRealisedPnl',
        'unrealised_pnl' => 'getUnrealisedPnl',
        'cum_realised_pnl' => 'getCumRealisedPnl',
        'given_cash' => 'getGivenCash',
        'service_cash' => 'getServiceCash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['equity'] = isset($data['equity']) ? $data['equity'] : null;
        $this->container['available_balance'] = isset($data['available_balance']) ? $data['available_balance'] : null;
        $this->container['used_margin'] = isset($data['used_margin']) ? $data['used_margin'] : null;
        $this->container['order_margin'] = isset($data['order_margin']) ? $data['order_margin'] : null;
        $this->container['position_margin'] = isset($data['position_margin']) ? $data['position_margin'] : null;
        $this->container['occ_closing_fee'] = isset($data['occ_closing_fee']) ? $data['occ_closing_fee'] : null;
        $this->container['occ_funding_fee'] = isset($data['occ_funding_fee']) ? $data['occ_funding_fee'] : null;
        $this->container['wallet_balance'] = isset($data['wallet_balance']) ? $data['wallet_balance'] : null;
        $this->container['realised_pnl'] = isset($data['realised_pnl']) ? $data['realised_pnl'] : null;
        $this->container['unrealised_pnl'] = isset($data['unrealised_pnl']) ? $data['unrealised_pnl'] : null;
        $this->container['cum_realised_pnl'] = isset($data['cum_realised_pnl']) ? $data['cum_realised_pnl'] : null;
        $this->container['given_cash'] = isset($data['given_cash']) ? $data['given_cash'] : null;
        $this->container['service_cash'] = isset($data['service_cash']) ? $data['service_cash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets equity
     *
     * @return double
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param double $equity equity
     *
     * @return $this
     */
    public function setEquity($equity)
    {
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return double
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param double $available_balance available_balance
     *
     * @return $this
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets used_margin
     *
     * @return double
     */
    public function getUsedMargin()
    {
        return $this->container['used_margin'];
    }

    /**
     * Sets used_margin
     *
     * @param double $used_margin used_margin
     *
     * @return $this
     */
    public function setUsedMargin($used_margin)
    {
        $this->container['used_margin'] = $used_margin;

        return $this;
    }

    /**
     * Gets order_margin
     *
     * @return double
     */
    public function getOrderMargin()
    {
        return $this->container['order_margin'];
    }

    /**
     * Sets order_margin
     *
     * @param double $order_margin order_margin
     *
     * @return $this
     */
    public function setOrderMargin($order_margin)
    {
        $this->container['order_margin'] = $order_margin;

        return $this;
    }

    /**
     * Gets position_margin
     *
     * @return double
     */
    public function getPositionMargin()
    {
        return $this->container['position_margin'];
    }

    /**
     * Sets position_margin
     *
     * @param double $position_margin position_margin
     *
     * @return $this
     */
    public function setPositionMargin($position_margin)
    {
        $this->container['position_margin'] = $position_margin;

        return $this;
    }

    /**
     * Gets occ_closing_fee
     *
     * @return double
     */
    public function getOccClosingFee()
    {
        return $this->container['occ_closing_fee'];
    }

    /**
     * Sets occ_closing_fee
     *
     * @param double $occ_closing_fee occ_closing_fee
     *
     * @return $this
     */
    public function setOccClosingFee($occ_closing_fee)
    {
        $this->container['occ_closing_fee'] = $occ_closing_fee;

        return $this;
    }

    /**
     * Gets occ_funding_fee
     *
     * @return double
     */
    public function getOccFundingFee()
    {
        return $this->container['occ_funding_fee'];
    }

    /**
     * Sets occ_funding_fee
     *
     * @param double $occ_funding_fee occ_funding_fee
     *
     * @return $this
     */
    public function setOccFundingFee($occ_funding_fee)
    {
        $this->container['occ_funding_fee'] = $occ_funding_fee;

        return $this;
    }

    /**
     * Gets wallet_balance
     *
     * @return double
     */
    public function getWalletBalance()
    {
        return $this->container['wallet_balance'];
    }

    /**
     * Sets wallet_balance
     *
     * @param double $wallet_balance wallet_balance
     *
     * @return $this
     */
    public function setWalletBalance($wallet_balance)
    {
        $this->container['wallet_balance'] = $wallet_balance;

        return $this;
    }

    /**
     * Gets realised_pnl
     *
     * @return double
     */
    public function getRealisedPnl()
    {
        return $this->container['realised_pnl'];
    }

    /**
     * Sets realised_pnl
     *
     * @param double $realised_pnl realised_pnl
     *
     * @return $this
     */
    public function setRealisedPnl($realised_pnl)
    {
        $this->container['realised_pnl'] = $realised_pnl;

        return $this;
    }

    /**
     * Gets unrealised_pnl
     *
     * @return double
     */
    public function getUnrealisedPnl()
    {
        return $this->container['unrealised_pnl'];
    }

    /**
     * Sets unrealised_pnl
     *
     * @param double $unrealised_pnl unrealised_pnl
     *
     * @return $this
     */
    public function setUnrealisedPnl($unrealised_pnl)
    {
        $this->container['unrealised_pnl'] = $unrealised_pnl;

        return $this;
    }

    /**
     * Gets cum_realised_pnl
     *
     * @return double
     */
    public function getCumRealisedPnl()
    {
        return $this->container['cum_realised_pnl'];
    }

    /**
     * Sets cum_realised_pnl
     *
     * @param double $cum_realised_pnl cum_realised_pnl
     *
     * @return $this
     */
    public function setCumRealisedPnl($cum_realised_pnl)
    {
        $this->container['cum_realised_pnl'] = $cum_realised_pnl;

        return $this;
    }

    /**
     * Gets given_cash
     *
     * @return double
     */
    public function getGivenCash()
    {
        return $this->container['given_cash'];
    }

    /**
     * Sets given_cash
     *
     * @param double $given_cash given_cash
     *
     * @return $this
     */
    public function setGivenCash($given_cash)
    {
        $this->container['given_cash'] = $given_cash;

        return $this;
    }

    /**
     * Gets service_cash
     *
     * @return double
     */
    public function getServiceCash()
    {
        return $this->container['service_cash'];
    }

    /**
     * Sets service_cash
     *
     * @param double $service_cash service_cash
     *
     * @return $this
     */
    public function setServiceCash($service_cash)
    {
        $this->container['service_cash'] = $service_cash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


