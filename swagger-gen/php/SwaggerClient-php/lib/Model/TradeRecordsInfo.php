<?php
/**
 * TradeRecordsInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TradeRecordsInfo Class Doc Comment
 *
 * @category Class
 * @description Get the trade records of a order response
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TradeRecordsInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TradeRecordsInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'closed_size' => 'float',
        'cross_seq' => 'float',
        'exec_fee' => 'string',
        'exec_id' => 'string',
        'exec_price' => 'string',
        'exec_qty' => 'float',
        'exec_time' => 'string',
        'exec_type' => 'string',
        'exec_value' => 'string',
        'fee_rate' => 'string',
        'last_liquidity_ind' => 'string',
        'leaves_qty' => 'float',
        'nth_fill' => 'float',
        'order_id' => 'string',
        'order_price' => 'string',
        'order_qty' => 'float',
        'order_type' => 'string',
        'side' => 'string',
        'symbol' => 'string',
        'user_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'closed_size' => 'int32',
        'cross_seq' => 'int32',
        'exec_fee' => null,
        'exec_id' => null,
        'exec_price' => null,
        'exec_qty' => 'int32',
        'exec_time' => null,
        'exec_type' => null,
        'exec_value' => null,
        'fee_rate' => null,
        'last_liquidity_ind' => null,
        'leaves_qty' => 'int32',
        'nth_fill' => 'int32',
        'order_id' => null,
        'order_price' => null,
        'order_qty' => 'int32',
        'order_type' => null,
        'side' => null,
        'symbol' => null,
        'user_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closed_size' => 'closed_size',
        'cross_seq' => 'cross_seq',
        'exec_fee' => 'exec_fee',
        'exec_id' => 'exec_id',
        'exec_price' => 'exec_price',
        'exec_qty' => 'exec_qty',
        'exec_time' => 'exec_time',
        'exec_type' => 'exec_type',
        'exec_value' => 'exec_value',
        'fee_rate' => 'fee_rate',
        'last_liquidity_ind' => 'last_liquidity_ind',
        'leaves_qty' => 'leaves_qty',
        'nth_fill' => 'nth_fill',
        'order_id' => 'order_id',
        'order_price' => 'order_price',
        'order_qty' => 'order_qty',
        'order_type' => 'order_type',
        'side' => 'side',
        'symbol' => 'symbol',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closed_size' => 'setClosedSize',
        'cross_seq' => 'setCrossSeq',
        'exec_fee' => 'setExecFee',
        'exec_id' => 'setExecId',
        'exec_price' => 'setExecPrice',
        'exec_qty' => 'setExecQty',
        'exec_time' => 'setExecTime',
        'exec_type' => 'setExecType',
        'exec_value' => 'setExecValue',
        'fee_rate' => 'setFeeRate',
        'last_liquidity_ind' => 'setLastLiquidityInd',
        'leaves_qty' => 'setLeavesQty',
        'nth_fill' => 'setNthFill',
        'order_id' => 'setOrderId',
        'order_price' => 'setOrderPrice',
        'order_qty' => 'setOrderQty',
        'order_type' => 'setOrderType',
        'side' => 'setSide',
        'symbol' => 'setSymbol',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closed_size' => 'getClosedSize',
        'cross_seq' => 'getCrossSeq',
        'exec_fee' => 'getExecFee',
        'exec_id' => 'getExecId',
        'exec_price' => 'getExecPrice',
        'exec_qty' => 'getExecQty',
        'exec_time' => 'getExecTime',
        'exec_type' => 'getExecType',
        'exec_value' => 'getExecValue',
        'fee_rate' => 'getFeeRate',
        'last_liquidity_ind' => 'getLastLiquidityInd',
        'leaves_qty' => 'getLeavesQty',
        'nth_fill' => 'getNthFill',
        'order_id' => 'getOrderId',
        'order_price' => 'getOrderPrice',
        'order_qty' => 'getOrderQty',
        'order_type' => 'getOrderType',
        'side' => 'getSide',
        'symbol' => 'getSymbol',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closed_size'] = isset($data['closed_size']) ? $data['closed_size'] : null;
        $this->container['cross_seq'] = isset($data['cross_seq']) ? $data['cross_seq'] : null;
        $this->container['exec_fee'] = isset($data['exec_fee']) ? $data['exec_fee'] : null;
        $this->container['exec_id'] = isset($data['exec_id']) ? $data['exec_id'] : null;
        $this->container['exec_price'] = isset($data['exec_price']) ? $data['exec_price'] : null;
        $this->container['exec_qty'] = isset($data['exec_qty']) ? $data['exec_qty'] : null;
        $this->container['exec_time'] = isset($data['exec_time']) ? $data['exec_time'] : null;
        $this->container['exec_type'] = isset($data['exec_type']) ? $data['exec_type'] : null;
        $this->container['exec_value'] = isset($data['exec_value']) ? $data['exec_value'] : null;
        $this->container['fee_rate'] = isset($data['fee_rate']) ? $data['fee_rate'] : null;
        $this->container['last_liquidity_ind'] = isset($data['last_liquidity_ind']) ? $data['last_liquidity_ind'] : null;
        $this->container['leaves_qty'] = isset($data['leaves_qty']) ? $data['leaves_qty'] : null;
        $this->container['nth_fill'] = isset($data['nth_fill']) ? $data['nth_fill'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_price'] = isset($data['order_price']) ? $data['order_price'] : null;
        $this->container['order_qty'] = isset($data['order_qty']) ? $data['order_qty'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closed_size
     *
     * @return float
     */
    public function getClosedSize()
    {
        return $this->container['closed_size'];
    }

    /**
     * Sets closed_size
     *
     * @param float $closed_size closed_size
     *
     * @return $this
     */
    public function setClosedSize($closed_size)
    {
        $this->container['closed_size'] = $closed_size;

        return $this;
    }

    /**
     * Gets cross_seq
     *
     * @return float
     */
    public function getCrossSeq()
    {
        return $this->container['cross_seq'];
    }

    /**
     * Sets cross_seq
     *
     * @param float $cross_seq cross_seq
     *
     * @return $this
     */
    public function setCrossSeq($cross_seq)
    {
        $this->container['cross_seq'] = $cross_seq;

        return $this;
    }

    /**
     * Gets exec_fee
     *
     * @return string
     */
    public function getExecFee()
    {
        return $this->container['exec_fee'];
    }

    /**
     * Sets exec_fee
     *
     * @param string $exec_fee exec_fee
     *
     * @return $this
     */
    public function setExecFee($exec_fee)
    {
        $this->container['exec_fee'] = $exec_fee;

        return $this;
    }

    /**
     * Gets exec_id
     *
     * @return string
     */
    public function getExecId()
    {
        return $this->container['exec_id'];
    }

    /**
     * Sets exec_id
     *
     * @param string $exec_id exec_id
     *
     * @return $this
     */
    public function setExecId($exec_id)
    {
        $this->container['exec_id'] = $exec_id;

        return $this;
    }

    /**
     * Gets exec_price
     *
     * @return string
     */
    public function getExecPrice()
    {
        return $this->container['exec_price'];
    }

    /**
     * Sets exec_price
     *
     * @param string $exec_price exec_price
     *
     * @return $this
     */
    public function setExecPrice($exec_price)
    {
        $this->container['exec_price'] = $exec_price;

        return $this;
    }

    /**
     * Gets exec_qty
     *
     * @return float
     */
    public function getExecQty()
    {
        return $this->container['exec_qty'];
    }

    /**
     * Sets exec_qty
     *
     * @param float $exec_qty exec_qty
     *
     * @return $this
     */
    public function setExecQty($exec_qty)
    {
        $this->container['exec_qty'] = $exec_qty;

        return $this;
    }

    /**
     * Gets exec_time
     *
     * @return string
     */
    public function getExecTime()
    {
        return $this->container['exec_time'];
    }

    /**
     * Sets exec_time
     *
     * @param string $exec_time exec_time
     *
     * @return $this
     */
    public function setExecTime($exec_time)
    {
        $this->container['exec_time'] = $exec_time;

        return $this;
    }

    /**
     * Gets exec_type
     *
     * @return string
     */
    public function getExecType()
    {
        return $this->container['exec_type'];
    }

    /**
     * Sets exec_type
     *
     * @param string $exec_type exec_type
     *
     * @return $this
     */
    public function setExecType($exec_type)
    {
        $this->container['exec_type'] = $exec_type;

        return $this;
    }

    /**
     * Gets exec_value
     *
     * @return string
     */
    public function getExecValue()
    {
        return $this->container['exec_value'];
    }

    /**
     * Sets exec_value
     *
     * @param string $exec_value exec_value
     *
     * @return $this
     */
    public function setExecValue($exec_value)
    {
        $this->container['exec_value'] = $exec_value;

        return $this;
    }

    /**
     * Gets fee_rate
     *
     * @return string
     */
    public function getFeeRate()
    {
        return $this->container['fee_rate'];
    }

    /**
     * Sets fee_rate
     *
     * @param string $fee_rate fee_rate
     *
     * @return $this
     */
    public function setFeeRate($fee_rate)
    {
        $this->container['fee_rate'] = $fee_rate;

        return $this;
    }

    /**
     * Gets last_liquidity_ind
     *
     * @return string
     */
    public function getLastLiquidityInd()
    {
        return $this->container['last_liquidity_ind'];
    }

    /**
     * Sets last_liquidity_ind
     *
     * @param string $last_liquidity_ind last_liquidity_ind
     *
     * @return $this
     */
    public function setLastLiquidityInd($last_liquidity_ind)
    {
        $this->container['last_liquidity_ind'] = $last_liquidity_ind;

        return $this;
    }

    /**
     * Gets leaves_qty
     *
     * @return float
     */
    public function getLeavesQty()
    {
        return $this->container['leaves_qty'];
    }

    /**
     * Sets leaves_qty
     *
     * @param float $leaves_qty leaves_qty
     *
     * @return $this
     */
    public function setLeavesQty($leaves_qty)
    {
        $this->container['leaves_qty'] = $leaves_qty;

        return $this;
    }

    /**
     * Gets nth_fill
     *
     * @return float
     */
    public function getNthFill()
    {
        return $this->container['nth_fill'];
    }

    /**
     * Sets nth_fill
     *
     * @param float $nth_fill nth_fill
     *
     * @return $this
     */
    public function setNthFill($nth_fill)
    {
        $this->container['nth_fill'] = $nth_fill;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_price
     *
     * @return string
     */
    public function getOrderPrice()
    {
        return $this->container['order_price'];
    }

    /**
     * Sets order_price
     *
     * @param string $order_price order_price
     *
     * @return $this
     */
    public function setOrderPrice($order_price)
    {
        $this->container['order_price'] = $order_price;

        return $this;
    }

    /**
     * Gets order_qty
     *
     * @return float
     */
    public function getOrderQty()
    {
        return $this->container['order_qty'];
    }

    /**
     * Sets order_qty
     *
     * @param float $order_qty order_qty
     *
     * @return $this
     */
    public function setOrderQty($order_qty)
    {
        $this->container['order_qty'] = $order_qty;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type order_type
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side side
     *
     * @return $this
     */
    public function setSide($side)
    {
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


