/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Set Trading-Stop Condition response
    /// </summary>
    [DataContract]
    public partial class TradingStopRes :  IEquatable<TradingStopRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingStopRes" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="side">side.</param>
        /// <param name="size">size.</param>
        /// <param name="positionValue">positionValue.</param>
        /// <param name="entryPrice">entryPrice.</param>
        /// <param name="riskId">riskId.</param>
        /// <param name="autoAddMargin">autoAddMargin.</param>
        /// <param name="leverage">leverage.</param>
        /// <param name="positionMargin">positionMargin.</param>
        /// <param name="liqPrice">liqPrice.</param>
        /// <param name="bustPrice">bustPrice.</param>
        /// <param name="occClosingFee">occClosingFee.</param>
        /// <param name="occFundingFee">occFundingFee.</param>
        /// <param name="takeProfit">takeProfit.</param>
        /// <param name="stopLoss">stopLoss.</param>
        /// <param name="positionStatus">positionStatus.</param>
        /// <param name="deleverageIndicator">deleverageIndicator.</param>
        /// <param name="ocCalcData">ocCalcData.</param>
        /// <param name="orderMargin">orderMargin.</param>
        /// <param name="walletBalance">walletBalance.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="cumRealisedPnl">cumRealisedPnl.</param>
        /// <param name="cumCommission">cumCommission.</param>
        /// <param name="crossSeq">crossSeq.</param>
        /// <param name="positionSeq">positionSeq.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public TradingStopRes(decimal? id = default(decimal?), decimal? userId = default(decimal?), string symbol = default(string), string side = default(string), decimal? size = default(decimal?), double? positionValue = default(double?), double? entryPrice = default(double?), decimal? riskId = default(decimal?), double? autoAddMargin = default(double?), double? leverage = default(double?), double? positionMargin = default(double?), double? liqPrice = default(double?), double? bustPrice = default(double?), double? occClosingFee = default(double?), double? occFundingFee = default(double?), double? takeProfit = default(double?), double? stopLoss = default(double?), string positionStatus = default(string), decimal? deleverageIndicator = default(decimal?), string ocCalcData = default(string), double? orderMargin = default(double?), double? walletBalance = default(double?), double? realisedPnl = default(double?), double? cumRealisedPnl = default(double?), decimal? cumCommission = default(decimal?), decimal? crossSeq = default(decimal?), decimal? positionSeq = default(decimal?), string createdAt = default(string), string updatedAt = default(string))
        {
            this.Id = id;
            this.UserId = userId;
            this.Symbol = symbol;
            this.Side = side;
            this.Size = size;
            this.PositionValue = positionValue;
            this.EntryPrice = entryPrice;
            this.RiskId = riskId;
            this.AutoAddMargin = autoAddMargin;
            this.Leverage = leverage;
            this.PositionMargin = positionMargin;
            this.LiqPrice = liqPrice;
            this.BustPrice = bustPrice;
            this.OccClosingFee = occClosingFee;
            this.OccFundingFee = occFundingFee;
            this.TakeProfit = takeProfit;
            this.StopLoss = stopLoss;
            this.PositionStatus = positionStatus;
            this.DeleverageIndicator = deleverageIndicator;
            this.OcCalcData = ocCalcData;
            this.OrderMargin = orderMargin;
            this.WalletBalance = walletBalance;
            this.RealisedPnl = realisedPnl;
            this.CumRealisedPnl = cumRealisedPnl;
            this.CumCommission = cumCommission;
            this.CrossSeq = crossSeq;
            this.PositionSeq = positionSeq;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }

        /// <summary>
        /// Gets or Sets PositionValue
        /// </summary>
        [DataMember(Name="position_value", EmitDefaultValue=false)]
        public double? PositionValue { get; set; }

        /// <summary>
        /// Gets or Sets EntryPrice
        /// </summary>
        [DataMember(Name="entry_price", EmitDefaultValue=false)]
        public double? EntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets RiskId
        /// </summary>
        [DataMember(Name="risk_id", EmitDefaultValue=false)]
        public decimal? RiskId { get; set; }

        /// <summary>
        /// Gets or Sets AutoAddMargin
        /// </summary>
        [DataMember(Name="auto_add_margin", EmitDefaultValue=false)]
        public double? AutoAddMargin { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public double? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets PositionMargin
        /// </summary>
        [DataMember(Name="position_margin", EmitDefaultValue=false)]
        public double? PositionMargin { get; set; }

        /// <summary>
        /// Gets or Sets LiqPrice
        /// </summary>
        [DataMember(Name="liq_price", EmitDefaultValue=false)]
        public double? LiqPrice { get; set; }

        /// <summary>
        /// Gets or Sets BustPrice
        /// </summary>
        [DataMember(Name="bust_price", EmitDefaultValue=false)]
        public double? BustPrice { get; set; }

        /// <summary>
        /// Gets or Sets OccClosingFee
        /// </summary>
        [DataMember(Name="occ_closing_fee", EmitDefaultValue=false)]
        public double? OccClosingFee { get; set; }

        /// <summary>
        /// Gets or Sets OccFundingFee
        /// </summary>
        [DataMember(Name="occ_funding_fee", EmitDefaultValue=false)]
        public double? OccFundingFee { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfit
        /// </summary>
        [DataMember(Name="take_profit", EmitDefaultValue=false)]
        public double? TakeProfit { get; set; }

        /// <summary>
        /// Gets or Sets StopLoss
        /// </summary>
        [DataMember(Name="stop_loss", EmitDefaultValue=false)]
        public double? StopLoss { get; set; }

        /// <summary>
        /// Gets or Sets PositionStatus
        /// </summary>
        [DataMember(Name="position_status", EmitDefaultValue=false)]
        public string PositionStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeleverageIndicator
        /// </summary>
        [DataMember(Name="deleverage_indicator", EmitDefaultValue=false)]
        public decimal? DeleverageIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OcCalcData
        /// </summary>
        [DataMember(Name="oc_calc_data", EmitDefaultValue=false)]
        public string OcCalcData { get; set; }

        /// <summary>
        /// Gets or Sets OrderMargin
        /// </summary>
        [DataMember(Name="order_margin", EmitDefaultValue=false)]
        public double? OrderMargin { get; set; }

        /// <summary>
        /// Gets or Sets WalletBalance
        /// </summary>
        [DataMember(Name="wallet_balance", EmitDefaultValue=false)]
        public double? WalletBalance { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name="realised_pnl", EmitDefaultValue=false)]
        public double? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets CumRealisedPnl
        /// </summary>
        [DataMember(Name="cum_realised_pnl", EmitDefaultValue=false)]
        public double? CumRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets CumCommission
        /// </summary>
        [DataMember(Name="cum_commission", EmitDefaultValue=false)]
        public decimal? CumCommission { get; set; }

        /// <summary>
        /// Gets or Sets CrossSeq
        /// </summary>
        [DataMember(Name="cross_seq", EmitDefaultValue=false)]
        public decimal? CrossSeq { get; set; }

        /// <summary>
        /// Gets or Sets PositionSeq
        /// </summary>
        [DataMember(Name="position_seq", EmitDefaultValue=false)]
        public decimal? PositionSeq { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradingStopRes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  PositionValue: ").Append(PositionValue).Append("\n");
            sb.Append("  EntryPrice: ").Append(EntryPrice).Append("\n");
            sb.Append("  RiskId: ").Append(RiskId).Append("\n");
            sb.Append("  AutoAddMargin: ").Append(AutoAddMargin).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  PositionMargin: ").Append(PositionMargin).Append("\n");
            sb.Append("  LiqPrice: ").Append(LiqPrice).Append("\n");
            sb.Append("  BustPrice: ").Append(BustPrice).Append("\n");
            sb.Append("  OccClosingFee: ").Append(OccClosingFee).Append("\n");
            sb.Append("  OccFundingFee: ").Append(OccFundingFee).Append("\n");
            sb.Append("  TakeProfit: ").Append(TakeProfit).Append("\n");
            sb.Append("  StopLoss: ").Append(StopLoss).Append("\n");
            sb.Append("  PositionStatus: ").Append(PositionStatus).Append("\n");
            sb.Append("  DeleverageIndicator: ").Append(DeleverageIndicator).Append("\n");
            sb.Append("  OcCalcData: ").Append(OcCalcData).Append("\n");
            sb.Append("  OrderMargin: ").Append(OrderMargin).Append("\n");
            sb.Append("  WalletBalance: ").Append(WalletBalance).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  CumRealisedPnl: ").Append(CumRealisedPnl).Append("\n");
            sb.Append("  CumCommission: ").Append(CumCommission).Append("\n");
            sb.Append("  CrossSeq: ").Append(CrossSeq).Append("\n");
            sb.Append("  PositionSeq: ").Append(PositionSeq).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingStopRes);
        }

        /// <summary>
        /// Returns true if TradingStopRes instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingStopRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingStopRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.PositionValue == input.PositionValue ||
                    (this.PositionValue != null &&
                    this.PositionValue.Equals(input.PositionValue))
                ) && 
                (
                    this.EntryPrice == input.EntryPrice ||
                    (this.EntryPrice != null &&
                    this.EntryPrice.Equals(input.EntryPrice))
                ) && 
                (
                    this.RiskId == input.RiskId ||
                    (this.RiskId != null &&
                    this.RiskId.Equals(input.RiskId))
                ) && 
                (
                    this.AutoAddMargin == input.AutoAddMargin ||
                    (this.AutoAddMargin != null &&
                    this.AutoAddMargin.Equals(input.AutoAddMargin))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.PositionMargin == input.PositionMargin ||
                    (this.PositionMargin != null &&
                    this.PositionMargin.Equals(input.PositionMargin))
                ) && 
                (
                    this.LiqPrice == input.LiqPrice ||
                    (this.LiqPrice != null &&
                    this.LiqPrice.Equals(input.LiqPrice))
                ) && 
                (
                    this.BustPrice == input.BustPrice ||
                    (this.BustPrice != null &&
                    this.BustPrice.Equals(input.BustPrice))
                ) && 
                (
                    this.OccClosingFee == input.OccClosingFee ||
                    (this.OccClosingFee != null &&
                    this.OccClosingFee.Equals(input.OccClosingFee))
                ) && 
                (
                    this.OccFundingFee == input.OccFundingFee ||
                    (this.OccFundingFee != null &&
                    this.OccFundingFee.Equals(input.OccFundingFee))
                ) && 
                (
                    this.TakeProfit == input.TakeProfit ||
                    (this.TakeProfit != null &&
                    this.TakeProfit.Equals(input.TakeProfit))
                ) && 
                (
                    this.StopLoss == input.StopLoss ||
                    (this.StopLoss != null &&
                    this.StopLoss.Equals(input.StopLoss))
                ) && 
                (
                    this.PositionStatus == input.PositionStatus ||
                    (this.PositionStatus != null &&
                    this.PositionStatus.Equals(input.PositionStatus))
                ) && 
                (
                    this.DeleverageIndicator == input.DeleverageIndicator ||
                    (this.DeleverageIndicator != null &&
                    this.DeleverageIndicator.Equals(input.DeleverageIndicator))
                ) && 
                (
                    this.OcCalcData == input.OcCalcData ||
                    (this.OcCalcData != null &&
                    this.OcCalcData.Equals(input.OcCalcData))
                ) && 
                (
                    this.OrderMargin == input.OrderMargin ||
                    (this.OrderMargin != null &&
                    this.OrderMargin.Equals(input.OrderMargin))
                ) && 
                (
                    this.WalletBalance == input.WalletBalance ||
                    (this.WalletBalance != null &&
                    this.WalletBalance.Equals(input.WalletBalance))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.CumRealisedPnl == input.CumRealisedPnl ||
                    (this.CumRealisedPnl != null &&
                    this.CumRealisedPnl.Equals(input.CumRealisedPnl))
                ) && 
                (
                    this.CumCommission == input.CumCommission ||
                    (this.CumCommission != null &&
                    this.CumCommission.Equals(input.CumCommission))
                ) && 
                (
                    this.CrossSeq == input.CrossSeq ||
                    (this.CrossSeq != null &&
                    this.CrossSeq.Equals(input.CrossSeq))
                ) && 
                (
                    this.PositionSeq == input.PositionSeq ||
                    (this.PositionSeq != null &&
                    this.PositionSeq.Equals(input.PositionSeq))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.PositionValue != null)
                    hashCode = hashCode * 59 + this.PositionValue.GetHashCode();
                if (this.EntryPrice != null)
                    hashCode = hashCode * 59 + this.EntryPrice.GetHashCode();
                if (this.RiskId != null)
                    hashCode = hashCode * 59 + this.RiskId.GetHashCode();
                if (this.AutoAddMargin != null)
                    hashCode = hashCode * 59 + this.AutoAddMargin.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.PositionMargin != null)
                    hashCode = hashCode * 59 + this.PositionMargin.GetHashCode();
                if (this.LiqPrice != null)
                    hashCode = hashCode * 59 + this.LiqPrice.GetHashCode();
                if (this.BustPrice != null)
                    hashCode = hashCode * 59 + this.BustPrice.GetHashCode();
                if (this.OccClosingFee != null)
                    hashCode = hashCode * 59 + this.OccClosingFee.GetHashCode();
                if (this.OccFundingFee != null)
                    hashCode = hashCode * 59 + this.OccFundingFee.GetHashCode();
                if (this.TakeProfit != null)
                    hashCode = hashCode * 59 + this.TakeProfit.GetHashCode();
                if (this.StopLoss != null)
                    hashCode = hashCode * 59 + this.StopLoss.GetHashCode();
                if (this.PositionStatus != null)
                    hashCode = hashCode * 59 + this.PositionStatus.GetHashCode();
                if (this.DeleverageIndicator != null)
                    hashCode = hashCode * 59 + this.DeleverageIndicator.GetHashCode();
                if (this.OcCalcData != null)
                    hashCode = hashCode * 59 + this.OcCalcData.GetHashCode();
                if (this.OrderMargin != null)
                    hashCode = hashCode * 59 + this.OrderMargin.GetHashCode();
                if (this.WalletBalance != null)
                    hashCode = hashCode * 59 + this.WalletBalance.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.CumRealisedPnl != null)
                    hashCode = hashCode * 59 + this.CumRealisedPnl.GetHashCode();
                if (this.CumCommission != null)
                    hashCode = hashCode * 59 + this.CumCommission.GetHashCode();
                if (this.CrossSeq != null)
                    hashCode = hashCode * 59 + this.CrossSeq.GetHashCode();
                if (this.PositionSeq != null)
                    hashCode = hashCode * 59 + this.PositionSeq.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
