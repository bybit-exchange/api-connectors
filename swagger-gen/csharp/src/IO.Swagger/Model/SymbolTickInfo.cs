/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Get the orderbook response
    /// </summary>
    [DataContract]
    public partial class SymbolTickInfo :  IEquatable<SymbolTickInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolTickInfo" /> class.
        /// </summary>
        /// <param name="symbol">symbol.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="askPrice">askPrice.</param>
        /// <param name="lastPrice">lastPrice.</param>
        /// <param name="lastTickDirection">lastTickDirection.</param>
        /// <param name="prevPrice24h">prevPrice24h.</param>
        /// <param name="price24hPcnt">price24hPcnt.</param>
        /// <param name="highPrice24h">highPrice24h.</param>
        /// <param name="lowPrice24h">lowPrice24h.</param>
        /// <param name="prevPrice1h">prevPrice1h.</param>
        /// <param name="price1hPcnt">price1hPcnt.</param>
        /// <param name="markPrice">markPrice.</param>
        /// <param name="indexPrice">indexPrice.</param>
        /// <param name="openInterest">openInterest.</param>
        /// <param name="openValue">openValue.</param>
        /// <param name="totalTurnover">totalTurnover.</param>
        /// <param name="turnover24h">turnover24h.</param>
        /// <param name="totalVolume">totalVolume.</param>
        /// <param name="volume24h">volume24h.</param>
        /// <param name="fundingRate">fundingRate.</param>
        /// <param name="predictedFundingRate">predictedFundingRate.</param>
        /// <param name="nextFundingTime">nextFundingTime.</param>
        /// <param name="countdownHour">countdownHour.</param>
        public SymbolTickInfo(string symbol = default(string), string bidPrice = default(string), string askPrice = default(string), string lastPrice = default(string), string lastTickDirection = default(string), string prevPrice24h = default(string), string price24hPcnt = default(string), string highPrice24h = default(string), string lowPrice24h = default(string), string prevPrice1h = default(string), string price1hPcnt = default(string), string markPrice = default(string), string indexPrice = default(string), decimal? openInterest = default(decimal?), string openValue = default(string), string totalTurnover = default(string), string turnover24h = default(string), decimal? totalVolume = default(decimal?), decimal? volume24h = default(decimal?), string fundingRate = default(string), string predictedFundingRate = default(string), string nextFundingTime = default(string), decimal? countdownHour = default(decimal?))
        {
            this.Symbol = symbol;
            this.BidPrice = bidPrice;
            this.AskPrice = askPrice;
            this.LastPrice = lastPrice;
            this.LastTickDirection = lastTickDirection;
            this.PrevPrice24h = prevPrice24h;
            this.Price24hPcnt = price24hPcnt;
            this.HighPrice24h = highPrice24h;
            this.LowPrice24h = lowPrice24h;
            this.PrevPrice1h = prevPrice1h;
            this.Price1hPcnt = price1hPcnt;
            this.MarkPrice = markPrice;
            this.IndexPrice = indexPrice;
            this.OpenInterest = openInterest;
            this.OpenValue = openValue;
            this.TotalTurnover = totalTurnover;
            this.Turnover24h = turnover24h;
            this.TotalVolume = totalVolume;
            this.Volume24h = volume24h;
            this.FundingRate = fundingRate;
            this.PredictedFundingRate = predictedFundingRate;
            this.NextFundingTime = nextFundingTime;
            this.CountdownHour = countdownHour;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="bid_price", EmitDefaultValue=false)]
        public string BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets AskPrice
        /// </summary>
        [DataMember(Name="ask_price", EmitDefaultValue=false)]
        public string AskPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name="last_price", EmitDefaultValue=false)]
        public string LastPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastTickDirection
        /// </summary>
        [DataMember(Name="last_tick_direction", EmitDefaultValue=false)]
        public string LastTickDirection { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice24h
        /// </summary>
        [DataMember(Name="prev_price_24h", EmitDefaultValue=false)]
        public string PrevPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets Price24hPcnt
        /// </summary>
        [DataMember(Name="price_24h_pcnt", EmitDefaultValue=false)]
        public string Price24hPcnt { get; set; }

        /// <summary>
        /// Gets or Sets HighPrice24h
        /// </summary>
        [DataMember(Name="high_price_24h", EmitDefaultValue=false)]
        public string HighPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets LowPrice24h
        /// </summary>
        [DataMember(Name="low_price_24h", EmitDefaultValue=false)]
        public string LowPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice1h
        /// </summary>
        [DataMember(Name="prev_price_1h", EmitDefaultValue=false)]
        public string PrevPrice1h { get; set; }

        /// <summary>
        /// Gets or Sets Price1hPcnt
        /// </summary>
        [DataMember(Name="price_1h_pcnt", EmitDefaultValue=false)]
        public string Price1hPcnt { get; set; }

        /// <summary>
        /// Gets or Sets MarkPrice
        /// </summary>
        [DataMember(Name="mark_price", EmitDefaultValue=false)]
        public string MarkPrice { get; set; }

        /// <summary>
        /// Gets or Sets IndexPrice
        /// </summary>
        [DataMember(Name="index_price", EmitDefaultValue=false)]
        public string IndexPrice { get; set; }

        /// <summary>
        /// Gets or Sets OpenInterest
        /// </summary>
        [DataMember(Name="open_interest", EmitDefaultValue=false)]
        public decimal? OpenInterest { get; set; }

        /// <summary>
        /// Gets or Sets OpenValue
        /// </summary>
        [DataMember(Name="open_value", EmitDefaultValue=false)]
        public string OpenValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalTurnover
        /// </summary>
        [DataMember(Name="total_turnover", EmitDefaultValue=false)]
        public string TotalTurnover { get; set; }

        /// <summary>
        /// Gets or Sets Turnover24h
        /// </summary>
        [DataMember(Name="turnover_24h", EmitDefaultValue=false)]
        public string Turnover24h { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolume
        /// </summary>
        [DataMember(Name="total_volume", EmitDefaultValue=false)]
        public decimal? TotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets Volume24h
        /// </summary>
        [DataMember(Name="volume_24h", EmitDefaultValue=false)]
        public decimal? Volume24h { get; set; }

        /// <summary>
        /// Gets or Sets FundingRate
        /// </summary>
        [DataMember(Name="funding_rate", EmitDefaultValue=false)]
        public string FundingRate { get; set; }

        /// <summary>
        /// Gets or Sets PredictedFundingRate
        /// </summary>
        [DataMember(Name="predicted_funding_rate", EmitDefaultValue=false)]
        public string PredictedFundingRate { get; set; }

        /// <summary>
        /// Gets or Sets NextFundingTime
        /// </summary>
        [DataMember(Name="next_funding_time", EmitDefaultValue=false)]
        public string NextFundingTime { get; set; }

        /// <summary>
        /// Gets or Sets CountdownHour
        /// </summary>
        [DataMember(Name="countdown_hour", EmitDefaultValue=false)]
        public decimal? CountdownHour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolTickInfo {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  LastTickDirection: ").Append(LastTickDirection).Append("\n");
            sb.Append("  PrevPrice24h: ").Append(PrevPrice24h).Append("\n");
            sb.Append("  Price24hPcnt: ").Append(Price24hPcnt).Append("\n");
            sb.Append("  HighPrice24h: ").Append(HighPrice24h).Append("\n");
            sb.Append("  LowPrice24h: ").Append(LowPrice24h).Append("\n");
            sb.Append("  PrevPrice1h: ").Append(PrevPrice1h).Append("\n");
            sb.Append("  Price1hPcnt: ").Append(Price1hPcnt).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  IndexPrice: ").Append(IndexPrice).Append("\n");
            sb.Append("  OpenInterest: ").Append(OpenInterest).Append("\n");
            sb.Append("  OpenValue: ").Append(OpenValue).Append("\n");
            sb.Append("  TotalTurnover: ").Append(TotalTurnover).Append("\n");
            sb.Append("  Turnover24h: ").Append(Turnover24h).Append("\n");
            sb.Append("  TotalVolume: ").Append(TotalVolume).Append("\n");
            sb.Append("  Volume24h: ").Append(Volume24h).Append("\n");
            sb.Append("  FundingRate: ").Append(FundingRate).Append("\n");
            sb.Append("  PredictedFundingRate: ").Append(PredictedFundingRate).Append("\n");
            sb.Append("  NextFundingTime: ").Append(NextFundingTime).Append("\n");
            sb.Append("  CountdownHour: ").Append(CountdownHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolTickInfo);
        }

        /// <summary>
        /// Returns true if SymbolTickInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolTickInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolTickInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.AskPrice == input.AskPrice ||
                    (this.AskPrice != null &&
                    this.AskPrice.Equals(input.AskPrice))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.LastTickDirection == input.LastTickDirection ||
                    (this.LastTickDirection != null &&
                    this.LastTickDirection.Equals(input.LastTickDirection))
                ) && 
                (
                    this.PrevPrice24h == input.PrevPrice24h ||
                    (this.PrevPrice24h != null &&
                    this.PrevPrice24h.Equals(input.PrevPrice24h))
                ) && 
                (
                    this.Price24hPcnt == input.Price24hPcnt ||
                    (this.Price24hPcnt != null &&
                    this.Price24hPcnt.Equals(input.Price24hPcnt))
                ) && 
                (
                    this.HighPrice24h == input.HighPrice24h ||
                    (this.HighPrice24h != null &&
                    this.HighPrice24h.Equals(input.HighPrice24h))
                ) && 
                (
                    this.LowPrice24h == input.LowPrice24h ||
                    (this.LowPrice24h != null &&
                    this.LowPrice24h.Equals(input.LowPrice24h))
                ) && 
                (
                    this.PrevPrice1h == input.PrevPrice1h ||
                    (this.PrevPrice1h != null &&
                    this.PrevPrice1h.Equals(input.PrevPrice1h))
                ) && 
                (
                    this.Price1hPcnt == input.Price1hPcnt ||
                    (this.Price1hPcnt != null &&
                    this.Price1hPcnt.Equals(input.Price1hPcnt))
                ) && 
                (
                    this.MarkPrice == input.MarkPrice ||
                    (this.MarkPrice != null &&
                    this.MarkPrice.Equals(input.MarkPrice))
                ) && 
                (
                    this.IndexPrice == input.IndexPrice ||
                    (this.IndexPrice != null &&
                    this.IndexPrice.Equals(input.IndexPrice))
                ) && 
                (
                    this.OpenInterest == input.OpenInterest ||
                    (this.OpenInterest != null &&
                    this.OpenInterest.Equals(input.OpenInterest))
                ) && 
                (
                    this.OpenValue == input.OpenValue ||
                    (this.OpenValue != null &&
                    this.OpenValue.Equals(input.OpenValue))
                ) && 
                (
                    this.TotalTurnover == input.TotalTurnover ||
                    (this.TotalTurnover != null &&
                    this.TotalTurnover.Equals(input.TotalTurnover))
                ) && 
                (
                    this.Turnover24h == input.Turnover24h ||
                    (this.Turnover24h != null &&
                    this.Turnover24h.Equals(input.Turnover24h))
                ) && 
                (
                    this.TotalVolume == input.TotalVolume ||
                    (this.TotalVolume != null &&
                    this.TotalVolume.Equals(input.TotalVolume))
                ) && 
                (
                    this.Volume24h == input.Volume24h ||
                    (this.Volume24h != null &&
                    this.Volume24h.Equals(input.Volume24h))
                ) && 
                (
                    this.FundingRate == input.FundingRate ||
                    (this.FundingRate != null &&
                    this.FundingRate.Equals(input.FundingRate))
                ) && 
                (
                    this.PredictedFundingRate == input.PredictedFundingRate ||
                    (this.PredictedFundingRate != null &&
                    this.PredictedFundingRate.Equals(input.PredictedFundingRate))
                ) && 
                (
                    this.NextFundingTime == input.NextFundingTime ||
                    (this.NextFundingTime != null &&
                    this.NextFundingTime.Equals(input.NextFundingTime))
                ) && 
                (
                    this.CountdownHour == input.CountdownHour ||
                    (this.CountdownHour != null &&
                    this.CountdownHour.Equals(input.CountdownHour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.AskPrice != null)
                    hashCode = hashCode * 59 + this.AskPrice.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.LastTickDirection != null)
                    hashCode = hashCode * 59 + this.LastTickDirection.GetHashCode();
                if (this.PrevPrice24h != null)
                    hashCode = hashCode * 59 + this.PrevPrice24h.GetHashCode();
                if (this.Price24hPcnt != null)
                    hashCode = hashCode * 59 + this.Price24hPcnt.GetHashCode();
                if (this.HighPrice24h != null)
                    hashCode = hashCode * 59 + this.HighPrice24h.GetHashCode();
                if (this.LowPrice24h != null)
                    hashCode = hashCode * 59 + this.LowPrice24h.GetHashCode();
                if (this.PrevPrice1h != null)
                    hashCode = hashCode * 59 + this.PrevPrice1h.GetHashCode();
                if (this.Price1hPcnt != null)
                    hashCode = hashCode * 59 + this.Price1hPcnt.GetHashCode();
                if (this.MarkPrice != null)
                    hashCode = hashCode * 59 + this.MarkPrice.GetHashCode();
                if (this.IndexPrice != null)
                    hashCode = hashCode * 59 + this.IndexPrice.GetHashCode();
                if (this.OpenInterest != null)
                    hashCode = hashCode * 59 + this.OpenInterest.GetHashCode();
                if (this.OpenValue != null)
                    hashCode = hashCode * 59 + this.OpenValue.GetHashCode();
                if (this.TotalTurnover != null)
                    hashCode = hashCode * 59 + this.TotalTurnover.GetHashCode();
                if (this.Turnover24h != null)
                    hashCode = hashCode * 59 + this.Turnover24h.GetHashCode();
                if (this.TotalVolume != null)
                    hashCode = hashCode * 59 + this.TotalVolume.GetHashCode();
                if (this.Volume24h != null)
                    hashCode = hashCode * 59 + this.Volume24h.GetHashCode();
                if (this.FundingRate != null)
                    hashCode = hashCode * 59 + this.FundingRate.GetHashCode();
                if (this.PredictedFundingRate != null)
                    hashCode = hashCode * 59 + this.PredictedFundingRate.GetHashCode();
                if (this.NextFundingTime != null)
                    hashCode = hashCode * 59 + this.NextFundingTime.GetHashCode();
                if (this.CountdownHour != null)
                    hashCode = hashCode * 59 + this.CountdownHour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
