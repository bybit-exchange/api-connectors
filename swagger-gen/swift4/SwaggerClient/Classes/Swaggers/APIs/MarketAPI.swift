//
// MarketAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MarketAPI {
    /**
     Query Account Long Short Ratio
     
     - parameter symbol: (query) Contract type. 
     - parameter period: (query) Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
     - parameter limit: (query) Limit for data size, max size is 500. Default size is 50 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketAccountRatio(symbol: String, period: String, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketAccountRatioWithRequestBuilder(symbol: symbol, period: period, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query Account Long Short Ratio
     - GET /v2/public/account-ratio
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter period: (query) Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
     - parameter limit: (query) Limit for data size, max size is 500. Default size is 50 (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketAccountRatioWithRequestBuilder(symbol: String, period: String, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/account-ratio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "limit": limit?.encodeToJSON(), 
            "period": period
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Query Big Deal
     
     - parameter symbol: (query) Contract type. 
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketBigDeal(symbol: String, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketBigDealWithRequestBuilder(symbol: symbol, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query Big Deal
     - GET /v2/public/big-deal
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketBigDealWithRequestBuilder(symbol: String, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/big-deal"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Query liq records.
     
     - parameter symbol: (query) Contract type. 
     - parameter from: (query) From ID. Default: return latest data (optional)
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)
     - parameter startTime: (query) Start timestamp point for result, in millisecond (optional)
     - parameter endTime: (query) End timestamp point for result, in millisecond (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketLiqRecords(symbol: String, from: Int? = nil, limit: Int? = nil, startTime: Int? = nil, endTime: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketLiqRecordsWithRequestBuilder(symbol: symbol, from: from, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query liq records.
     - GET /v2/public/liq-records
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter from: (query) From ID. Default: return latest data (optional)
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)
     - parameter startTime: (query) Start timestamp point for result, in millisecond (optional)
     - parameter endTime: (query) End timestamp point for result, in millisecond (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketLiqRecordsWithRequestBuilder(symbol: String, from: Int? = nil, limit: Int? = nil, startTime: Int? = nil, endTime: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/liq-records"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "from": from?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "start_time": startTime?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Query Open Interest
     
     - parameter symbol: (query) Contract type. 
     - parameter period: (query) Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
     - parameter limit: (query) Limit for data size, max size is 200. Default size is 50 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketOpenInterest(symbol: String, period: String, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketOpenInterestWithRequestBuilder(symbol: symbol, period: period, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query Open Interest
     - GET /v2/public/open-interest
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter period: (query) Data recording period. 5min, 15min, 30min, 1h, 4h, 1d 
     - parameter limit: (query) Limit for data size, max size is 200. Default size is 50 (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketOpenInterestWithRequestBuilder(symbol: String, period: String, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/open-interest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "limit": limit?.encodeToJSON(), 
            "period": period
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the orderbook.
     
     - parameter symbol: (query) Contract type. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketOrderbook(symbol: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketOrderbookWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the orderbook.
     - GET /v2/public/orderBook/L2
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 

     - returns: RequestBuilder<Any> 
     */
    open class func marketOrderbookWithRequestBuilder(symbol: String) -> RequestBuilder<Any> {
        let path = "/v2/public/orderBook/L2"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the latest information for symbol.
     
     - parameter symbol: (query) Contract type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketSymbolInfo(symbol: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketSymbolInfoWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the latest information for symbol.
     - GET /v2/public/tickers
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketSymbolInfoWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/tickers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get recent trades
     
     - parameter symbol: (query) Contract type. 
     - parameter from: (query) From ID. Default: return latest data (optional)
     - parameter limit: (query) Number of results. Default 500; max 1000 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketTradingRecords(symbol: String, from: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        marketTradingRecordsWithRequestBuilder(symbol: symbol, from: from, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get recent trades
     - GET /v2/public/trading-records
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter from: (query) From ID. Default: return latest data (optional)
     - parameter limit: (query) Number of results. Default 500; max 1000 (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func marketTradingRecordsWithRequestBuilder(symbol: String, from: Int? = nil, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/trading-records"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "from": from?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
