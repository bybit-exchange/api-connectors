//
// OrderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrderAPI {
    /**
     Get my active order list.
     
     - parameter symbol: (form) Contract type. 
     - parameter orderId: (form) Order ID (optional)
     - parameter orderLinkId: (form) Order link id. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderCancel(symbol: String, orderId: String? = nil, orderLinkId: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderCancelWithRequestBuilder(symbol: symbol, orderId: orderId, orderLinkId: orderLinkId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get my active order list.
     - POST /v2/private/order/cancel
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form) Contract type. 
     - parameter orderId: (form) Order ID (optional)
     - parameter orderLinkId: (form) Order link id. (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func orderCancelWithRequestBuilder(symbol: String, orderId: String? = nil, orderLinkId: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/private/order/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "order_id": orderId,
            "symbol": symbol,
            "order_link_id": orderLinkId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get my active order list.
     
     - parameter symbol: (form) Contract type. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderCancelAll(symbol: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderCancelAllWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get my active order list.
     - POST /v2/private/order/cancelAll
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form) Contract type. 

     - returns: RequestBuilder<Any> 
     */
    open class func orderCancelAllWithRequestBuilder(symbol: String) -> RequestBuilder<Any> {
        let path = "/v2/private/order/cancelAll"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get my active order list.
     
     - parameter symbol: (query) Contract type. Default BTCUSD 
     - parameter limit: (query) TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     - parameter orderStatus: (query) Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     - parameter direction: (query) Search direction. prev: prev page, next: next page. Defaults to next (optional)
     - parameter cursor: (query) Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderGetOrders(symbol: String, limit: Double? = nil, orderStatus: String? = nil, direction: String? = nil, cursor: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderGetOrdersWithRequestBuilder(symbol: symbol, limit: limit, orderStatus: orderStatus, direction: direction, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get my active order list.
     - GET /v2/private/order/list
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. Default BTCUSD 
     - parameter limit: (query) TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     - parameter orderStatus: (query) Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     - parameter direction: (query) Search direction. prev: prev page, next: next page. Defaults to next (optional)
     - parameter cursor: (query) Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func orderGetOrdersWithRequestBuilder(symbol: String, limit: Double? = nil, orderStatus: String? = nil, direction: String? = nil, cursor: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/private/order/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "limit": limit, 
            "order_status": orderStatus, 
            "direction": direction, 
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Place active order
     
     - parameter side: (form) Side 
     - parameter symbol: (form) Contract type. 
     - parameter orderType: (form) Active order type 
     - parameter qty: (form)  
     - parameter timeInForce: (form) Time in force 
     - parameter price: (form) Order price. (optional)
     - parameter takeProfit: (form) take profit price (optional)
     - parameter stopLoss: (form) stop loss price (optional)
     - parameter reduceOnly: (form) reduce only (optional)
     - parameter closeOnTrigger: (form) close on trigger (optional)
     - parameter orderLinkId: (form) TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderNew(side: String, symbol: String, orderType: String, qty: Double, timeInForce: String, price: Double? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, reduceOnly: Bool? = nil, closeOnTrigger: Bool? = nil, orderLinkId: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderNewWithRequestBuilder(side: side, symbol: symbol, orderType: orderType, qty: qty, timeInForce: timeInForce, price: price, takeProfit: takeProfit, stopLoss: stopLoss, reduceOnly: reduceOnly, closeOnTrigger: closeOnTrigger, orderLinkId: orderLinkId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place active order
     - POST /v2/private/order/create
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter side: (form) Side 
     - parameter symbol: (form) Contract type. 
     - parameter orderType: (form) Active order type 
     - parameter qty: (form)  
     - parameter timeInForce: (form) Time in force 
     - parameter price: (form) Order price. (optional)
     - parameter takeProfit: (form) take profit price (optional)
     - parameter stopLoss: (form) stop loss price (optional)
     - parameter reduceOnly: (form) reduce only (optional)
     - parameter closeOnTrigger: (form) close on trigger (optional)
     - parameter orderLinkId: (form) TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func orderNewWithRequestBuilder(side: String, symbol: String, orderType: String, qty: Double, timeInForce: String, price: Double? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, reduceOnly: Bool? = nil, closeOnTrigger: Bool? = nil, orderLinkId: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/private/order/create"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "side": side,
            "symbol": symbol,
            "order_type": orderType,
            "qty": qty,
            "price": price,
            "time_in_force": timeInForce,
            "take_profit": takeProfit,
            "stop_loss": stopLoss,
            "reduce_only": reduceOnly,
            "close_on_trigger": closeOnTrigger,
            "order_link_id": orderLinkId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get my active order list.
     
     - parameter orderId: (query) Order ID (optional)
     - parameter symbol: (query) Contract type. Default BTCUSD (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderQuery(orderId: String? = nil, symbol: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderQueryWithRequestBuilder(orderId: orderId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get my active order list.
     - GET /v2/private/order
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (query) Order ID (optional)
     - parameter symbol: (query) Contract type. Default BTCUSD (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func orderQueryWithRequestBuilder(orderId: String? = nil, symbol: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/private/order"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": orderId, 
            "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace active order. Only incomplete orders can be modified. 
     
     - parameter symbol: (form) Contract type. 
     - parameter orderId: (form) Order ID. (optional)
     - parameter orderLinkId: (form) Order Link ID. (optional)
     - parameter pRQty: (form) Order quantity. (optional)
     - parameter pRPrice: (form) Order price. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderReplace(symbol: String, orderId: String? = nil, orderLinkId: String? = nil, pRQty: String? = nil, pRPrice: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        orderReplaceWithRequestBuilder(symbol: symbol, orderId: orderId, orderLinkId: orderLinkId, pRQty: pRQty, pRPrice: pRPrice).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Replace active order. Only incomplete orders can be modified. 
     - POST /v2/private/order/replace
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form) Contract type. 
     - parameter orderId: (form) Order ID. (optional)
     - parameter orderLinkId: (form) Order Link ID. (optional)
     - parameter pRQty: (form) Order quantity. (optional)
     - parameter pRPrice: (form) Order price. (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func orderReplaceWithRequestBuilder(symbol: String, orderId: String? = nil, orderLinkId: String? = nil, pRQty: String? = nil, pRPrice: String? = nil) -> RequestBuilder<Any> {
        let path = "/v2/private/order/replace"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "order_id": orderId,
            "order_link_id": orderLinkId,
            "symbol": symbol,
            "p_r_qty": pRQty,
            "p_r_price": pRPrice
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
