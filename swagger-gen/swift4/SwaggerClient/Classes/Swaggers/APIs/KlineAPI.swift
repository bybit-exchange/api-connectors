//
// KlineAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class KlineAPI {
    /**
     Query historical kline.
     
     - parameter symbol: (query) Contract type. 
     - parameter interval: (query) Kline interval. 
     - parameter from: (query) from timestamp. 
     - parameter limit: (query) Contract type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func klineGet(symbol: String, interval: String, from: Double, limit: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        klineGetWithRequestBuilder(symbol: symbol, interval: interval, from: from, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query historical kline.
     - GET /v2/public/kline/list
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter interval: (query) Kline interval. 
     - parameter from: (query) from timestamp. 
     - parameter limit: (query) Contract type. (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func klineGetWithRequestBuilder(symbol: String, interval: String, from: Double, limit: Double? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/kline/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "interval": interval, 
            "from": from, 
            "limit": limit
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Query mark price kline.
     
     - parameter symbol: (query) Contract type. 
     - parameter interval: (query) Data refresh interval 
     - parameter from: (query) From timestamp in seconds 
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func klineMarkPrice(symbol: String, interval: String, from: Int, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        klineMarkPriceWithRequestBuilder(symbol: symbol, interval: interval, from: from, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Query mark price kline.
     - GET /v2/public/mark-price-kline
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query) Contract type. 
     - parameter interval: (query) Data refresh interval 
     - parameter from: (query) From timestamp in seconds 
     - parameter limit: (query) Limit for data size, max size is 1000. Default size is 500 (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func klineMarkPriceWithRequestBuilder(symbol: String, interval: String, from: Int, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/v2/public/mark-price-kline"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "interval": interval, 
            "from": from.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
