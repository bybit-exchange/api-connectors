/*
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConditionalApi {
    private ApiClient apiClient;

    public ConditionalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConditionalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for conditionalCancel
     * @param stopOrderId Order ID of conditional order. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conditionalCancelCall(String stopOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/stop-order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stopOrderId != null)
        localVarFormParams.put("stop_order_id", stopOrderId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conditionalCancelValidateBeforeCall(String stopOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stopOrderId' is set
        if (stopOrderId == null) {
            throw new ApiException("Missing the required parameter 'stopOrderId' when calling conditionalCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = conditionalCancelCall(stopOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel conditional order.
     * 
     * @param stopOrderId Order ID of conditional order. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object conditionalCancel(String stopOrderId) throws ApiException {
        ApiResponse<Object> resp = conditionalCancelWithHttpInfo(stopOrderId);
        return resp.getData();
    }

    /**
     * Cancel conditional order.
     * 
     * @param stopOrderId Order ID of conditional order. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> conditionalCancelWithHttpInfo(String stopOrderId) throws ApiException {
        com.squareup.okhttp.Call call = conditionalCancelValidateBeforeCall(stopOrderId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel conditional order. (asynchronously)
     * 
     * @param stopOrderId Order ID of conditional order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conditionalCancelAsync(String stopOrderId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conditionalCancelValidateBeforeCall(stopOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conditionalCancelAll
     * @param symbol Contract type. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conditionalCancelAllCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/private/stop-order/cancelAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conditionalCancelAllValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling conditionalCancelAll(Async)");
        }
        

        com.squareup.okhttp.Call call = conditionalCancelAllCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object conditionalCancelAll(String symbol) throws ApiException {
        ApiResponse<Object> resp = conditionalCancelAllWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> conditionalCancelAllWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = conditionalCancelAllValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel conditional order. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conditionalCancelAllAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conditionalCancelAllValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conditionalGetOrders
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD. (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conditionalGetOrdersCall(String stopOrderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/stop-order/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stopOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_id", stopOrderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conditionalGetOrdersValidateBeforeCall(String stopOrderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = conditionalGetOrdersCall(stopOrderId, orderLinkId, symbol, order, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my conditional order list.
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD. (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object conditionalGetOrders(String stopOrderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit) throws ApiException {
        ApiResponse<Object> resp = conditionalGetOrdersWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit);
        return resp.getData();
    }

    /**
     * Get my conditional order list.
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD. (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> conditionalGetOrdersWithHttpInfo(String stopOrderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit) throws ApiException {
        com.squareup.okhttp.Call call = conditionalGetOrdersValidateBeforeCall(stopOrderId, orderLinkId, symbol, order, page, limit, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my conditional order list. (asynchronously)
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD. (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conditionalGetOrdersAsync(String stopOrderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conditionalGetOrdersValidateBeforeCall(stopOrderId, orderLinkId, symbol, order, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conditionalNew
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param price Execution price for conditional order (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conditionalNewCall(String side, String symbol, String orderType, BigDecimal qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/stop-order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (side != null)
        localVarFormParams.put("side", side);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (price != null)
        localVarFormParams.put("price", price);
        if (basePrice != null)
        localVarFormParams.put("base_price", basePrice);
        if (stopPx != null)
        localVarFormParams.put("stop_px", stopPx);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (triggerBy != null)
        localVarFormParams.put("trigger_by", triggerBy);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conditionalNewValidateBeforeCall(String side, String symbol, String orderType, BigDecimal qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'orderType' is set
        if (orderType == null) {
            throw new ApiException("Missing the required parameter 'orderType' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'basePrice' is set
        if (basePrice == null) {
            throw new ApiException("Missing the required parameter 'basePrice' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'stopPx' is set
        if (stopPx == null) {
            throw new ApiException("Missing the required parameter 'stopPx' when calling conditionalNew(Async)");
        }
        
        // verify the required parameter 'timeInForce' is set
        if (timeInForce == null) {
            throw new ApiException("Missing the required parameter 'timeInForce' when calling conditionalNew(Async)");
        }
        

        com.squareup.okhttp.Call call = conditionalNewCall(side, symbol, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Place a new conditional order.
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param price Execution price for conditional order (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object conditionalNew(String side, String symbol, String orderType, BigDecimal qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = conditionalNewWithHttpInfo(side, symbol, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, closeOnTrigger, orderLinkId);
        return resp.getData();
    }

    /**
     * Place a new conditional order.
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param price Execution price for conditional order (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> conditionalNewWithHttpInfo(String side, String symbol, String orderType, BigDecimal qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = conditionalNewValidateBeforeCall(side, symbol, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, closeOnTrigger, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Place a new conditional order. (asynchronously)
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param price Execution price for conditional order (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conditionalNewAsync(String side, String symbol, String orderType, BigDecimal qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conditionalNewValidateBeforeCall(side, symbol, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conditionalReplace
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conditionalReplaceCall(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, Double pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/stop-order/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (pRQty != null)
        localVarFormParams.put("p_r_qty", pRQty);
        if (pRPrice != null)
        localVarFormParams.put("p_r_price", pRPrice);
        if (pRTriggerPrice != null)
        localVarFormParams.put("p_r_trigger_price", pRTriggerPrice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conditionalReplaceValidateBeforeCall(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, Double pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling conditionalReplace(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling conditionalReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = conditionalReplaceCall(orderId, symbol, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace conditional order. Only incomplete orders can be modified. 
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object conditionalReplace(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, Double pRTriggerPrice) throws ApiException {
        ApiResponse<Object> resp = conditionalReplaceWithHttpInfo(orderId, symbol, pRQty, pRPrice, pRTriggerPrice);
        return resp.getData();
    }

    /**
     * Replace conditional order. Only incomplete orders can be modified. 
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> conditionalReplaceWithHttpInfo(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, Double pRTriggerPrice) throws ApiException {
        com.squareup.okhttp.Call call = conditionalReplaceValidateBeforeCall(orderId, symbol, pRQty, pRPrice, pRTriggerPrice, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace conditional order. Only incomplete orders can be modified.  (asynchronously)
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conditionalReplaceAsync(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, Double pRTriggerPrice, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conditionalReplaceValidateBeforeCall(orderId, symbol, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
