/*
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for orderCancel
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderCancelCall(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderCancelValidateBeforeCall(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = orderCancelCall(orderId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Object orderCancel(String orderId, String symbol) throws ApiException {
        ApiResponse<Object> resp = orderCancelWithHttpInfo(orderId, symbol);
        return resp.getData();
    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> orderCancelWithHttpInfo(String orderId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = orderCancelValidateBeforeCall(orderId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my active order list. (asynchronously)
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderCancelAsync(String orderId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderCancelValidateBeforeCall(orderId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderCancelAll
     * @param symbol Contract type. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderCancelAllCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/private/order/cancelAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderCancelAllValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling orderCancelAll(Async)");
        }
        

        com.squareup.okhttp.Call call = orderCancelAllCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my active order list.
     * 
     * @param symbol Contract type. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object orderCancelAll(String symbol) throws ApiException {
        ApiResponse<Object> resp = orderCancelAllWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Get my active order list.
     * 
     * @param symbol Contract type. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> orderCancelAllWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = orderCancelAllValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my active order list. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderCancelAllAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderCancelAllValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderCancelV2
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderCancelV2Call(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/private/order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderCancelV2ValidateBeforeCall(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderCancelV2(Async)");
        }
        

        com.squareup.okhttp.Call call = orderCancelV2Call(orderId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Object orderCancelV2(String orderId, String symbol) throws ApiException {
        ApiResponse<Object> resp = orderCancelV2WithHttpInfo(orderId, symbol);
        return resp.getData();
    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> orderCancelV2WithHttpInfo(String orderId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = orderCancelV2ValidateBeforeCall(orderId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my active order list. (asynchronously)
     * 
     * @param orderId Order ID (required)
     * @param symbol Contract type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderCancelV2Async(String orderId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderCancelV2ValidateBeforeCall(orderId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderGetOrders
     * @param orderId Order ID (optional)
     * @param orderLinkId Customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderGetOrdersCall(String orderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/order/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_id", orderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_status", orderStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetOrdersValidateBeforeCall(String orderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = orderGetOrdersCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (optional)
     * @param orderLinkId Customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object orderGetOrders(String orderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, String orderStatus) throws ApiException {
        ApiResponse<Object> resp = orderGetOrdersWithHttpInfo(orderId, orderLinkId, symbol, order, page, limit, orderStatus);
        return resp.getData();
    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (optional)
     * @param orderLinkId Customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> orderGetOrdersWithHttpInfo(String orderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, String orderStatus) throws ApiException {
        com.squareup.okhttp.Call call = orderGetOrdersValidateBeforeCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my active order list. (asynchronously)
     * 
     * @param orderId Order ID (optional)
     * @param orderLinkId Customized order ID. (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param order Sort orders by creation date (optional)
     * @param page Page. Default getting first page data (optional)
     * @param limit TLimit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)
     * @param orderStatus Query your orders for all statuses if &#39;order_status&#39; is empty. If you want to query orders with specific statuses , you can pass the order_status split by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetOrdersAsync(String orderId, String orderLinkId, String symbol, String order, BigDecimal page, BigDecimal limit, String orderStatus, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetOrdersValidateBeforeCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderNew
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderNewCall(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (takeProfit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("take_profit", takeProfit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (side != null)
        localVarFormParams.put("side", side);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (reduceOnly != null)
        localVarFormParams.put("reduce_only", reduceOnly);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderNewValidateBeforeCall(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling orderNew(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling orderNew(Async)");
        }
        
        // verify the required parameter 'orderType' is set
        if (orderType == null) {
            throw new ApiException("Missing the required parameter 'orderType' when calling orderNew(Async)");
        }
        
        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling orderNew(Async)");
        }
        
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling orderNew(Async)");
        }
        
        // verify the required parameter 'timeInForce' is set
        if (timeInForce == null) {
            throw new ApiException("Missing the required parameter 'timeInForce' when calling orderNew(Async)");
        }
        

        com.squareup.okhttp.Call call = orderNewCall(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Place active order
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Object orderNew(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = orderNewWithHttpInfo(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId);
        return resp.getData();
    }

    /**
     * Place active order
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> orderNewWithHttpInfo(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = orderNewValidateBeforeCall(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Place active order (asynchronously)
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call orderNewAsync(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderNewValidateBeforeCall(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderNewV2
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param trailingStop Trailing stop. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderNewV2Call(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, String trailingStop, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/private/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (takeProfit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("take_profit", takeProfit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (side != null)
        localVarFormParams.put("side", side);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (reduceOnly != null)
        localVarFormParams.put("reduce_only", reduceOnly);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (trailingStop != null)
        localVarFormParams.put("trailing_stop", trailingStop);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderNewV2ValidateBeforeCall(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, String trailingStop, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling orderNewV2(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling orderNewV2(Async)");
        }
        
        // verify the required parameter 'orderType' is set
        if (orderType == null) {
            throw new ApiException("Missing the required parameter 'orderType' when calling orderNewV2(Async)");
        }
        
        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling orderNewV2(Async)");
        }
        
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling orderNewV2(Async)");
        }
        
        // verify the required parameter 'timeInForce' is set
        if (timeInForce == null) {
            throw new ApiException("Missing the required parameter 'timeInForce' when calling orderNewV2(Async)");
        }
        

        com.squareup.okhttp.Call call = orderNewV2Call(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Place active order
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param trailingStop Trailing stop. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object orderNewV2(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, String trailingStop) throws ApiException {
        ApiResponse<Object> resp = orderNewV2WithHttpInfo(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop);
        return resp.getData();
    }

    /**
     * Place active order
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param trailingStop Trailing stop. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> orderNewV2WithHttpInfo(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, String trailingStop) throws ApiException {
        com.squareup.okhttp.Call call = orderNewV2ValidateBeforeCall(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Place active order (asynchronously)
     * 
     * @param side Side (required)
     * @param symbol Contract type. (required)
     * @param orderType Active order type (required)
     * @param qty  (required)
     * @param price Order price. (required)
     * @param timeInForce Time in force (required)
     * @param takeProfit take profit price (optional)
     * @param stopLoss stop loss price (optional)
     * @param reduceOnly reduce only (optional)
     * @param closeOnTrigger close on trigger (optional)
     * @param orderLinkId TCustomized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique. (optional)
     * @param trailingStop Trailing stop. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderNewV2Async(String side, String symbol, String orderType, BigDecimal qty, Double price, String timeInForce, Double takeProfit, Double stopLoss, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, String trailingStop, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderNewV2ValidateBeforeCall(side, symbol, orderType, qty, price, timeInForce, takeProfit, stopLoss, reduceOnly, closeOnTrigger, orderLinkId, trailingStop, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderQuery
     * @param orderId Order ID (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderQueryCall(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/private/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_id", orderId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderQueryValidateBeforeCall(String orderId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = orderQueryCall(orderId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object orderQuery(String orderId, String symbol) throws ApiException {
        ApiResponse<Object> resp = orderQueryWithHttpInfo(orderId, symbol);
        return resp.getData();
    }

    /**
     * Get my active order list.
     * 
     * @param orderId Order ID (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> orderQueryWithHttpInfo(String orderId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = orderQueryValidateBeforeCall(orderId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my active order list. (asynchronously)
     * 
     * @param orderId Order ID (optional)
     * @param symbol Contract type. Default BTCUSD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderQueryAsync(String orderId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderQueryValidateBeforeCall(orderId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderReplace
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderReplaceCall(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-api/order/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (pRQty != null)
        localVarFormParams.put("p_r_qty", pRQty);
        if (pRPrice != null)
        localVarFormParams.put("p_r_price", pRPrice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderReplaceValidateBeforeCall(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderReplace(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling orderReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = orderReplaceCall(orderId, symbol, pRQty, pRPrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace active order. Only incomplete orders can be modified. 
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object orderReplace(String orderId, String symbol, BigDecimal pRQty, Double pRPrice) throws ApiException {
        ApiResponse<Object> resp = orderReplaceWithHttpInfo(orderId, symbol, pRQty, pRPrice);
        return resp.getData();
    }

    /**
     * Replace active order. Only incomplete orders can be modified. 
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> orderReplaceWithHttpInfo(String orderId, String symbol, BigDecimal pRQty, Double pRPrice) throws ApiException {
        com.squareup.okhttp.Call call = orderReplaceValidateBeforeCall(orderId, symbol, pRQty, pRPrice, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace active order. Only incomplete orders can be modified.  (asynchronously)
     * 
     * @param orderId Order ID. (required)
     * @param symbol Contract type. (required)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderReplaceAsync(String orderId, String symbol, BigDecimal pRQty, Double pRPrice, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderReplaceValidateBeforeCall(orderId, symbol, pRQty, pRPrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
